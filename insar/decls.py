from collections import OrderedDict

DECLS = {
    "ASAR_AP_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "L0",
                    {
                        "desc": "(input) Level 0 Image Mode ASAR data file (ASA_IM_0P)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "INS",
                    {
                        "desc": "(input) ASAR instrument characterization file (ASA_INS_AX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par1",
                    {
                        "desc": "(output) MSP SAR sensor parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par2",
                    {
                        "desc": "(output) MSP SAR sensor parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par1",
                    {
                        "desc": "(output) MSP processing parameter file, (example " "p<orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par2",
                    {
                        "desc": "(output) MSP processing parameter file, (example " "p<orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw1",
                    {
                        "desc": "(output) byte aligned 8-bit I/Q raw data\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw2",
                    {
                        "desc": "(output) byte aligned 8-bit I/Q raw data\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ant_gain1",
                    {
                        "desc": "(input) antenna pattern file 1 (derived using program ASAR_XCA)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ant_gain2",
                    {
                        "desc": "(input) antenna pattern file 2 (derived using program ASAR_XCA)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to first line to process (default = 0, enter - for " "default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to process(default = to end of input, enter - for " "default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "offset to first range sample to process (default = 0, enter - for " "default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range samples to process (default = to end of line, "
                        "enter - for default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "refer",
                    {
                        "desc": "to the first and second polarization pairs (1/2). Filenames should "
                        "be chosen chosen for consistency\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ASAR_AP_proc",
    },
    "ASAR_IM_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "L0",
                    {
                        "desc": "(input) Level 0 Image Mode ASAR data file (ASA_IM_0P)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "INS",
                    {
                        "desc": "(input) ASAR instrument characterization file (ASA_INS_AX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par",
                    {
                        "desc": "(output) MSP SAR sensor parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, (example " "p<orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw",
                    {
                        "desc": "(output) byte aligned 8-bit I/Q raw data\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ant_gain",
                    {
                        "desc": "(input) antenna pattern file name (derived using program " "ASAR_XCA)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset from start of raw data file (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to extract (enter - for default: to end of input " "raw data\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ASAR_IM_proc",
    },
    "ASAR_LO_phase_drift": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ph_drift",
                    {
                        "desc": "(output) interferometric phase correction due to drift of " "the ASAR LO (radians)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ASAR_LO_phase_drift",
    },
    "DELFT_proc2": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DELFT_dir",
                    {
                        "desc": "directory containing Delft orbit arclist and ODR files for ERS-1, "
                        "ERS-2 or ENVISAT\n"
                        "NOTE: enter . for current directory\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors to generate (enter - for default (>= 11)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interval",
                    {
                        "desc": "time interval between state vectors in the ISP image parameter file "
                        "(s) (default: 10.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ODR",
                    {
                        "desc": "ODR file to use (include path) rather than ODR file determined from "
                        "the Delft orbit arclist\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "DELFT_proc2",
    },
    "DELFT_vec2": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DELFT_dir",
                    {
                        "desc": "directory containing Delft orbit arclist and ODR files for ERS-1, "
                        "ERS-2 or ENVISAT\n"
                        "NOTE: enter . for current directory\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors to generate (enter - for default (>= 15)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interval",
                    {
                        "desc": "time interval between state vectors in the ISP image parameter file "
                        "(s) (default: 10.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ODR",
                    {
                        "desc": "ODR file to use (include path) rather than ODR file determined from "
                        "the Delft orbit arclist\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "DELFT_vec2",
    },
    "DORIS_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "PROC_par",
                    {
                        "desc": "(input/output) MSP processing parameter file, (example " "p<orbit>.slc.par)\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DOR",
                    {
                        "desc": "(input) ASAR DORIS data file (DOR_VOR_AXVF)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors to extract (enter - for default: 11)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "DORIS_proc",
    },
    "DORIS_vec": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_PAR",
                    {
                        "desc": "(input/output)ISP SLC/MLI image parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DOR",
                    {
                        "desc": "(input) ASAR DORIS data file (DOR_VOR_AXVF)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors to extract (enter - for default: 11)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "DORIS_vec",
    },
    "ERS_ENVISAT_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "L0",
                    {
                        "desc": "(input) Level 0 Image Mode ERS data file in Envisat format " "(SAR_IM__0P*.E*)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par",
                    {
                        "desc": "(input/output) MSP SAR sensor parameter file (ERS*_ESA.par)\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, (example " "p<orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw",
                    {
                        "desc": "(output) byte aligned 8-bit I/Q raw data\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset from start of raw data file (enter - " "for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to extract (enter - for default: to end of " "input raw data\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "swst_flg",
                    {
                        "desc": "SWST data window position processing flag:\n"
                        "0: ignore changes in the data window position (only for "
                        "corrupted data)\n"
                        "1: track changes in the data window position (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ERS_ENVISAT_proc",
    },
    "ERS_fix": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "ERS_PAF",
                    {
                        "desc": "ERS Processing and Archive Facility (PAF), valid inputs:\n"
                        "ENVISAT ACRES CCRS COLUMBIA DPAF ESA/ESRIN NASDA EIC CRISP UK/QinetiQ\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cc_flag",
                    {
                        "desc": "cross correlation detection of missing lines (default=0=OFF, 1=ON)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "raw",
                    {
                        "desc": "data files (input) list of raw data file name(s) to check and "
                        "concatenate\n"
                        "IMPORTANT: for ERS_PAF=ENVISAT use cat_raw to concatenate!\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ERS_fix",
    },
    "ERS_proc_ACRES": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, example " "p<date>.slc.par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "type",
                    {
                        "desc": "raw data type:\n"
                        "0: CEOS leader format before 1998 (default)\n"
                        "1: CEOS leader format after 1998\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_ACRES",
    },
    "ERS_proc_ARG": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file Argentina PAF\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, (example " "p<date>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_ARG",
    },
    "ERS_proc_ASF": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameters, example p<date>.slc.par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_ASF",
    },
    "ERS_proc_ASF_2000": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, example " "p<date>.slc.par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_ASF_2000",
    },
    "ERS_proc_ASF_91": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR leader file (*.ldr)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_trailer",
                    {
                        "desc": "(input) CEOS trailer file(*.tlr)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, example " "pdate>.slc.par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_ASF_91",
    },
    "ERS_proc_ASI": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, example p<date>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_ASI",
    },
    "ERS_proc_CCRS": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file (contains no VMP header " "information)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, (example " "p<date>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_CCRS",
    },
    "ERS_proc_CRISP": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, example " "p<date>.slc.par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_CRISP",
    },
    "ERS_proc_ESA": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file (VMP or PGS CEOS format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, (example: " "p<date>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_ESA",
    },
    "ERS_proc_ESRIN_ACS": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, example " "p<date>.slc.par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_ESRIN_ACS",
    },
    "ERS_proc_NASDA": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, example " "p<date>.slc.par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_NASDA",
    },
    "ERS_proc_UK": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, example p<date>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ERS_proc_UK",
    },
    "GRD_to_SR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GRD_par",
                    {
                        "desc": "(input) SLC parameter file of output ground range image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input/output) MLI ISP image parameter file for slant range image\n"
                        "NOTE: delete an existing MLI parameter file to recalculate the output "
                        "MLI parameters\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file of input image (enter "
                        "- image in MLI geometry)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "in_file",
                    {
                        "desc": "(input) ground range image (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "out_file",
                    {
                        "desc": "(output) slant range image (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "multi-looking in range (prior to resampling, enter - for default: " "1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "multi-looking in azimuth (prior to resampling, enter - for default: " "1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n"
                        "0: nearest-neighbor\n"
                        "1: bicubic spline\n"
                        "2: bicubic spline log(x)\n"
                        "3: bicubic spline sqrt(x)\n"
                        "4: B-spline interpolation (default B-spline degree: 3)\n"
                        "5: B-spline interpolation sqrt(x) (default) (default B-spline degree: "
                        "3)\n"
                        "NOTE: log and sqrt interpolation modes should only be used with "
                        "non-negative data!\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sr_rsp",
                    {
                        "desc": "output image slant range sample spacing (m) (enter - for default: "
                        "c/(2*adc_sampling_rate)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sr_azsp",
                    {
                        "desc": "output image azimuth sample spacing (m) (enter - for default: (input "
                        "image azimuth spacing) * azlks)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "degree",
                    {"desc": "B-spline degree (2->9) (enter - for default: 3)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "GRD_to_SR",
    },
    "JERS_acs": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "USER_HEADER",
                    {
                        "desc": "(input) ACS user header file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SEG_DESCR",
                    {
                        "desc": "(input) ACS segment descriptor file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ORBIT_DATA",
                    {
                        "desc": "(input) ACS orbit data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SENSOR_DATA",
                    {
                        "desc": "(input) ACS JERS sensor data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "track",
                    {
                        "desc": "(output) track file containing near, center, far lat/lon vs. time "
                        "(enter - for none, text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par",
                    {
                        "desc": "(output) JERS SAR Sensor parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw_out",
                    {
                        "desc": "(output) reformatted raw data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("loff", {"desc": "offset to first line to reformat (lines)\n", "optional": False, "type": "unknown"}),
                (
                    "nl",
                    {"desc": "number of lines to reformat (enter - for all)\n", "optional": False, "type": "unknown"},
                ),
                ("nsx", {"desc": "near swath extension (samples default: 0)\n", "optional": True, "type": "unknown"}),
                ("fsx", {"desc": "far swath extension  (samples default: 0)\n", "optional": True, "type": "unknown"}),
                (
                    "deskew",
                    {"desc": "nominal terrain altitude (m default = 0.0)\n", "optional": True, "type": "unknown"},
                ),
                ("terra_alt", {"desc": "deskew flag (default:ON  OFF)\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "JERS_acs",
    },
    "JERS_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_ldr",
                    {
                        "desc": "(input) CEOS SAR leader file for JERS-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "JERS_proc",
    },
    "JERS_proc_ASF": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR leader file (ASF Level 0 leader)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, (example " "p<orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "JERS_proc_ASF",
    },
    "MLI_cat": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "MLI-1",
                    {
                        "desc": "(input) MLI-1 image (single-look)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2",
                    {
                        "desc": "(input) MLI-2 image to be appended to MLI-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI1_par",
                    {
                        "desc": "(input) MLI-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI2_par",
                    {
                        "desc": "(input) MLI-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-3",
                    {
                        "desc": "(output) concatenated MLI image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI3_par",
                    {
                        "desc": "(output) ISP image parameter file for concatenated image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input/output data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "NOTE: FCOMPLEX is for differential interferograms\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mflg",
                    {
                        "desc": "mosaicking option flag (enter - for default)\n"
                        "0: in overlapping areas, use MLI-2 data to fill MLI-1 empty areas "
                        "(default)\n"
                        "1: in overlapping areas, do not use MLI-2 data to fill MLI-1 empty "
                        "areas\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "overlap",
                    {
                        "desc": "number of pixels at the edge of MLI-1 valid areas to replace by MLI-2 "
                        "data (only if mflg=0, enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode in case of different geometries (enter - for "
                        "default)\n"
                        "0: B-spline interpolation (default for FCOMPLEX)\n"
                        "1: B-spline interpolation sqrt(x) (default for FLOAT)\n"
                        "NOTE: sqrt interpolation mode should only be used with non-negative "
                        "data!\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "degree",
                    {"desc": "B-spline degree (2->9) (enter - default: 4)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "extrapol",
                    {
                        "desc": "extrapolation flag (enter - for default)\n"
                        "0: do not extrapolate (default)\n"
                        "1: extrapolate last line if needed\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "MLI_cat",
    },
    "MLI_copy": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "MLI_in",
                    {
                        "desc": "(input) multi-look intensity image (float format)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "MLI_in_par",
                    {
                        "desc": "(input) ISP image parameter file for input MLI\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_out",
                    {
                        "desc": "(output) selected MLI section (float format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_out_par",
                    {
                        "desc": "(output) ISP image parameter file for output MLI\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "offset to starting range sample (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range samples (enter - for default: to end of line\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {"desc": "offset to starting line (enter - for default: 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to copy (enter - for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "MLI_copy",
    },
    "MLI_interp_lt": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI-2",
                    {
                        "desc": "(input) MLI-2 image to be resampled to the geometry of the MLI-1 " "reference image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI1_par",
                    {
                        "desc": "(input) ISP image parameter file of the MLI-1 reference\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI2_par",
                    {
                        "desc": "(input) ISP image parameter file of MLI-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(input) lookup_table relating MLI-2 to MLI-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI3_par",
                    {
                        "desc": "(input) ISP image parameter file of reference scene MLI-3 (lookup "
                        "table dimension)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI4_par",
                    {
                        "desc": "(input) ISP image parameter file of MLI-4 (lookup table values)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF parameter file used for refinement (enter - for " "none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2R",
                    {
                        "desc": "(output) MLI-2 coregistered to MLI-1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI2R_par",
                    {
                        "desc": "(output) MLI-2R ISP image parameter file for coregistered image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "B-Spline interpolation degree (2->9) (enter - default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "MLI_interp_lt",
    },
    "ORB_filt": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par_in",
                    {
                        "desc": "(input) ISP image parameter file at least 5 state vectors\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par_out",
                    {
                        "desc": "(output) ISP image parameter file with state vectors filtered using "
                        "least-squares\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "interval",
                    {
                        "desc": "time interval between state vectors (enter - for default: state vector "
                        "time interval in SLC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "extra",
                    {
                        "desc": "extra time for state vectors at start and end of image (sec.) (enter - "
                        "for default: 5.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ORB_filt",
    },
    "ORB_prop": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors to calculate for the MSP image parameter "
                        "file,\n"
                        "(enter - for the default value determined from the duration of the "
                        "state vectors)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interval",
                    {
                        "desc": "time interval between state vectors (default: input state vector time " "interval)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "extra",
                    {
                        "desc": "extra time for state vector coverage at start and end of image "
                        "(default= 30.0 s.)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ORB_prop",
    },
    "ORB_prop_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP image parameter file with at least 1 state vector\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors to calculate (enter - for default: nstate "
                        "from image duration + extra)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interval",
                    {
                        "desc": "time interval between state vectors (enter - for default: state "
                        "vector time interval in SLC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "extra",
                    {
                        "desc": "extra time for state vectors at start and end of image (sec.) "
                        "(enter - for default: 30.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "orbit propagation mode:\n"
                        "0: polynomial interpolation (default, if 3 or more state vectors "
                        "available)\n"
                        "1: integration of the equations of motion (default, if less than 3 "
                        "state vectors available)\n"
                        "2: interpolate between state vectors, minimum of 3 state vectors;\n"
                        "interpolation of the equations of motion outside of the time span "
                        "of the existing state vectors\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ORB_prop_SLC",
    },
    "ORRM_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "PROC_par",
                    {
                        "desc": "(input/output) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ORRM",
                    {
                        "desc": "(input) ORRM state vector file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nstate",
                    {"desc": "number of state vectors (default=5, maximum=64)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "ORRM_proc",
    },
    "ORRM_vec": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input/output) ISP SLC/MLI image parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ORRM",
                    {
                        "desc": "(input) ORRM state vector file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors (default=5, maximum=1024)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ORRM_vec",
    },
    "PALSAR_antpat": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PAL_ANT",
                    {
                        "desc": "(input) PALSAR antenna pattern file provided by JAXA (e.g. "
                        "palsar_ant_20061024.dat)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ant_file",
                    {
                        "desc": "(output) MSP format antenna pattern file (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "Beam_ID",
                    {
                        "desc": "(input) PALSAR mode beam ID, if not provided the program will "
                        "determine the beam from the SAR_par look angle parameter\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "TX_POL",
                    {
                        "desc": "transmit polarization: (required if PROC_par not specified)\n"
                        "0: H (default)\n"
                        "1: V\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "RX_POL",
                    {
                        "desc": "receive polarization: (required if PROC_par not specified)\n"
                        "0: H (default)\n"
                        "1: V\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "Beam",
                    {
                        "desc": "Ds for different center-beam look angles and PALSAR modes:\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "PALSAR_antpat",
    },
    "PALSAR_burst_sync": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par1",
                    {
                        "desc": "(input) MSP sensor parameter file for track-1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par1",
                    {
                        "desc": "(input) MSP processing parameter file for track-1 " "(reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw1",
                    {
                        "desc": "(input) WB ScanSAR data track-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par2",
                    {
                        "desc": "(input) MSP sensor parameter file for track-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par2",
                    {
                        "desc": "(input) MSP processing parameter file for track-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw2",
                    {
                        "desc": "(input) WB ScanSAR or FBS raw data track-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par1_out",
                    {
                        "desc": "(output) MSP processing parameter file for burst sync. " "track-1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw1_out",
                    {
                        "desc": "(output) WB ScanSAR data for burst sync. track-1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par2_out",
                    {
                        "desc": "(output) MSP processing parameter file for burst sync. " "track-2\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw2_out",
                    {
                        "desc": "(output) WB ScanSAR data for burst sync. track-2\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "PALSAR_burst_sync",
    },
    "PALSAR_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR leader file for PALSAR (LED...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par",
                    {
                        "desc": "(output) MSP sensor parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_raw_data",
                    {
                        "desc": "(input)  PALSAR CEOS format raw data file (IMG...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw_out",
                    {
                        "desc": "(output) PALSAR range aligned raw data output (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "TX_POL",
                    {
                        "desc": "extracted channel transmit polarization:\n0: H (default)\n1: V\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "RX_POL",
                    {
                        "desc": "extracted channel receive polarization:\n0: H (default)\n1: V\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "PALSAR_proc",
    },
    "PALSAR_proc_WB": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR leader file for PALSAR (LED...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par",
                    {
                        "desc": "(output) MSP sensor parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_raw_data",
                    {
                        "desc": "(input)  PALSAR CEOS format raw data file (IMG...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "beam",
                    {
                        "desc": "(input)  beam number (1 --> 5)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw_out",
                    {
                        "desc": "(output) PALSAR range aligned raw data output (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "prf",
                    {
                        "desc": "(input)  PRF of the resampled data, (enter - for default: beam 4 " "PRF)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "wflg",
                    {
                        "desc": "(input) burst window weighting flag (enter - for default):\n"
                        "0: no window applied to bursts (default)\n"
                        "1: apply Kaiser window to each burst \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "PALSAR_proc_WB",
    },
    "PRC_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("PRC", {"desc": "PRC state vector file\n", "optional": False, "type": "unknown"}),
                (
                    "nstate",
                    {"desc": "number of state vectors (default=5, maximum=64)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "PRC_proc",
    },
    "PRC_vec": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input/output) ISP SLC/MLI image parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PRC",
                    {
                        "desc": "(input) PRC state vector file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors (default=5, maximum=1024)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "PRC_vec",
    },
    "RSAT2_vec": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "RSAT2_orb",
                    {
                        "desc": "Radarsat-2 definitive orbit data file available from MDA " "(orbit_number_def.orb)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors to extract (enter - for default: 9)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "RSAT2_vec",
    },
    "RSAT_lks": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SLC_PROC_par",
                    {
                        "desc": "(input) MSP SLC processing parameter file \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_PROC_par",
                    {
                        "desc": "(output) MLI processing parameter file \n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_image",
                    {
                        "desc": "(input) SLC image file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ML_image",
                    {
                        "desc": "(output) MLI image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("kaiser", {"desc": "Kaiser window parameter (default=2.9)\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "RSAT_lks",
    },
    "RSAT_raw": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par",
                    {
                        "desc": "(output) MSP SAR sensor parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw_data_files",
                    {
                        "desc": "(input) Radarsat raw data file(s) to condition and concatenate\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "RSAT_raw",
    },
    "S1_OPOD_vec": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_PAR",
                    {
                        "desc": "(input/output)ISP SLC/MLI image parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OPOD",
                    {
                        "desc": "(input) Sentinel-1 OPOD orbit data file (AUX_POEORB or AUX_RESORB)\n"
                        "https://qc.sentinel1.eo.esa.int/aux_resorb/\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nstate",
                    {
                        "desc": "number of state vectors to extract (default: include 60 sec "
                        "extention at the start and end of the SLC data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "S1_OPOD_vec",
    },
    "S1_burstloc": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "annotation_XML",
                    {
                        "desc": "(input) Sentinel-1 L1 XML annotation file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                )
            ]
        ),
        "program": "S1_burstloc",
    },
    "SIRC_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR raw data leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par",
                    {
                        "desc": "(output) MSP sensor parameter file, (example SIRC.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file, (example p<orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "UTC/MET",
                    {
                        "desc": "raw data time reference: 0=UTC, 1=Mission Elapsed Time, default=UTC\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SIRC_proc",
    },
    "SLC_RFI_filt": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) SLC to be filtered (FCOMPLEX or SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) reference SLC parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_filt",
                    {
                        "desc": "(output) output filtered SLC using the power spectrum of the " "reference SLC\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rfi_thres", {"desc": "RFI threshold (default: 10.00)\n", "optional": True, "type": "unknown"}),
                (
                    "nfft_r",
                    {
                        "desc": "range filter FFT window size, 2**N, 16->1024, (enter - for " "default: 128)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nfft_az",
                    {
                        "desc": "azimuth filter FFT window size, 2**N, 16->1024, (enter - for " "default: 128)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "r_step",
                    {
                        "desc": "range processing step (enter - for default: nfft_r/4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_step",
                    {
                        "desc": "azimuth processing step (enter - for default: nfft_az/4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mwin_r",
                    {
                        "desc": "range median window size for median PSD filtering (enter - for " "default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mwin_az",
                    {
                        "desc": "azimuth median window size for median PSD filtering (enter - for " "default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_RFI_filt",
    },
    "SLC_RFI_filt2": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) SLC to be filtered (FCOMPLEX or SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) reference SLC parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_filt",
                    {
                        "desc": "(output) output filtered SLC (same format as SLC)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rfi_thres",
                    {
                        "desc": "RFI threshold in dB above reference (enter - for default: auto)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "method",
                    {
                        "desc": "RFI detection method (enter - for default)\n"
                        "0: threshold above median\n"
                        "1: threshold using spectrum symmetry (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "f_bs",
                    {
                        "desc": "center or seed frequency of band-stop filter in Hz (-fadc/2.0 <= "
                        "f_bs < fadc/2.0, enter - for default: auto)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bs_width",
                    {
                        "desc": "width of band-stop filter in Hz (enter - for default: auto)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "offset to starting range sample to filter (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range samples to filter (enter - for default: to end of " "line)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azoff",
                    {
                        "desc": "offset to starting azimuth line to filter (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "naz",
                    {
                        "desc": "number of azimuth lines to filter (enter - for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "range spectrum plotting flag (enter - for default)\n"
                        "0: none\n"
                        "1: output plot in PNG format (default)\n"
                        "2: screen output plot\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "SLC_RFI_filt2",
    },
    "SLC_adf": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) SLC to be filtered (FCOMPLEX or SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ref_SLC",
                    {
                        "desc": "(input) reference SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ref_SLC_par",
                    {
                        "desc": "(input) reference SLC parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_filt",
                    {
                        "desc": "(output) output filtered SLC using the power spectrum of the reference " "SLC\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "SLC filtering mode (enter - for default):\n"
                        "0: 1D range PSD filter\n"
                        "1: 1D azimuth PSD filter\n"
                        "2: 2D range PSD * azimuth PSD filter \n"
                        "3: 2D median-filtered PSD filtering (default)\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "alpha",
                    {
                        "desc": "exponent to apply to PSD value (enter - for default: 0.30)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nfft_r",
                    {
                        "desc": "range filter FFT window size, 2**N, 16->1024, (enter - for default: " "128)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nfft_az",
                    {
                        "desc": "azimuth filter FFT window size, 2**N, 16->1024, (enter - for default: " "128)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "r_step",
                    {
                        "desc": "range processing step (enter - for default: nfft_r/4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_step",
                    {
                        "desc": "azimuth processing step (enter - for default: nfft_az/4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mwin_r",
                    {
                        "desc": "range median window size for median PSD filtering (enter - for default: " "5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mwin_az",
                    {
                        "desc": "azimuth median window size for median PSD filtering (enter - for " "default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_adf",
    },
    "SLC_cat": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) SLC-1 image (FCOMPLEX or SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) SLC-2 image to be appended to SLC-1 (same type as SLC-1)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset parameter file containing offset polynomials between "
                        "SLC-1 and SLC-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-3",
                    {
                        "desc": "(output) concatenated SLC\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC3_par",
                    {
                        "desc": "(output) ISP image parameter file for concatenated image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dopflg",
                    {
                        "desc": "Doppler flag (enter - for default)\n"
                        "0: ignore Doppler centroid information, assume 0 Hz Doppler centroid\n"
                        "1: use Doppler centroid information for interpolation (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "iflg",
                    {
                        "desc": "input data type flag (enter - for default)\n"
                        "0: input data are SLC images, use data type specified in SLC_par files "
                        "(SCOMPLEX or FCOMPLEX) (default)\n"
                        "1: input scenes are interferograms, force FCOMPLEX data type\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "phflg",
                    {
                        "desc": "phase offset correction flag (enter - for default)\n"
                        "0: no phase offset correction for SLC-2 (default)\n"
                        "1: apply constant phase offset correction to SLC-2\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "gainflg",
                    {
                        "desc": "gain correction flag (enter - for default)\n"
                        "0: no gain correction for SLC-2 (default)\n"
                        "1: apply gain correction to SLC-2\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "imode",
                    {
                        "desc": "interpolation mode for SLC-2 (enter - for default)\n"
                        "0: Lanczos interpolation (default)\n"
                        "1: B-spline interpolation\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos interpolator order / B-spline degree 4 -> 9 (enter - for " "default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_cat",
    },
    "SLC_cat_ScanSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_tab1",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC, swaths are listed in "
                        "order from near to far range (earlier time)\n"
                        "SLC_tab line entries:   SLC   SLC_par  TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_tab2",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC, swaths are listed in "
                        "order from near to far range (later time)\n"
                        "SLC_tab line entries:   SLC   SLC_par  TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_tab3",
                    {
                        "desc": "(input) 3 column list of concatenated ScanSAR SLC, swaths are "
                        "listed in order from near to far range\n"
                        "SLC_tab line entries:   SLC   SLC_par  TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "SLC_cat_ScanSAR",
    },
    "SLC_copy": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_in",
                    {
                        "desc": "(input) SLC (FCOMPLEX or SCOMPLEX format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par_in",
                    {
                        "desc": "(input) ISP SLC parameter file for input SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_out",
                    {
                        "desc": "(output) selected SLC section (FCOMPLEX or SCOMPLEX format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par_out",
                    {
                        "desc": "(output) ISP SLC parameter file of output SLC\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "fcase",
                    {
                        "desc": "data format conversion (enter - for default: output format = input "
                        "format)\n"
                        "1: FCOMPLEX --> FCOMPLEX (default sc = 1.0)\n"
                        "2: FCOMPLEX --> SCOMPLEX (default sc = 10000.0)\n"
                        "3: SCOMPLEX --> FCOMPLEX (default sc = 0.0001)\n"
                        "4: SCOMPLEX --> SCOMPLEX (default sc = 1.0)\n",
                        "enum": [1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc",
                    {
                        "desc": "scale factor for input SLC data (enter - for default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "offset to starting range sample (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range samples (enter - for default: to end of line)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {"desc": "offset to starting line (enter - for default: 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to copy (enter - for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "swap",
                    {
                        "desc": "swap data (enter - for default)\n"
                        "0: normal (default)\n"
                        "1: swap real/imaginary part of complex data\n"
                        "2: swap left/right (near/far range)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "header_lines",
                    {
                        "desc": "number of input file header lines (enter - for default: 0)\n"
                        "NOTE: CEOS format SLC data have 1 header line\n"
                        "NOTE: file offset pointer size (bytes): 8\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_copy",
    },
    "SLC_copy_ScanSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1_tab",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC-1 swaths in order from "
                        "near to far range\n"
                        "SLC1_tab line entries:   SLC    SLC_par   TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_tab",
                    {
                        "desc": "(input/output) 3 column list of the burst data copied from the "
                        "ScanSAR swaths listed in SLC1_tab, in order from near to far "
                        "range\n"
                        "SLC2_tab line entries:   SLC    SLC_par   TOPS_par\n"
                        "NOTE: If the SLC2_tab does not yet exist, the SLC2_tab will be "
                        "created with file names derived from the SLC1_tab entries and "
                        "the SLC2_dir\n"
                        "The new file names will have _2 appended to the root file "
                        "names of the entries in SLC1_tab\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "BURST_tab",
                    {
                        "desc": "(input) 2 column list of the first and last burst to copy from "
                        "each swath, one line for each swath\n"
                        "BURST_tab line entries: first_burst  last_burst\n"
                        "NOTES: 1. The first burst is 1, enter - to select last "
                        "physical burst\n"
                        "2. If first_burst <= 0, then blank bursts are generated at the "
                        "start of the output swath\n"
                        "3. If last_burst exceeds the number of bursts, then blank "
                        "bursts are appended to the end of the output swath\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data format for complex data (enter - for default: "
                        "output data has the same format as input data):\n"
                        "0: FCOMPLEX\n"
                        "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "SLC2_dir",
                    {
                        "desc": "directory for ScanSAR burst data copied from SLC-1 data, "
                        "ignored if the SLC2_tab already exists (default: current "
                        "directory)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_copy_ScanSAR",
    },
    "SLC_corners": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC/MLI image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "terra_alt",
                    {
                        "desc": "(input) average terrain altitude (enter - for default: 300.000 " "meters)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "kml",
                    {
                        "desc": "(output) kml output file (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "SLC_corners",
    },
    "SLC_deramp": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) SLC data file (fcomplex or scomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par1",
                    {
                        "desc": "(input) SLC parameter file with Doppler information\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(output) SLC with Doppler phase removed (or added)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par2",
                    {
                        "desc": "(output) SLC parameter file for the output SLC\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "mode of operation:\n"
                        "0: subtract Doppler phase ramp (deramp)\n"
                        "1: add Doppler phase ramp (reramp)\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "dop_ph",
                    {
                        "desc": "(output) Doppler phase (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "SLC_deramp",
    },
    "SLC_deramp_ScanSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1_tab",
                    {
                        "desc": "(input) 3 column list of input ScanSAR SLC, swaths are "
                        "listed in order from near to far range:\n"
                        "SLC_tab line entries:   SLC    SLC_par   TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_tab",
                    {
                        "desc": "(input) 3 column list of output ScanSAR SLC, swaths are "
                        "listed in order from near to far range\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "mode of operation:\n"
                        "0: subtract ScanSAR Doppler phase (deramp)\n"
                        "1: add Doppler phase ramp (reramp)\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "phflg",
                    {
                        "desc": "deramp phase flag (enter - for default)\n"
                        "0: do not save ScanSAR Doppler phase (default)\n"
                        "1: save ScanSAR Doppler phase, output filename is the same "
                        "as the deramped SLC with extension .dph\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "SLC_deramp_ScanSAR",
    },
    "SLC_deskew": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) SLC image file (FCOMPLEX or SCOMPLEX format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(output) SLC image file in new geometry\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(output) SLC-2 ISP image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "mode of operation (enter - for default)\n"
                        "0: change geometry from Doppler centroid to zero-Doppler (deskew, "
                        "default)\n"
                        "1: change geometry from zero-Doppler to Doppler centroid (reskew)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "interp",
                    {
                        "desc": "interpolation method (enter - for default)\n"
                        "0: Lanczos interpolation (default)\n"
                        "1: B-spline interpolation\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos interpolator order / B-spline degree 4 -> 9 (enter - for " "default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "deramp",
                    {
                        "desc": "deramp flag (enter - for default)\n"
                        "0: do not deramp and reramp data\n"
                        "1: deramp data before interpolation and reramp afterwards "
                        "(default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ph_corr",
                    {
                        "desc": "range shift phase correction flag (enter - for default)\n"
                        "0: do not correct phase related to range shift\n"
                        "1: correct phase related to range shift (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "SLC_deskew",
    },
    "SLC_diff_intf": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(input) single-look complex image 2 coregistered to SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) SLC-2R ISP image parameter file for the co-registered " "image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sim_unw",
                    {
                        "desc": "(input) simulated unflattened and unwrapped interferogram, same "
                        "width as output interferogram (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "diff_int",
                    {
                        "desc": "(output) differential interferogram (complex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of range looks for the output interferogram\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number of azimuth looks for the simulated and output " "interferogram\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "sps_flg",
                    {
                        "desc": "range spectral shift flag (enter - for default)\n"
                        "1: apply range spectral shift filter (default)\n"
                        "0: do not apply range spectral shift filter\n",
                        "enum": [1, 0],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "azf_flg",
                    {
                        "desc": "azimuth common band filter flag (enter - for default)\n"
                        "1: apply azimuth common band filter (default)\n"
                        "0: do not apply azimuth common band filter\n",
                        "enum": [1, 0],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "rbw_min",
                    {
                        "desc": "minimum range bandwidth fraction (0.1 --> 1.0) (enter - for " "default:  0.250)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rp1_flg",
                    {
                        "desc": "SLC-1 range phase mode (enter - for default)\n"
                        "0: nearest approach (0-Doppler) phase\n"
                        "1: ref. function center (Doppler centroid) (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "rp2_flg",
                    {
                        "desc": "SLC-2 range phase mode (enter - for default)\n"
                        "0: nearest approach (0-Doppler) phase\n"
                        "1: ref. function center (Doppler centroid) (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "SLC_diff_intf",
    },
    "SLC_freq_shift": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) SLC file (FCOMPLEX or SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_shift",
                    {
                        "desc": "(output) SLC data with shifted radar carrier frequency\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_shift_par",
                    {
                        "desc": "(output) SLC parameter file with shifted radar carrier " "frequency\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("freq_shift", {"desc": "radar carrier frequency shift (Hz)\n", "optional": False, "type": "unknown"}),
            ]
        ),
        "program": "SLC_freq_shift",
    },
    "SLC_interp": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-2",
                    {
                        "desc": "(input) SLC-2 image to be resampled to the geometry of the SLC-1 " "reference image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(output) single-look complex image 2 coregistered to SLC-1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(output) SLC-2R ISP image parameter file for coregistered image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to first valid output line (in SLC-1 lines) (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of valid output lines (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n" "0: Lanczos (default)\n" "1: B-spline\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos interpolator order / B-spline degree 4 -> 9 (enter - for " "default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_interp",
    },
    "SLC_interp_ScanSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC2_tab",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC-2 swaths to be "
                        "resampled into the geometry of SLC-1 listed in order from "
                        "near to far range\n"
                        "SLC2_tab line entries:   SLC    SLC_par   TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC parameter file of ScanSAR SLC-2 mosaic, SLC-2 is "
                        "generated from the ScanSAR swaths listed in SLC2_tab\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_tab",
                    {
                        "desc": "(input) 3 column list of the reference ScanSAR SLC swaths "
                        "listed in order from near to far range\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC parameter file of the reference ScanSAR SLC-1 "
                        "mosaic, SLC-1 is generated from the ScanSAR swaths listed in "
                        "SLC1_tab\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) global ISP offset and interferogram parameter file, "
                        "the offset model is determined from the ScanSAR SLC mosaics\n"
                        "NOTE: The OFF_par specifies the number of range and azimuth "
                        "looks required to determine valid data bounds (burst "
                        "windows)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC2R_tab",
                    {
                        "desc": "(input/output) 3 column list of the resampled ScanSAR SLC2 "
                        "swaths listed in order from near to far range\n"
                        "NOTE: If the SLC2R_tab does not yet exist, the entires will "
                        "be created with file names derived from the filenames in "
                        "SLC2_tab and the SLC2R_dir\n"
                        "The file extensions of the new entries are changed from slc "
                        "to rslc\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(output) mosaic generated from the resampled swaths listed "
                        "in SLC2R_tab, coregistered to the reference mosaic of SLC-1 "
                        "(enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(output) SLC parameter file associated with the mosaic "
                        "created from the resampled swaths SLC-2R (enter - for "
                        "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "complex data interpolation mode (enter - for default)\n"
                        "0: Lanczos (default)\n"
                        "1: B-spline\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos interpolator order / B-spline degree 4 -> 9 (enter - " "for default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC2R_dir",
                    {
                        "desc": "directory for resampled burst SLC2R data, ignored if the "
                        "DIFF_tab already exists (enter - for default: current "
                        "directory)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_interp_ScanSAR",
    },
    "SLC_interp_lt": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC-2",
                    {
                        "desc": "(input) SLC-2 image to be resampled to the geometry of the SLC-1 " "reference image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of the SLC-1 reference\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of SLC-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(input) lookup_table relating SLC-2 to SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI1_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of reference MLI (lookup "
                        "table dimension)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI2_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of MLI2 (lookup table " "values)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file used for "
                        "refinement (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(output) single-look complex image 2 coregistered to SLC-1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(output) SLC-2R ISP image parameter file for coregistered image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "blk_size",
                    {
                        "desc": "number of lines/block (enter - for default, minimum value: 128)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n" "0: Lanczos (default)\n" "1: B-spline\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "SLC_interp_lt",
    },
    "SLC_interp_lt_ScanSAR": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC2_tab",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC-2 swaths to be "
                        "resampled into the geometry of SLC-1 listed in order from "
                        "near to far range\n"
                        "SLC2_tab line entries:   SLC    SLC_par   TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC parameter file of the mosaic of the ScanSAR "
                        "SLC-2 data, SLC-2 is generated from the ScanSAR swaths "
                        "listed in SLC2_tab\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_tab",
                    {
                        "desc": "(input) 3 column list of the reference ScanSAR SLC-1 "
                        "swaths listed in order from near to far range\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC parameter file of the mosaic of the reference "
                        "ScanSAR SLC-1 data, SLC-1 is generated from the ScanSAR "
                        "swaths listed in SLC1_tab\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(input) lookup table relating the mosaic image " "coordinates of MLI-1 to MLI-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI1_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of reference "
                        "MLI-1 (lookup table dimension)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI2_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of MLI12 (lookup " "table values)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset and interferogram parameter file "
                        "determined from the ScanSAR SLC mosaics (enter - for "
                        "none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_tab",
                    {
                        "desc": "(input/output) 3 column list of the resampled ScanSAR "
                        "SLC-2R swaths listed in order from near to far range\n"
                        "NOTES: 1. If the SLC2R_tab does not yet exist, the file "
                        "entries will be created with names derived from the "
                        "SLC2_tab entries and the SLC2R_dir\n"
                        "2. The file extensions of the new entries are rslc, "
                        "rslc.par, and rslc.tops_par\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(output) mosaic generated from the resampled swaths "
                        "listed in SLC2R_tab, coregisted to the reference SLC-1 "
                        "mosaic (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(output) SLC parameter file associated with the mosaic of "
                        "the resampled ScanSAR SLC-2R data (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n" "0: Lanczos (default)\n" "1: B-spline\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos interpolator order / B-spline degree 4 -> 9 " "(enter - for default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC2R_dir",
                    {
                        "desc": "directory for resampled burst SLC2R data, ignored if the "
                        "DIFF_tab already exists (enter - for default: current "
                        "directory)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_interp_lt_ScanSAR",
    },
    "SLC_interp_map": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-2",
                    {
                        "desc": "(input) SLC-2 image to be resampled to the reference SLC-1 " "reference image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(output) single-look complex image 2 coregistered to SLC-1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(output) SLC-2R ISP image parameter file for co-registered " "image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par2",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file used for "
                        "residual offsets map (coffs2_sm)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "coffs_sm",
                    {
                        "desc": "(input) smoothed residual range and azimuth offsets (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to first valid output line (in SLC-1 lines) (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of valid output lines (enter - or 0 for default: to end " "of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n" "0: Lanczos (default)\n" "1: B-spline\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "SLC_interp_map",
    },
    "SLC_intf": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(input) single-look complex image 2 coregistered to SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) SLC-2R ISP image parameter file for the co-registered image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "interf",
                    {
                        "desc": "(output) interferogram from SLC-1 and SLC-2R\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rlks", {"desc": "number of range looks\n", "optional": False, "type": "unknown"}),
                ("azlks", {"desc": "number of azimuth looks\n", "optional": False, "type": "unknown"}),
                (
                    "loff",
                    {
                        "desc": "offset to starting line relative to SLC-1 for interferogram (enter - "
                        "for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of SLC lines to process (enter - for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sps_flg",
                    {
                        "desc": "range spectral shift flag:\n"
                        "1: apply range spectral shift filter (default)\n"
                        "0: do not apply range spectral shift filter\n",
                        "enum": [1, 0],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "azf_flg",
                    {
                        "desc": "azimuth common band filter flag:\n"
                        "1: apply azimuth common-band filter (default)\n"
                        "0: do not apply azimuth common band filter\n",
                        "enum": [1, 0],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "rp1_flg",
                    {
                        "desc": "SLC-1 range phase mode\n"
                        "0: nearest approach (zero-Doppler) phase\n"
                        "1: ref. function center (Doppler centroid) (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "rp2_flg",
                    {
                        "desc": "SLC-2 range phase mode\n"
                        "0: nearest approach (zero-Doppler) phase\n"
                        "1: ref. function center (Doppler centroid) (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "SLC-1s",
                    {
                        "desc": "SLC-1 after range spectral shift and azimuth common-band filtering "
                        "(FCOMPLEX format)  (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC-2Rs",
                    {
                        "desc": "SLC-2R after range spectral shift and azimuth common-band filtering "
                        "(FCOMPLEX format) (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC-1s_par",
                    {
                        "desc": "SLC-1s ISP image parameter file (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC-2Rs_par",
                    {
                        "desc": "SLC-2Rs ISP image parameter file (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_beta",
                    {
                        "desc": "azimuth common-band filter Kaiser window parameter (default: 2.120)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_intf",
    },
    "SLC_intf2": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(input) single-look complex image 2 coregistered to SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) SLC-2R image parameter file for the co-registered image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-1",
                    {
                        "desc": "(output) multi-look intensity image derived from SLC-1 (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2R",
                    {
                        "desc": "(output) multi-look intensity image derived from SLC-2R (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI1_par",
                    {
                        "desc": "(output) MLI image parameter file derived from SLC1_par (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI2R_par",
                    {
                        "desc": "(output) MLI image parameter file derived from SLC2R_par (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "interf",
                    {
                        "desc": "(output) complex interferogram from SLC-1 and SLC-2R  (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cc",
                    {
                        "desc": "(output) interferometric correlation magnitude of SLC-1 and SLC-2R "
                        "(enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("r_dec", {"desc": "range decimation factor (int)\n", "optional": False, "type": "unknown"}),
                ("az_dec", {"desc": "azimuth decimation factor (int)\n", "optional": False, "type": "unknown"}),
                (
                    "rwin",
                    {
                        "desc": "averaging window width (int) (enter - for default: r_dec)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "averaging window height (int) (enter - for default: az_dec)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wflg",
                    {
                        "desc": "window weighting function (enter - for default):\n"
                        "0: rectangular (default)\n"
                        "1: Kaiser\n"
                        "2: circular Gaussian \n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "oversampling factor 1 -> 2 (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sim_phase",
                    {
                        "desc": "(input) simulated interferometric phase, coregistered MLI-1 (FLOAT, "
                        "enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: 7)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "beta",
                    {
                        "desc": "Gaussian or Kaiser window parameter (enter - for default: 2.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_intf2",
    },
    "SLC_intf_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) single-look complex geocoded image 1 (FCOMPLEX format, " "reference scene)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) single-look complex geocoded image 2 coregistered to SLC-1 "
                        "(FCOMPLEX format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file describing the input geocoded and "
                        "coregistered SLC images\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "interf",
                    {
                        "desc": "(output) multi-look interferogram from SLC-1 and SLC-2\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par2",
                    {
                        "desc": "(output) DEM parameter file for the output interferogram and MLI " "files\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "e_lks",
                    {
                        "desc": "number of easting looks (longitude, cross-track)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "n_lks",
                    {
                        "desc": "number of northing looks (latitude, along-track)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "MLI-1",
                    {
                        "desc": "(output) multi-look intensity image from SLC-1 (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2",
                    {
                        "desc": "(output) multi-look intensity image from SLC-2 (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "SLC_intf_geo",
    },
    "SLC_intf_geo2": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) geocoded single-look complex image (SCOMPLEX or " "FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) geocoded single-look complex image 2, coregistered to "
                        "SLC-1 (same format as SLC-1)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) SLC DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "interf",
                    {
                        "desc": "(output) multi-look interferogram from SLC-1 and SLC-2 (enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-1",
                    {
                        "desc": "(output) multi-look intensity image from SLC-1 (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2",
                    {
                        "desc": "(output) multi-look intensity image from SLC-2 (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CC",
                    {
                        "desc": "(output) interferometric correlation magnitude of SLC-1 and "
                        "SLC-2R (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par2",
                    {
                        "desc": "(output) DEM parameter file for the output interferogram, "
                        "correlation, and MLI files\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("e_dec", {"desc": "easting decimation factor (int)\n", "optional": False, "type": "unknown"}),
                ("n_dec", {"desc": "northing decimation factor (int)\n", "optional": False, "type": "unknown"}),
                (
                    "e_win",
                    {
                        "desc": "easting averaging window width (int) (enter - for default: " "e_dec)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "n_win",
                    {
                        "desc": "northing averaging window height (int)(enter - for default: " "n_dec)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wflg",
                    {
                        "desc": "window weighting function (enter - for default):\n"
                        "0: rectangular (default)\n"
                        "1: Kaiser\n"
                        "2: circular Gaussian\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "oversampling factor 1 -> 2 (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sim_phase",
                    {
                        "desc": "(input) geocoded simulated interferometric phase, coregistered to "
                        "SLC-1 (FLOAT, enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: 7)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "beta",
                    {
                        "desc": "Gaussian or Kaiser window parameter (enter - for default: 2.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "SLC_intf_geo2",
    },
    "SLC_mosaic_ScanSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_tab",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC, swaths are listed in "
                        "order from near to far range\n"
                        "SLC_tab line entries:   SLC   SLC_par   TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC mosaic image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) SLC mosaic image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of range looks used to determine burst window " "boundaries for the mosaic\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number of azimuth looks used to determine burst window " "boundaries for the mosaic\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "bflg",
                    {
                        "desc": "burst window calculation flag:\n"
                        "0: use existing burst window parameters if they exist, "
                        "otherwise calculate burst window parameters (default)\n"
                        "1: calculate burst window parameters from burst parameters "
                        "and the number of range and azimuth looks\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "SLCR_tab",
                    {
                        "desc": "(input) 3 column list of the reference scene, swaths are "
                        "listed in order from near to far range, enter - for none\n"
                        "SLCR_tab line entries:   SLC   SLC_par   TOPS_par\n"
                        "NOTE: When generating a mosaic of a resampled SLC, the "
                        "SLC_tab of the reference scene is required\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "SLC_mosaic_ScanSAR",
    },
    "SLC_ovr": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) SLC image  (FCOMPLEX or SCOMPLEX format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_ovr",
                    {
                        "desc": "(output) oversampled SLC image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_ovr_par",
                    {
                        "desc": "(output) oversampled SLC image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "r_ovr",
                    {
                        "desc": "range oversampling factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_ovr",
                    {
                        "desc": "azimuth oversampling factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n"
                        "0: Lanczos interpolation (default)\n"
                        "1: B-spline interpolation\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos interpolator order / B-spline degree 4 -> 9 (enter - for " "default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "deramp",
                    {
                        "desc": "deramp flag (enter - for default)\n"
                        "0: do not deramp and reramp data\n"
                        "1: deramp data before interpolation and reramp afterwards (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "SLC_ovr",
    },
    "SLC_phase_shift": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) SLC data file (fcomplex or scomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par1",
                    {
                        "desc": "(input) SLC parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(output) SLC with phase shift\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par2",
                    {
                        "desc": "(output) SLC parameter file for the output SLC\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ph_shift",
                    {"desc": "phase shift to add to SLC phase (radians)\n", "optional": False, "type": "unknown"},
                ),
            ]
        ),
        "program": "SLC_phase_shift",
    },
    "SR_to_GRD": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "MLI_par",
                    {
                        "desc": "(input) MLI image parameter file of the slant-range image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP OFF_par of the input image (enter - when the image "
                        "geometry specified by the MLI_par)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(input/output) image parameter file of output ground range image\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "in_file",
                    {
                        "desc": "(input) slant range image (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "out_file",
                    {
                        "desc": "(output) ground range image (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "multi-looking in range (prior to resampling, enter - for default: " "1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "multi-looking in azimuth (prior to resampling, enter - for default: " "1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n"
                        "0: nearest-neighbor\n"
                        "1: bicubic spline\n"
                        "2: bicubic spline log(x)\n"
                        "3: bicubic spline sqrt(x)\n"
                        "4: B-spline interpolation (default B-spline degree: 3)\n"
                        "5: B-spline interpolation sqrt(x) (default) (default B-spline degree: "
                        "3)\n"
                        "NOTE: log and sqrt interpolation modes should only be used with "
                        "non-negative data!\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "grd_rsp",
                    {
                        "desc": "output image ground range sample spacing (m) (enter - for default: "
                        "(input image azimuth spacing) * azlks)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "grd_azsp",
                    {
                        "desc": "output image azimuth sample spacing (m) (default = (input image "
                        "azimuth spacing) * azlks)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "degree",
                    {"desc": "B-spline degree (2->9) (enter - for default: 3)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "SR_to_GRD",
    },
    "ScanSAR_burst_MLI": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_tab",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC, swaths are listed in "
                        "order from near to far range\n"
                        "SLC_tab line entries:   SLC   SLC_par  TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_tab",
                    {
                        "desc": "(output) 3 column list of MLI swaths listed in order from "
                        "near to far range\n"
                        "MLI_tab line entries:   MLI   MLI_par  TOPS_par\n"
                        "NOTE: if the MLI_tab does not yet exist, the file entries "
                        "will be created with names derived from the SLC_tab entries\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rlks", {"desc": "number of range looks  (1...80)\n", "optional": False, "type": "unknown"}),
                ("azlks", {"desc": "number of azimuth look (1...20)\n", "optional": False, "type": "unknown"}),
                (
                    "bflg",
                    {
                        "desc": "burst window calculation flag (enter - for default):\n"
                        "0: use existing burst window parameters if they exist, "
                        "otherwise calculate burst window parameters (default)\n"
                        "1: calculate burst window parameters from burst parameters "
                        "and the number of range and azimuth looks\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "SLCR_tab",
                    {
                        "desc": "(input) 3 column list of the reference scene with swaths, "
                        "listed in order from near to far range, enter - for none\n"
                        "SLCR_tab line entries:   SLC    SLC_par   TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "MLI_dir",
                    {
                        "desc": "directory for output burst MLI data, ignored if the MLI_tab "
                        "already exists (default: current directory)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "scale factor for output MLI (enter - for default: calculate "
                        "from calibration gain in SLC parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ScanSAR_burst_MLI",
    },
    "ScanSAR_burst_copy": {
        "module": "ISP",
        "params": OrderedDict(
            [
                ("SLC", {"desc": "(input) ScanSAR mode burst SLC\n", "optional": False, "type": "unknown"}),
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC parameter file for the ScanSAR burst scene\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "TOPS_par",
                    {
                        "desc": "(input) burst parameter file for the ScanSAR burst SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_out",
                    {
                        "desc": "(output) SLC file containing a single burst\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_out_par",
                    {
                        "desc": "(output) SLC parameter file for the single burst\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "burst_num",
                    {
                        "desc": "burst number of selected burst (1 -> number of bursts in the " "SLC)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "drflg",
                    {
                        "desc": "deramp phase flag (enter - for default)\n"
                        "0: no modification of the burst SLC phase (default)\n"
                        "1: subtract TOPS mode Doppler phase ramp for Sentinel-1 "
                        "(deramp)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "SLC_par2",
                    {
                        "desc": "(output) SLC parameter file for the single burst SLC with "
                        "deramped phase (drflg: 1, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data type (enter - for default: same as input data):\n"
                        "0: FCOMPLEX\n"
                        "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ScanSAR_burst_copy",
    },
    "ScanSAR_burst_corners": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC parameter file for the ScanSAR burst data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "TOPS_par",
                    {
                        "desc": "(input) ScanSAR burst parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "KML",
                    {
                        "desc": "(output) KML output file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ScanSAR_burst_corners",
    },
    "ScanSAR_burst_diff_intf": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC1_tab",
                    {
                        "desc": "(input) 3 column list of the reference ScanSAR SLC "
                        "swaths listed in order from near to far range\n"
                        "SLC1_tab line entries:  SLC  SLC_par  TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_tab",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC swaths listed in "
                        "order from near to far range, coregistered with SLC1\n"
                        "SLC2R_tab line entries:  SLC  SLC_par  TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SIM_tab",
                    {
                        "desc": "(input) 3 column list of simulated multilook "
                        "interferometric phase in burst format listed in order "
                        "from near to far range\n"
                        "SIM_tab line entries:  SIM_UNW   MLI_par  TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_tab",
                    {
                        "desc": "(input/output) 3 column list of the DIFF swaths listed "
                        "in order from near to far range\n"
                        "DIFF_tab line entries:  DIFF  MLI_par  TOPS_par\n"
                        "NOTES: 1. If the DIFF_tab does not yet exist, the file "
                        "entries will be created with names derived from the "
                        "SLC1_tab and SLC2R_tab entries\n"
                        "2. The DIFF data are FCOMPLEX format as documented in "
                        "the MLI_par (Multi-Look Interferogram), and also in the "
                        "TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLCR_tab",
                    {
                        "desc": "(input) 3 column list of the scene used for "
                        "coregistration of SLC1 and SLC2 with the swaths, listed "
                        "in order from near to far range (enter - for none)\n"
                        "SLCR_tab line entries:  SLC  SLC_par  TOPS_par\n"
                        "NOTE: This is is only necessary if SLC1 is not the "
                        "scene used for the coregistration of SLC2R with SLC1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_dir",
                    {
                        "desc": "directory for output burst differential interferogram "
                        "data, ignored if the DIFF_tab already exists (default: "
                        "current directory)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ScanSAR_burst_diff_intf",
    },
    "ScanSAR_burst_overlap": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_tab",
                    {
                        "desc": "(input) 3 column list of SLC, SLC_par, Sentinel-1 "
                        "TOPS_par sorted in the order IW1, IW2, IW3...\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "root_name",
                    {
                        "desc": "(output) output data root name (example: " "yyyymmdd_pp_overlap)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of range looks used to determine burst window " "boundaries\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number of azimuth looks used to determine burst window " "boundaries\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "output mode (enter - for default)\n"
                        "0: output data are mosaics, non-overlapping parts are set "
                        "to 0 (default)\n"
                        "1: output data are mosaics, non-overlapping parts are "
                        "written\n"
                        "2: output data are burst data containing only overlapping "
                        "parts\n"
                        "3: output data is a polygon file with polygons "
                        "encompassing overlapping areas in the SLC mosaic\n"
                        "4: output data is a polygon file with polygons "
                        "encompassing overlapping areas in the MLI mosaic\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "bflg",
                    {
                        "desc": "burst window calculation flag (enter - for default)\n"
                        "0: use existing burst window parameters if they exist, "
                        "otherwise calculate burst window parameters (default)\n"
                        "1: recalculate burst window parameters from burst "
                        "parameters and the number of range and azimuth looks\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "SLCR_tab",
                    {
                        "desc": "(input) SLC_tab of the reference scene, 3 column list of "
                        "SLC, SLC_par, TOPS_par sorted sorted in the order IW1, "
                        "IW2, IW3\n"
                        "NOTE: When generating a mosaic of a resampled SLC, the "
                        "SLC_tab of the reference scene is required\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dburst",
                    {
                        "desc": "delta burst number (1=overlap of subsequent bursts, enter " "- for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bound",
                    {
                        "desc": "boundary pixels in polygon (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ScanSAR_burst_overlap",
    },
    "ScanSAR_burst_to_mosaic": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "DATA_tab",
                    {
                        "desc": "(input) 3 column list of swaths in ML_DATA burst "
                        "geometry listed in the order from near to far range\n"
                        "DATA_tab line entries:   DATA   MLI_par  TOPS_par\n"
                        "NOTE: The data type (FLOAT or FCOMPLEX) is specified in "
                        "the MLI_par and the burst parameters (TOPS_par) must "
                        "agree\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mosaic",
                    {
                        "desc": "(output) mosaic image from bursts in multi-look " "geometry\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) mosaic image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mflg",
                    {
                        "desc": "mosaicking option flag (enter - for default)\n"
                        "0: no overlap between bursts or image swaths (default)\n"
                        "1: average data in the overlap between bursts and in "
                        "the overlap between image swaths\n"
                        "2: average data in the overlap between bursts but not "
                        "in the overlap between image swaths\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "(input) reference scene DATA_tab, 3 column list of "
                        "DATA, MLI_par, TOPS_par listed in order from near to "
                        "far range (enter - for none)\n"
                        "NOTE: When generating a mosaic produced using data from "
                        "a resampled scene, the MLI_tab of the reference scene "
                        "is required\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "data_tab_ref",
                    {
                        "desc": "minimum number of overlapping bursts (using mflg = 1 or "
                        "2, enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min_ovr",
                    {
                        "desc": "maximum number of overlapping bursts (using mflg = 1 or "
                        "2, enter - for default: unlimited)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ScanSAR_burst_to_mosaic",
    },
    "ScanSAR_full_aperture_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1_tab",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC swaths listed in "
                        "order from near to far range\n"
                        "SLC1_tab line entries:   SLC   SLC_par  TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_tab",
                    {
                        "desc": "(input/output) 3 column list of oversampled "
                        "continuous SLC swaths listed in order from near to "
                        "far range\n"
                        "SLC2_tab line entries:   SLC   SLC_par\n"
                        "NOTE: if the SLC2_tab does not yet exist, the file "
                        "entries will be created with names derived from the "
                        "SLC1_tab entries\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLCR_tab",
                    {
                        "desc": "(input) 3 column list of the reference scene with "
                        "swaths, listed in order from near to far range (enter "
                        "- for none)\n"
                        "SLCR_tab line entries:   SLC    SLC_par   TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "SLCR_dir",
                    {
                        "desc": "directory for output oversampled continuous SLC, "
                        "ignored if the SLC2_tab already exists (enter . for "
                        "the current directory)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "vmode",
                    {
                        "desc": "sample validity mode (enter - for default):\n"
                        "0: all data in the burst are considered valid "
                        "(default)\n"
                        "1: interpolate samples between the valid data bounds "
                        "of the burst\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "wflg",
                    {
                        "desc": "burst window calculation flag (enter - for default):\n"
                        "0: use existing burst window parameters if they "
                        "exist, otherwise calculate burst window parameters "
                        "(default)\n"
                        "1: calculate burst window parameters from burst "
                        "parameters and the number of range and azimuth "
                        "looks\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "imode",
                    {
                        "desc": "interpolation mode (enter - for default):\n" "0: Lanczos (default)\n" "1: B-spline\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos interpolator order / B-spline degree 4 -> 9 " "(enter - for default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor, must be in the range 2 --> "
                        "32 (enter - for default: automatically calculated)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ScanSAR_full_aperture_SLC",
    },
    "ScanSAR_mosaic_to_burst": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "DATA",
                    {
                        "desc": "(input) data in mosaic geometry (FLOAT or FCOMPLEX data " "type)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {"desc": "image parameter file in mosaic geometry\n", "optional": False, "type": "unknown"},
                ),
                (
                    "DATA_tab",
                    {
                        "desc": "3 column list of the output data in burst geometry, "
                        "swaths are in order from near to far range\n"
                        "MLI_tab line entries:  DATA   MLI_par  TOPS_par\n"
                        "NOTE: 1.The burst MLI_par and TOPS_par files describing "
                        "the output geometry must already exist\n"
                        "2.The data type (FLOAT or FCOMPLEX) specified in the "
                        "MLI_par and the burst parameters (TOPS_par) must "
                        "agree\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ScanSAR_mosaic_to_burst",
    },
    "WSS_interp": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC_1 reference image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC-2 image to be resampled to the geometry "
                        "of the SLC-1 reference image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC-1 image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC-2 image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO offset parameter file with offset model\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(output) ASAR Wide-Swath SLC-2R coregistered to SLC-1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(output) ASAR Wide-Swath SLC-2R image parameter file for " "coregistered image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "WSS_interp",
    },
    "WSS_interp_lt": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC_1 reference image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC-2 image to be resampled to the "
                        "geometry of the WSS SLC-1 reference image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC-1 image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC-2 image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(input) lookup_table relating MLI-2 to MLI-1 created from SLC-2 " "and SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI1_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of reference MLI-1 "
                        "(lookup table dimension)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI2_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of MLI-2 (lookup table " "values)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par1",
                    {
                        "desc": "(input) DIFF/GEO offset parameter file used for lookup table "
                        "refinement MLI-1, MLI-2R (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(output) ASAR Wide-Swath SLC-2 resampled and co-registered to " "SLC-1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(output) ASAR Wide-Swath image parameter file for the "
                        "co-registered resampled image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par2",
                    {
                        "desc": "(output) DIFF/GEO offset parameter file for MLI-1, MLI-2 (enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "WSS_interp_lt",
    },
    "WSS_intf": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) reference ASAR Wide-Swath SLC image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2R",
                    {
                        "desc": "(input) resampled ASAR Wide-Swath SLC image coregistered to SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) co-registered ASAR Wide-Swath SLC-2R image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(output) ISP offset/interferogram parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "interf",
                    {
                        "desc": "(output) interferogram from SLC-1 and SLC-2R\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {"desc": "number of range looks (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "sps_flg",
                    {
                        "desc": "range spectral shift flag:\n"
                        "1: apply range spectral shift filter (default)\n"
                        "0: do not apply range spectral shift filter\n",
                        "enum": [1, 0],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "azf_flg",
                    {
                        "desc": "azimuth common band filter flag:\n"
                        "1: apply azimuth common band filter (default)\n"
                        "0: do not apply azimuth common band filter\n",
                        "enum": [1, 0],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "m_flg",
                    {
                        "desc": "output magnitude flag:\n"
                        "0: set output interferogram magnitude to 1.0 for non-zero samples "
                        "(default)\n"
                        "1: retain multi-burst interferometric magnitude\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "boff",
                    {"desc": "offset to first burst to interfere (default = 0)\n", "optional": True, "type": "unknown"},
                ),
                ("bstep", {"desc": "burst step (default = 1)\n", "optional": True, "type": "unknown"}),
                (
                    "bmax",
                    {
                        "desc": "last burst to interfere (default = to end of SLC-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "WSS_intf",
    },
    "WSS_mosaic": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "WSS_tab",
                    {
                        "desc": "(input) two column list of MLI data files and MLI image parameter "
                        "files for each sub-swath (including paths)\n"
                        "required file order: SS1, SS2, SS3, SS4, SS5\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) ISP image parameter file for the mosaicked WSS MLI image or "
                        "interferogram\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "WSS_data",
                    {
                        "desc": "(output) WSS mosaicked MLI image or interferogram\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "type",
                    {
                        "desc": "WSS data type:\n0: FLOAT\n1: FCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "WSS_mosaic",
    },
    "adapt_filt": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "int",
                    {
                        "desc": "(input) complex interferogram image filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sm",
                    {
                        "desc": "(output) smoothed interferogram filename\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                ("low_SNR_thr", {"desc": "low SNR threshold (default = .25);\n", "optional": True, "type": "unknown"}),
                (
                    "filt_width",
                    {"desc": "filter width in pixels (default = 1.0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "xmin",
                    {"desc": "offset to starting range pixel(default = 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "xmax",
                    {"desc": "offset last range pixel (default = width-1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ymin",
                    {"desc": "offset to starting azimuth row (default = 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ymax",
                    {"desc": "offset to last azimuth row (default = nlines-1)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "adapt_filt",
    },
    "adf": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "interf",
                    {
                        "desc": "(input) interferogram (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sm",
                    {
                        "desc": "(output) filtered interferogram (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cc",
                    {
                        "desc": "(output) filtered interferogram correlation coefficient (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "alpha",
                    {
                        "desc": "exponent for non-linear filtering (enter - for default: 0.40)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nfft",
                    {
                        "desc": "filtering FFT window size, 2**N, 8 --> 512, (enter - for default: 32)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cc_win",
                    {
                        "desc": "correlation parameter estimation window size odd, max: 15 (enter - for "
                        "default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "step",
                    {"desc": "processing step (enter - for default: nfft/8)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "loff",
                    {
                        "desc": "offset to starting line to process (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wfrac",
                    {
                        "desc": "minimum fraction of points required to be non-zero in the filter window "
                        "(enter - for default: 0.200)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "adf",
    },
    "adf2": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "interf",
                    {
                        "desc": "(input) complex interferogram (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cc_interf",
                    {
                        "desc": "(input) correlation coefficient of the input interferogram (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "sm",
                    {
                        "desc": "(output) filtered interferogram (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cc_filt",
                    {
                        "desc": "(output) filtered interferogram correlation coefficient (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "alpha_max",
                    {
                        "desc": "maximum value for the adaptive filter exponent (enter - for default: " "0.50)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nfft",
                    {
                        "desc": "filter window FFT size, 2**N, 8->512, (enter - for default: 32)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cc_win",
                    {
                        "desc": "filtered interferogram correlation estimation window size odd, max: 21 "
                        "(enter - for default: 9)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "step",
                    {
                        "desc": "processing step in range and azimuth (enter - for default: nfft/8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to starting line to process (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wfrac",
                    {
                        "desc": "minimum fraction of points required to be non-zero in the filter window "
                        "(enter - for default: 0.200)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "adf2",
    },
    "af": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(input) single-look complex image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {"desc": "range window size (enter - for default: 1024)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "azwin",
                    {"desc": "azimuth window size (enter - for default: 4096)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "dr",
                    {
                        "desc": "range sample increment (enter - for default: 1024,  enter 0 for single " "patch)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "daz",
                    {
                        "desc": "azimuth line increment (enter - for default: 8192,  enter 0 for single " "patch)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "offset estimation SNR threshold (enter - for default:   10.000)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "update_flg",
                    {
                        "desc": "update effective velocity flag (enter - for default: 1)\n"
                        "0: no update of effective velocity in PROC_par file\n"
                        "1: update effective velocity in PROC_par (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "a1_flg",
                    {
                        "desc": "fit a1 for first derivative of the effective velocity w.r.t.range\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "b0_flg",
                    {
                        "desc": "fit b0 for first derivative of the effective velocity w.r.t. along-track "
                        "time\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and SNR data in text format, enter - for "
                        "no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dac_flg",
                    {
                        "desc": "Doppler ambiguity correction flag\n"
                        "0: Doppler centroid remains unchanged: exit if Doppler ambiguity error "
                        "detected\n"
                        "1: Doppler centroid ambiguity corrected (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor (1,2,4: enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("roff", {"desc": "range offset for single patch center\n", "optional": True, "type": "unknown"}),
                ("azoff", {"desc": "azimuth offset for single patch center\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "af",
    },
    "af_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(input) single-look complex image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {"desc": "range window size (enter - for default: 1024)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "azwin",
                    {"desc": "azimuth window size (enter - for default: 4096)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "dr",
                    {
                        "desc": "range sample increment (enter - for default: 1024,  enter 0 for single " "patch)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "daz",
                    {
                        "desc": "azimuth line increment (enter - for default: 8192,  enter 0 for single " "patch)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "offset estimation SNR threshold (enter - for default: 10.000)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "a1_flg",
                    {
                        "desc": "fit a1 for first derivative of the effective velocity w.r.t.range\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "b0_flg",
                    {
                        "desc": "fit b0 for first derivative of the effective velocity w.r.t. along-track "
                        "time\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and SNR data in text format, enter - "
                        "for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor (1,2,4: enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("roff", {"desc": "range offset for single patch center\n", "optional": True, "type": "unknown"}),
                ("azoff", {"desc": "azimuth offset for single patch center\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "af_SLC",
    },
    "ascii2float": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input text format data file with , or whitespace between " "columns\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {
                        "desc": "number of data values (columns) in each line of text\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset lines to start of data (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("nl", {"desc": "number of lines (enter - for default: all) \n", "optional": True, "type": "unknown"}),
                (
                    "coff",
                    {
                        "desc": "offset columns to begin reading data values (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nv",
                    {
                        "desc": "number of values to read (enter - for default: to end of line)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ascii2float",
    },
    "atm_mod": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "diff_unw",
                    {
                        "desc": "(input) unwrapped differential interferogram including atmospheric "
                        "phase signal (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(input) height coregistered to the interferogram (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {"desc": "(input) differential interferogram parameters\n", "optional": False, "type": "unknown"},
                ),
                (
                    "atm_phase",
                    {
                        "desc": "(output) estimated atmospheric phase (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dr",
                    {"desc": "range sample increment (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "daz",
                    {
                        "desc": "azimuth sample increment (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mask",
                    {
                        "desc": "(input) 8-bit raster image (SUN raster, BMP, or TIFF) (enter - for "
                        "default: none)\n"
                        "NOTE: regions with (R,G,B)=0 in the mask are excluded\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "model",
                    {
                        "desc": "atmospheric phase model:\n"
                        "0: height (default)\n"
                        "1: slant range pixel number (GPRI mode)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                ("roff", {"desc": "reference point range sample offset\n", "optional": True, "type": "unknown"}),
                ("loff", {"desc": "reference point line offset\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "atm_mod",
    },
    "atm_mod2": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "diff_unw",
                    {
                        "desc": "(input) unwrapped differential interferogram including atmospheric "
                        "phase signal (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(input) height coregistered to the interferogram in Range-Doppler "
                        "Coordinates (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(input) MLI image parameter file with same dimensions as the " "interferogram\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "atm_phase",
                    {
                        "desc": "(output) estimated atmospheric phase (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dr",
                    {"desc": "range sample increment (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "daz",
                    {
                        "desc": "azimuth sample increment (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mask",
                    {
                        "desc": "(input) 8-bit raster image (SUN raster, BMP, or TIFF), (enter - for "
                        "default: none)\n"
                        "NOTE: regions with (R,G,B)=0 in the mask are excluded\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "model",
                    {
                        "desc": "atmospheric phase model (enter - for default)\n"
                        "0: height (default)\n"
                        "1: slant range (GPRI)\n"
                        "2: height and cosine(inc_ang) for wide swath data, e.g. Sentinel-1\n"
                        "3: slant range and height (GPRI)\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "reference point range sample offset (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {"desc": "reference point line offset (enter - for none)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "atm_mod2",
    },
    "atm_mod_2d": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "diff_unw",
                    {
                        "desc": "(input) list of unwrapped phase interferograms including the "
                        "atmospheric phase (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(input) height coregistered to the interferogram (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cc",
                    {
                        "desc": "(input) correlation coefficient (enter - for none) (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input/output) DIFF/GEO parameter file\n"
                        "NOTE: contains patch coordinates and dimensions used to used to "
                        "estimate the local atmosphere phase model\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mask",
                    {
                        "desc": "(input) 8-bit raster image (SUN raster, BMP, or TIFF format)\n"
                        "regions with (R,G,B)=0 in the mask are excluded (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "model",
                    {
                        "desc": "atmospheric phase model (enter - for default):\n"
                        "0: linear:      atm_phase = a0 + a1*h\n"
                        "1: power-law:   atm_phase = a0 + a1*(h0 - h)**alpha\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "a0",
                    {
                        "desc": "(output) constant model parameter file (enter - for none) (FLOAT)\n"
                        "NOTE: if a0 is set to -, then a0 is not included in the phase "
                        "model\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "a1",
                    {
                        "desc": "(output) slope model parameter file (enter - for none) (FLOAT)\n"
                        "NOTE: if a1 is set to -, then a1 is not included in the phase "
                        "model\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sigma",
                    {
                        "desc": "(output) standard deviation of the atmospheric phase model (enter - "
                        "for none) (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sigma_h",
                    {
                        "desc": "(output) standard deviation of the DEM height (enter - for none) " "(FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "s1",
                    {
                        "desc": "(output) a1 quality measure sigma/(a1*sigma_h) (enter - for none) " "(FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range (across) patch size samples (enter - for default: 512)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth (down) patch size lines (enter - for default: 512)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstep",
                    {"desc": "range (across) step (enter - for default: 64)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "azstep",
                    {"desc": "azimuth (down) step (enter - for default: 64)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "h0",
                    {
                        "desc": "power-law model scale reference height (enter - for default: 7000.0 " "m)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "alpha",
                    {
                        "desc": "power-law model exponent (enter - for default: 1.350)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cc_min",
                    {
                        "desc": "minimum correlation coefficient threshold to use a point: (enter - "
                        "for default: 0.150)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mfrac",
                    {
                        "desc": "minimum fraction of points in a patch required to evaluate "
                        "coefficients: (enter - for default: 0.200\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xref",
                    {
                        "desc": "reference point range (across) samples (enter - for default: " "none))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yref",
                    {
                        "desc": "reference point azimuth (down) lines (enter - for default: none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sflg",
                    {
                        "desc": "linear regression solver flag:\n"
                        "0: use Gauss-Jorden to solve linear regression (default)\n"
                        "1: use SVD to solve linear regression\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "svd_tol",
                    {
                        "desc": "SVD tolerance threshold, singular values w[i] < svd_tol * max(w[]) "
                        "are set to 0.0, (enter - for default: 1.0e-12)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "w0",
                    {
                        "desc": "2D array of the singular value w[0] for each patch (FLOAT), (enter - "
                        "for default: none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "w1",
                    {
                        "desc": "2D array of the singular value w[1] for each patch (FLOAT), (enter - "
                        "for default: none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "atm_mod_2d",
    },
    "atm_sim_2d": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DIFF_par",
                    {
                        "desc": "(input/output) DIFF/GEO parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(input) height coregistered to the interferogram (enter - for none) " "(FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "a0",
                    {
                        "desc": "(input) constant phase model parameter file (enter - for none) " "(FLOAT)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "a1",
                    {
                        "desc": "(input) slope phase model parameter file (enter - for none) " "(FLOAT)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "atm_phase",
                    {
                        "desc": "(output) simulated atmospheric phase (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mask",
                    {
                        "desc": "(input) 8-bit raster image (SUN raster, BMP, or TIFF format)\n"
                        "regions with (R,G,B)=0 in the mask are set to 0.0 in the output "
                        "phase (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "atm_sim_2d",
    },
    "autof": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rc_data",
                    {
                        "desc": "(input) range compressed data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "autofocus",
                    {
                        "desc": "(output) autofocus correlation function file (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SNR_min",
                    {
                        "desc": "minimum autofocus SNR to accept velocity estimate (default=5.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "prefilter",
                    {
                        "desc": "prefilter decimation factor (default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "auto_az",
                    {
                        "desc": "autofocus azimuth correlation patch size (2**N, default = 2048)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_offset",
                    {
                        "desc": "offset in prefiltered lines from start of file (default=0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "auto_bins",
                    {
                        "desc": "number of range bins to use for autofocus (2**N, default=1024)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dop_ambig",
                    {
                        "desc": "Doppler ambiguity correction flag\n"
                        "0: Doppler centroid remains unchanged\n"
                        "1: Doppler centroid ambiguity corrected (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "autof",
    },
    "ave2pwr": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("pwr1", {"desc": "(input) intensity image 1 (float)\n", "optional": False, "type": "unknown"}),
                ("pwr2", {"desc": "(input) intensity image 2 (float)\n", "optional": False, "type": "unknown"}),
                (
                    "pwr_out",
                    {
                        "desc": "(output) output file: (pwr1 + scale_factor*pwr2)/2. \n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {"desc": "number of samples/row for the input files\n", "optional": False, "type": "unknown"},
                ),
                (
                    "scale_factor",
                    {
                        "desc": "scale factor for image 2 (absolute value, not dB) (default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ave2pwr",
    },
    "ave_cpx": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "cpx_list",
                    {
                        "desc": "(input) list of coregistered images (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "cpx_ave",
                    {
                        "desc": "(output) average of images listed in cpx_list (FCOMPLEX)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("start", {"desc": "starting line (enter - for default: 1)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - for default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflag",
                    {
                        "desc": "zero flag (enter - for default)\n"
                        "0: interpret 0.0 as missing data value (default)\n"
                        "1: interpret 0.0 as valid data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ave_cpx",
    },
    "ave_image": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "im_list",
                    {
                        "desc": "(input) list of coregistered images (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "ave_image",
                    {
                        "desc": "(output) average of images listed in im_list (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("start", {"desc": "starting line (enter - for default: 1)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - for default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixav_x",
                    {
                        "desc": "number of pixels to average in width  (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixav_y",
                    {
                        "desc": "number of pixels to average in height (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflag",
                    {
                        "desc": "zero flag (enter - for default)\n"
                        "0: interpret 0.0 as missing data value (default)\n"
                        "1: interpret 0.0 as valid data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "nmin",
                    {
                        "desc": "minimum number of images required to calculate the average if zflag = "
                        "0 (enter - for default: 3/4*nfiles)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ave_image",
    },
    "average_filter": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "din",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dout",
                    {
                        "desc": "(output) output averaged data file (filtered)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                ("bx", {"desc": "filter window width (columns): 1,3,5,7...\n", "optional": False, "type": "unknown"}),
                (
                    "by",
                    {
                        "desc": "filter window height (rows): 1,3,5,7.., (enter - for default: " "bx)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wflg",
                    {
                        "desc": "weighting function (enter - for default)\n"
                        "0: constant weighting function (default)\n"
                        "1: linear weighting function\n"
                        "2: Gaussian weighting function\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "min_pt",
                    {
                        "desc": "minimum number of points required in the filter window to "
                        "evaluate the average value (enter - for default: (bx*by)/4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflg",
                    {
                        "desc": "zero value flag (enter - for default)\n"
                        "0: data values that are equal to 0.0 (no data) are not changed "
                        "(default)\n"
                        "1: data gaps are filled with average values if sufficient valid "
                        "data points in the filter window\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "average_filter",
    },
    "az_integrate": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) input data (example: SBI dtrapped phase) (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "width",
                    {
                        "desc": "(input) number of range samples/line \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "azi",
                    {
                        "desc": "(output) input data integrated along azimuth (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cflg",
                    {
                        "desc": "integration constant flag:\n"
                        "0: set azimuth integral value to 0.0 at specified line\n"
                        "1: set average of the azimuth integral to 0.0\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "scale factor to apply to the data (enter - for default, default: " "1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lz",
                    {
                        "desc": "line offset where the azimuth integral is set to 0.0 (cflg = 0, "
                        "enter - for default, default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "az_integrate",
    },
    "az_proc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rc_data",
                    {
                        "desc": "(input) input range compressed data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) single look complex image file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "az_patch",
                    {
                        "desc": "along-track azimuth patch size (range lines): (N*1024)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_format",
                    {
                        "desc": "SLC output format (enter - for default, from PROC_par):\n"
                        "0: FCOMPLEX, pairs of 4-byte float values\n"
                        "1: SCOMPLEX, pairs of 2-byte short integers\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "cal_fact",
                    {
                        "desc": "processor radiometric calibration factor (dB), (enter - for default, "
                        "from PROC_par)\n"
                        "NOTE: absolute calibration factors (dB) are listed in "
                        "sensor_cal_MSP.dat\n"
                        "add 60.0 dB to the value from sensor_cal_MSP.dat if SLC_format is "
                        "SCOMPLEX\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_type",
                    {
                        "desc": "output SLC data type:\n"
                        "0: sigma0 = (SQR(re) + SQR(im) (default)\n"
                        "1: gamma0 = (SQR(re) + SQR(im)/cos(inc)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "kaiser",
                    {
                        "desc": "Kaiser window parameter for azimuth reference function weighting (enter "
                        "- for default: 2.120)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "npatch",
                    {
                        "desc": "number of along-track patches to process (default: sufficient for " "entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "az_proc",
    },
    "az_spec_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) SAR image data file (fcomplex or scomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "spectrum",
                    {
                        "desc": "(output) Doppler spectrum (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "range sample offset to center of estimation window (enter - for "
                        "default=center_swath)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "namb",
                    {
                        "desc": "number of multiples of the PRF to add to the estimated centroid " "(default=0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "azimuth spectrum plotting flag:\n"
                        "0: none (default)\n"
                        "1: output plot in PNG format\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "az_spec_SLC",
    },
    "azsp_IQ": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) input raw I/Q format SAR data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "spectrum",
                    {
                        "desc": "(output) azimuth spectrum (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset to start of estimation window (default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "range samples offset to center of estimation window (enter - for "
                        "default: center_swath)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nsub",
                    {
                        "desc": "number of azimuth subapertures for spectrum estimation (enter - for " "default: 24)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ambig_flg",
                    {
                        "desc": "Doppler ambiguity resolution mode\n"
                        "0 = add multiples of PRF specified by the namb command line parameter\n"
                        "1 = use unambiguous Doppler centroid estimate from the PROC_par file "
                        "(default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "namb",
                    {
                        "desc": "number of multiples of the PRF to add to the ambiguous Doppler estimate "
                        "(enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "azimuth spectrum plotting flag:\n"
                        "0: none (default)\n"
                        "1: output plot in PNG format\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "azsp_IQ",
    },
    "azsp_SLC": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_data",
                    {
                        "desc": "(input) input SLC or range compressed data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("spectrum", {"desc": "output azimuth spectrum\n", "optional": False, "type": "unknown"}),
                (
                    "loff",
                    {
                        "desc": "number of lines offset to start of estimation window (enter - for " "default:0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "range samples offset to center of estimation window (enter - for "
                        "default: center_swath)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nsub",
                    {"desc": "number of sub-apertures to sum (default: 8)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "data_format",
                    {
                        "desc": "input data format flag (enter - for default: from MSP processing "
                        "parameter file)\n"
                        "0: FCOMPLEX (pairs of 4-byte float)\n"
                        "1: SCOMPLEX (pairs of 2-byte short integer)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "azimuth spectrum plotting flag:\n"
                        "0: none (default)\n"
                        "1: output plot in PNG format\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "azsp_SLC",
    },
    "base_add": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "base_1",
                    {
                        "desc": "(input) input baseline file 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "base_2",
                    {
                        "desc": "(input) input baseline file 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "base_out",
                    {
                        "desc": "(output) output baseline file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "add/subtract mode (default=1: add, -1: subtract (base_1-base_2))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "base_add",
    },
    "base_copy": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1_par",
                    {
                        "desc": "(input) ISP image parameter file of the reference SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "baseline-1",
                    {
                        "desc": "(input) baseline file derived using the reference SLC geometry\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) ISP image parameter file corresponding to the subsecton of "
                        "the reference SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "baseline-2",
                    {
                        "desc": "(output) baseline file derived using the geometry and timing of the "
                        "SLC subsection\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "time_rev",
                    {
                        "desc": "SLC image normal=1,  time-reversed = -1 (default=1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "base_copy",
    },
    "base_est_fft": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "interf",
                    {
                        "desc": "(input) multilook interferogram with residual range and azimuth " "fringes\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "baseline",
                    {
                        "desc": "(output) baseline file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nazfft",
                    {"desc": "size of azimuth FFT (2**N) (default: 512)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "r_samp",
                    {
                        "desc": "range pixel offset to center of the FFT window (enter - for " "default: center)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_line",
                    {
                        "desc": "line offset from start of the interf. for the  FFT window (enter - "
                        "for default: center)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nrfft",
                    {
                        "desc": "size of the range FFT (2**N), minimum: 32 (enter - for default: " "512)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "base_est_fft",
    },
    "base_init": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "interf",
                    {
                        "desc": "(input) unflattened interferogram (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "base",
                    {
                        "desc": "(output) baseline parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mflag",
                    {
                        "desc": "baseline estimation method flag (enter - for default)\n"
                        "mflag    b_para    b_perp    input\n"
                        "0:     orbits    orbits    p1,p2  (default)\n"
                        "1:     offsets   offsets   p1,p2,off\n"
                        "2:     orbits    fft       p1,p2,off,int\n"
                        "3:     offsets   fft       p1,p2,off,int\n"
                        "4:     fft       fft       p1,off,int   \n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "nrfft",
                    {
                        "desc": "size of range FFT   (512, 1024,...) (enter - for default determined "
                        "from image width)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nazfft",
                    {
                        "desc": "size of azimuth FFT (512, 1024,...) (enter - for default determined "
                        "from image azimuth lines)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "r_samp",
                    {
                        "desc": "range pixel offset to center of the FFT window (enter - for default, "
                        "default: range center)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_line",
                    {
                        "desc": "line offset from start of the interf. for the  FFT window (enter - "
                        "for default, default: azimuth center)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "base_init",
    },
    "base_ls": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP parameter file of the reference SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP interferogram/offset parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "gcp_ph",
                    {
                        "desc": "(input) ground control point heights + extracted unwrapped phase (text " "format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "baseline",
                    {
                        "desc": "(input) baseline parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ph_flag",
                    {
                        "desc": "restore range phase ramp (default=0: do not restore  1: restore)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bc_flag",
                    {
                        "desc": "cross-track baseline component estimate (0:orbit derived  1:estimate "
                        "from data, default=1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bn_flag",
                    {
                        "desc": "normal baseline component estimate      (0:orbit derived  1:estimate "
                        "from data, default=1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bcdot_flag",
                    {
                        "desc": "cross-track baseline rate estimate      (0:orbit derived  1:estimate "
                        "from data, default=1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bndot_flag",
                    {
                        "desc": "normal baseline rate estimate           (0:orbit derived  1:estimate "
                        "from data, default=0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bperp_min",
                    {
                        "desc": "minimum perpendicular baseline required for L.S estimation (m, " "default=  10.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) parameter file of resampled SLC, required if SLC-2 frequency "
                        "differs from SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "base_ls",
    },
    "base_orbit": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "baseline",
                    {
                        "desc": "(output) baseline file (text format, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "base_orbit",
    },
    "base_perp": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "baseline",
                    {
                        "desc": "(input) baseline file (text)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) ISP parameter file of SLC-1 (reference SLC)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP interferogram/offset parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "time_rev",
                    {
                        "desc": "SLC image normal=1 (default), image time-reversed = -1\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "base_perp",
    },
    "bm3d": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width of input data\n", "optional": False, "type": "unknown"}),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file (same type as input)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input and output data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX (profiles 2 and 6 only) \n"
                        "2: SUN/BMP/TIFF 8 or 24-bit raster image\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "profile",
                    {
                        "desc": "profile types (enter - for default)\n"
                        "0: SAR-BM3D (fast), filtering on data (default)\n"
                        "1: SAR-BM3D (fine), filtering on data\n"
                        "2: BM3D, direct filtering on data (default for FCOMPLEX)\n"
                        "3: BM3D, filtering on sqrt(data)\n"
                        "4: BM3D, filtering on log(data)\n"
                        "5: C-BM3D, filtering color images (SUN/BMP/TIFF raster images only)\n"
                        "6: InSAR-BM3D, filtering on wrapped interferogram (FCOMPLEX only)\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "looks",
                    {
                        "desc": "equivalent number of looks (necessary for SAR-BM3D and InSAR-BM3D, enter - "
                        "for default: 10)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sigma",
                    {
                        "desc": "estimated noise parameter (enter - or 0 for default: automatic "
                        "estimation)\n"
                        "NOTE: for InSAR-BM3D, sigma is a factor multiplying the estimated standard "
                        "deviation\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("block_size", {"desc": "block size (enter - for default: 8)\n", "optional": True, "type": "unknown"}),
                (
                    "s_dist",
                    {
                        "desc": "maximum search distance (enter - for default: 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "step",
                    {
                        "desc": "step between reference blocks (enter - for default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "d_max",
                    {
                        "desc": "maximum pixel value distance in block matching (not available for SAR-BM3D "
                        "and INSAR-BM3D, enter - for default)\n"
                        "0: estimated from data (default)\n"
                        "1: infinite\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "t1d",
                    {
                        "desc": "type of transform in the third dimension (enter - for default)\n"
                        "0: Haar (default)\n"
                        "1: DCT\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "bm3d",
    },
    "bpf": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input image data  file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) bandpass filtered image data\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "fc_x",
                    {
                        "desc": "normalized x-coord. (across) filter center frequency (range: -0.5 --> " "0.5)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_x",
                    {
                        "desc": "normalized x-coord. bandwidth (range: 0 --> 1.0)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "fc_y",
                    {
                        "desc": "normalized y-coord. (down) filter center frequency (range: -0.5 --> 0.5)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_y",
                    {
                        "desc": "normalized y-coord. bandwidth (range: 0 --> 1.0)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "offset to starting range to filter (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azoff",
                    {
                        "desc": "offset to starting azimuth to filter (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range pixels to filter  (enter - for default: width - roff)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "naz",
                    {
                        "desc": "number of azimuth lines to filter (enter - for default: nlines - azoff)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default):\n"
                        "0: FCOMPLEX (default)\n"
                        "1: SCOMPLEX\n"
                        "2: FLOAT\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "zflag",
                    {
                        "desc": "zero data flag (enter - for default):\n"
                        "0: set output to 0.0 when the input data are 0.0 (no_data)(default)\n"
                        "1: 0.0 values are considered as valid data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "beta",
                    {
                        "desc": "Kaiser window beta parameter (enter - for default:    4.538)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "fir_len",
                    {
                        "desc": "finite impulse response filter length (default - : 64)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "bpf",
    },
    "bridge": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "int",
                    {
                        "desc": "(input) interferogram (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "flag",
                    {
                        "desc": "(input) unwrapping flag file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "unw",
                    {
                        "desc": "(input/output) unwrapped phase (float) \n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "bridge",
                    {
                        "desc": "(input) bridge data file (text format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "xmin",
                    {
                        "desc": "starting range pixel offset to unwrap (default = 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xmax",
                    {
                        "desc": "last range pixel offset to unwrap (default=width-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ymin",
                    {
                        "desc": "starting azimuth row offset to unwrap, relative to start (default = 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ymax",
                    {
                        "desc": "last azimuth row offset to unwrap, relative to start (default = " "nlines-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "bridge",
    },
    "cat_raw": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "RAW_list",
                    {
                        "desc": "(input) 3 column list of raw data and MSP sensor and processing "
                        "parameter files:\n"
                        "1. SAR raw data file\n"
                        "2. MSP SAR sensor parameter file\n"
                        "3. MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_par",
                    {
                        "desc": "(output) MSP sensor parameter file for concatenated raw data set\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(output) MSP processing parameter file for concatenated raw data set\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "RAW_out",
                    {
                        "desc": "(output) output concatenated raw data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "fill",
                    {
                        "desc": "fill gaps between raw data files flag:\n0: no\n1: yes (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset from start of file (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to output (enter - for default: to end of data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "cat_raw",
    },
    "cc_ad": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "interf",
                    {
                        "desc": "(input) complex interferogram\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr1",
                    {
                        "desc": "(input) intensity image of first scene (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr2",
                    {
                        "desc": "(input) intensity image of second scene (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "slope",
                    {
                        "desc": "(input) phase slope data (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "texture",
                    {
                        "desc": "(input) backscatter texture data (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cc_ad",
                    {
                        "desc": "(output) adaptive coherence estimate\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "box_min",
                    {
                        "desc": "smallest correlation average box size (enter - for default: 3.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "box_max",
                    {
                        "desc": "largest correlation average box size  (enter - for default: 9.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wgt_flag",
                    {
                        "desc": "weighting function (enter - for default)\n" "0: constant (default)\n" "1: gaussian\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset in lines to starting line (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to process (enter - for default: 0, to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "cc_ad",
    },
    "cc_monitoring": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("nfiles", {"desc": "number of input data files\n", "optional": False, "type": "unknown"}),
                ("f1", {"desc": "(input) 1. input data file (float)\n", "optional": False, "type": "unknown"}),
                ("f2", {"desc": "(input) 2. input data file (float)\n", "optional": False, "type": "unknown"}),
                (
                    "ras_out",
                    {
                        "desc": "(output) output 8-bit image file (SUN: *.ras, BMP: *.bmp, TIFF: " "*.tif)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "cc_monitoring",
    },
    "cc_wave": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "interf",
                    {
                        "desc": "(input) normalized complex interferogram (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-1",
                    {
                        "desc": "(input) multilook intensity image of the first scene (FLOAT) (enter - " "for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2",
                    {
                        "desc": "(input) multilook intensity image of the second scene (FLOAT) (enter - " "for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cc",
                    {
                        "desc": "(output) correlation coefficient (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "bx",
                    {
                        "desc": "estimation window size in columns (enter - for default: 5.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "by",
                    {
                        "desc": "estimation window size in lines (enter - for default: 5.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wflg",
                    {
                        "desc": "estimation window (enter - for default):\n"
                        "0: rectangular (default)\n"
                        "1: triangular\n"
                        "2: Gaussian\n"
                        "3: normalized vector sum with rectangular window\n"
                        "NOTE: This estimator does not use the MLI data, even when specified\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xmin",
                    {
                        "desc": "starting range pixel offset (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xmax",
                    {
                        "desc": "last range pixel offset (enter - for default: width - 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ymin",
                    {
                        "desc": "starting azimuth row offset, relative to start (enter -  for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ymax",
                    {
                        "desc": "last azimuth row offset, relative to start (enter - for default: nlines " "- 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "cc_wave",
    },
    "clear_flag": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "flag",
                    {
                        "desc": "(input)phase unwrapping flag filename \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "flag_bits",
                    {"desc": "byte with value of flag(s) to be cleared: \n", "optional": False, "type": "unknown"},
                ),
                (
                    "xmin",
                    {"desc": "= 3\tGuides = 4\tLow SNR = 8\tVisited = 16\n", "optional": False, "type": "unknown"},
                ),
                ("xmax", {"desc": "PT. = 32\tCuts   = 64\tLawn    = 128\n", "optional": False, "type": "unknown"}),
                (
                    "ymin",
                    {
                        "desc": "starting azimuth row offset, relative to start (default = 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ymax",
                    {"desc": "last range pixel offset (default = width-1)\n", "optional": False, "type": "unknown"},
                ),
            ]
        ),
        "program": "clear_flag",
    },
    "comb_interfs": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                ("int-1", {"desc": "complex interferogram 1\n", "optional": False, "type": "unknown"}),
                ("int-2", {"desc": "complex interferogram 2\n", "optional": False, "type": "unknown"}),
                ("base-1", {"desc": "baseline file 1\n", "optional": False, "type": "unknown"}),
                ("base-2", {"desc": "baseline file 2\n", "optional": False, "type": "unknown"}),
                ("factor-1", {"desc": "phase scaling factor 1\n", "optional": False, "type": "unknown"}),
                ("factor-2", {"desc": "phase scaling factor 2\n", "optional": False, "type": "unknown"}),
                ("width", {"desc": "width of interferograms (samples)\n", "optional": False, "type": "unknown"}),
                ("combi_out", {"desc": "output combined interferogram\n", "optional": False, "type": "unknown"}),
                (
                    "combi_base",
                    {"desc": "output combined interferogram baseline file\n", "optional": False, "type": "unknown"},
                ),
                ("sm", {"desc": "magnitude scale factor (default=1.0)\n", "optional": True, "type": "unknown"}),
                (
                    "Only",
                    {
                        "desc": "the use of integer phase scaling factors (positive and negative) "
                        "seems reasonable\n"
                        "for the scaling and summing of wrapped phase images\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "comb_interfs",
    },
    "coord_to_sarpix": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC/MLI image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file, enter - for "
                        "SLC or MLI data\n"
                        "NOTE: it should not be necessary to enter this parameter file. "
                        "The SLC/MLI parameter file should describe \n"
                        "the scene dimensions including the number of range and azimuth "
                        "looks\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file defining geometry of input "
                        "coordinates (enter - for none)\n"
                        "NOTE: when no DEM parameter file is provided, then the input "
                        "coordinates are interpreted as latitude and longitude in the "
                        "WGS84 datum\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "north/lat",
                    {"desc": "(input) northing (m) or latitude (deg.)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "east/lon",
                    {"desc": "(input) easting (m) or longitude (deg.)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "hgt",
                    {
                        "desc": "(input) height (m) of the point in the map datum\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file containing refinement "
                        "polynomial coefficients (default: none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "coord_to_sarpix",
    },
    "coord_to_sarpix_list": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC/MLI parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file, enter - " "for SLC or MLI data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file defining the map projection, "
                        "datum, and coverage (enter - for none)\n"
                        "NOTE: if there is no DEM_par, then the coordinate data are "
                        "interpreted as latitude and longitude in the WG84 datum\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MAP_coord",
                    {
                        "desc": "(input) list of map coordinates and heights with 3 "
                        "columns:\n"
                        "north/lat/S   east/lon/C    height (m) in the map datum\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_coord",
                    {
                        "desc": "(output) list of pixel and line coordinates in the "
                        "geometry defined by the SLC_par:\n"
                        "azimuth_line  range_pixel   height (m) in the map datum\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file containing refinement "
                        "polynomial coefficients (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "coord_to_sarpix_list",
    },
    "coord_trans_list": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "c_in_list",
                    {
                        "desc": "(input) list of map coordinates and heights with 3 columns:\n"
                        "northing/latitude  easting/longitude  height\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "c_out_list",
                    {
                        "desc": "(output) list of map coordinates and heights with 3 columns:\n"
                        "northing/latitude  easting/longitude  height\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM1_par",
                    {
                        "desc": "(input) DIFF/GEO DEM parameter file with definition of input " "coordinate system\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM2_par",
                    {
                        "desc": "(input) DIFF/GEO DEM parameter file with definition of output " "coordinate system\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "geoid1",
                    {
                        "desc": "(input) geoid or constant geoid height value of input "
                        "coordinate system (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "geoid1_par",
                    {
                        "desc": "(input) geoid DEM_par file of input coordinate system (enter - " "for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "geoid1_type",
                    {
                        "desc": "geoid1 type (enter - for default)\n"
                        "0: global geoid in EQA coordinates (default)\n"
                        "1: local geoid in the same coordinate system as the input "
                        "coordinates (DEM1_par)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "geoid2",
                    {
                        "desc": "(input) geoid or constant geoid height value of output "
                        "coordinate system (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "geoid2_par",
                    {
                        "desc": "(input) geoid DEM_par file of output coordinate system (enter " "- for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "geoid2_type",
                    {
                        "desc": "geoid2 type (enter - for default)\n"
                        "0: global geoid in EQA coordinates (default)\n"
                        "1: local geoid in the same coordinate system as the output "
                        "coordinates (DEM2_par)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "c_xyz_list",
                    {
                        "desc": "(output) list of global (WGS84) Cartesian coordinates with 3 "
                        "columns:\n"
                        "X  Y  Z (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "coord_trans_list",
    },
    "corr_flag": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "corr",
                    {
                        "desc": "(input)interferometric correlation file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "flag",
                    {
                        "desc": "(input/output) phase unwrapping flag filename \n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                ("corr_thr", {"desc": "correlation threshold (0 --> 1.0)\n", "optional": False, "type": "unknown"}),
                ("xmin", {"desc": "starting range pixel offset (default = 0)\n", "optional": True, "type": "unknown"}),
                (
                    "xmax",
                    {"desc": "last range pixel offset (default = width-1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ymin",
                    {
                        "desc": "starting azimuth row offset, relative to start (default = 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ymax",
                    {
                        "desc": "last azimuth row offset, relative to start (default = nlines-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "border",
                    {
                        "desc": "effective range of low coherence pixels to set low coherence flag " "(default=2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "corr_flag",
    },
    "cp_data": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("lbytes", {"desc": "number of bytes per row of input file\n", "optional": False, "type": "unknown"}),
                ("start", {"desc": "starting line (enter - for default: 1)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines to copy (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offset",
                    {
                        "desc": "offset in bytes from the start of the file to skip (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "file_ldr",
                    {
                        "desc": "size of file leader (bytes) to copy after a skipping [offset] (enter - "
                        "for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offb",
                    {
                        "desc": "offset in bytes for each line to start copy (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nbyte",
                    {
                        "desc": "number of bytes to copy from each line (enter - for default: (lbytes - " "offb))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "cp_data",
    },
    "cpd": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "din",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dout",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {
                        "desc": "number of data values/line in the input data file\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type:\n"
                        "0: FLOAT (4 bytes/value)\n"
                        "1: FCOMPLEX (4 bytes real, 4 bytes imaginary)\n"
                        "2: SCOMPLEX (2 bytes real, 2 bytes imaginary)\n",
                        "enum": [0, 1, 2],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "offset to starting sample (samples) (enter - for default: 0)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nx",
                    {
                        "desc": "number of output samples/line (enter - for default: to end of line)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "offset to starting line (lines) (enter - for default: 0)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "ny",
                    {
                        "desc": "number of output lines (enter - for default: to end of file)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "cpd",
    },
    "cpx_math": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "d1",
                    {
                        "desc": "(input) data file 1 (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "d2",
                    {
                        "desc": "(input) data file 2 (FCOMPLEX) (enter - for none)\n"
                        "NOTE: if no input file is provided, d2 values are given by the c_re "
                        "and c_im parameters\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "d_out",
                    {
                        "desc": "(output) output of math operation on d1 and d2 (FCOMPLEX)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "mode",
                    {
                        "desc": "math operation to perform on data:\n"
                        "0:  addition, d1 + d2\n"
                        "1:  subtraction, d1 - d2\n"
                        "2:  multiplication, d1 * d2\n"
                        "3:  division, d1/d2\n"
                        "4:  conjugate, conj(d1)\n"
                        "5:  conjugate multiplication, d1*conj(d2)\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "range pixel offset to center of the reference region (enter - for "
                        "default: no reference correction)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "line offset to center of the reference region (enter - for default: no "
                        "reference correction)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range pixels to average in the reference region (enter - for "
                        "default: 13)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines average in the reference region (enter - for default: " "13)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "c_re",
                    {
                        "desc": "constant real value (enter - for default: 1.18e-38 for addition and "
                        "subtraction, 1.0 for multiplication and division)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "c_im",
                    {
                        "desc": "constant imaginary value (enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflg",
                    {
                        "desc": "zero data flag (enter - for default: 0)\n"
                        "0: values of 0.0 in d1 or d2 are considered as no-data and the output "
                        "is set to 0.0 (default)\n"
                        "1: values of 0.0 are considered as valid data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "rflg",
                    {
                        "desc": "reference region normalization flag (enter - for default: 0)\n"
                        "av1: average of d1 reference region\n"
                        "av2: average of d2 reference region\n"
                        "rflg = 0:\n"
                        "addition        (d1 - av1) + (d2 - av2)\n"
                        "subtraction     (d1 - av1) - (d2 - av2)\n"
                        "multiplication  (d1/av1) * (d2/av2)\n"
                        "conjugat mult.  (d1/av1) * conj(d2/av2)\n"
                        "division        (d1/av1) / (d2/av2)\n"
                        "rflg = 1:\n"
                        "addition        d1/exp(j*arg(av1)) + d2/exp(j*arg(av2))\n"
                        "subtraction     d1/exp(j*arg(av1)) - d2/exp(j*arg(av2))\n"
                        "multiplication  d1/exp(j*arg(av1)) * d2/exp(j*arg(av2))\n"
                        "conjugate mult. d1/exp(j*arg(av1)) * conj(d2/exp(j*arg(av2)))\n"
                        "division        d1/exp(j*arg(av1)) / d2/exp(j*arg(av2))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "cpx_math",
    },
    "cpx_to_real": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "cpx",
                    {
                        "desc": "(input) complex-valued data (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "real",
                    {
                        "desc": "(output) real-valued data (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "samples per line of input data\n", "optional": False, "type": "unknown"}),
                (
                    "mode",
                    {
                        "desc": "math operation to perform on data:\n"
                        "0: real part\n"
                        "1: imaginary part\n"
                        "2: intensity (re*re + im*im)\n"
                        "3: magnitude (sqrt(re*re + im*im))\n"
                        "4: phase (atan2(im, re))\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": False,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "cpx_to_real",
    },
    "cpxlks": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "CMPLX",
                    {
                        "desc": "(input) fcomplex image file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ML_CMPLX",
                    {
                        "desc": "(output) output multilook fcomplex image file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width of complex image\n", "optional": False, "type": "unknown"}),
                ("rlks", {"desc": "number of range looks (default=1)\n", "optional": True, "type": "unknown"}),
                ("azlks", {"desc": "number azimuth looks (default=1)\n", "optional": True, "type": "unknown"}),
                ("start", {"desc": "starting line (default=1)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines (default=entire file, 0 for entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("r_start", {"desc": "starting range (default=1)\n", "optional": True, "type": "unknown"}),
                (
                    "nsamp",
                    {
                        "desc": "number of range samples to extract (default = to end of line)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "cpxlks",
    },
    "create_array": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "output",
                    {
                        "desc": "(output) binary file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width of output file\n", "optional": False, "type": "unknown"}),
                ("nlines", {"desc": "number of lines of output file\n", "optional": False, "type": "unknown"}),
                (
                    "dtype",
                    {
                        "desc": "output data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: DOUBLE\n"
                        "2: INT\n"
                        "3: SHORT\n"
                        "4: SCOMPLEX\n"
                        "5: FCOMPLEX\n"
                        "6: UNSIGNED CHAR\n"
                        "7: SUN/BMP/TIFF 8-bit grayscale raster image\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "val",
                    {
                        "desc": "constant value filling the array (real part for complex data) "
                        "(enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "val_im",
                    {
                        "desc": "imaginary part of the constant value filling a complex array "
                        "(enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "create_array",
    },
    "create_dem_par": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input/output) DIFF/GEO DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC or MLI image parameter file automatic "
                        "calculation of DEM bounds (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "terra_alt",
                    {
                        "desc": "nominal terrain altitude used to calculate bounds of the radar "
                        "image (enter - for default: 0.0 m)\n"
                        "ignored when no SLC_par is provided\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "delta_y",
                    {
                        "desc": "DEM y line spacing for new DEM_par file (enter - for default)\n"
                        "geographical coordinates (EQA projection latitude) default: "
                        "-2.777778e-04 deg.\n"
                        "all other map projections default: -25.0000 m.\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "delta_x",
                    {
                        "desc": "DEM x sample spacing for new DEM_par file (enter - for default)\n"
                        "geographical coordinates (EQA projection longitude) default: "
                        "2.777778e-04 deg.\n"
                        "all other map projections default: 25.0000 m.\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "EPSG",
                    {
                        "desc": "EPSG number of the geographical coordinate system or map "
                        "projection (enter - for none)\n"
                        "EPSG numbers can be retrieved from the http://epsg.io database. "
                        "EPSG number for WGS84 lat/lon: 4326\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "iflg",
                    {
                        "desc": "interactive mode flag (enter - for default)\n"
                        "0: non-interactive (requires an existing <DEM_par> or an [EPSG] "
                        "number)\n"
                        "1: interactive (default)\n"
                        "2: non-interactive, grid-aligned (pixel center) (requires an "
                        "[SLC_par], and an existing <DEM_par> or an [EPSG] number)\n"
                        "3: non-interactive, grid-aligned (pixel edge) (requires an "
                        "[SLC_par], and an existing <DEM_par> or an [EPSG] number)\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "create_dem_par",
    },
    "create_diff_par": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "PAR-1",
                    {
                        "desc": "(input) image parameter file 1 (see PAR_type option)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PAR-2",
                    {
                        "desc": "(input) image parameter file 2 (or - if not provided)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input/output) DIFF/GEO parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PAR_type",
                    {
                        "desc": "PAR-1 and PAR-2 parameter file type (enter - for default):\n"
                        "0: OFF_par     ISP offset and interferogram parameters  "
                        "(default)\n"
                        "1: SLC/MLI_par ISP SLC/MLI parameters\n"
                        "2: DEM_par     DIFF/GEO DEM parameters\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "iflg",
                    {
                        "desc": "interactive mode flag (enter -  for default)\n"
                        "0: non-interactive\n"
                        "1: interactive (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "create_diff_par",
    },
    "create_offset": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1/MLI-1 ISP image parameter filename (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2/MLI-2 ISP image parameter filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input/output) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "algorithm",
                    {
                        "desc": "offset estimation algorithm\n"
                        "1: intensity cross-correlation (default)\n"
                        "2: fringe visibility\n",
                        "enum": [1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of interferogram range looks (enter -  for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number of interferogram azimuth looks (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "iflg",
                    {
                        "desc": "interactive mode flag (enter -  for default)\n"
                        "0: non-interactive\n"
                        "1: interactive (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "create_offset",
    },
    "create_proc_par": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input/output) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "create_proc_par",
    },
    "create_sar_par": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input/output) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                )
            ]
        ),
        "program": "create_sar_par",
    },
    "data2geotiff": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DIFF/GEO DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data",
                    {
                        "desc": "(input) data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "type",
                    {
                        "desc": "data type:\n"
                        "0: RASTER 8 or 24 bit uncompressed raster image, SUN (*.ras), "
                        "BMP:(*.bmp), or TIFF: (*.tif)\n"
                        "1: SHORT integer (2 bytes/value)\n"
                        "2: FLOAT (4 bytes/value)\n"
                        "3: SCOMPLEX (short complex, 4 bytes/value)\n"
                        "4: FCOMPLEX (float complex, 8 bytes/value)\n"
                        "5: BYTE\n"
                        "6: UNSIGNED SHORT integer (2 bytes/value)\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "GeoTIFF",
                    {
                        "desc": "(output) GeoTIFF file (.tif is the recommended extension)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "no_data",
                    {"desc": "no_data value (enter -  for default: 0.0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "COGflg",
                    {
                        "desc": "generate Cloud Optimized GeoTIFF (COG):\n"
                        "0: no COG tiling of output GeoTIFF (default)\n"
                        "1: generate tiled COG GeoTIFF\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "data2geotiff",
    },
    "data2tiff": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "input data file width\n", "optional": False, "type": "unknown"}),
                (
                    "type",
                    {
                        "desc": "input data type:\n"
                        "0: RASTER, 8 or 24 bit uncompressed raster image, SUN (*.ras), "
                        "BMP:(*.bmp), TIFF (*.tif)\n"
                        "1: SHORT integer\n"
                        "2: FLOAT (4 bytes/value)\n"
                        "3: SCOMPLEX (short complex)\n"
                        "4: FCOMPLEX (float complex)\n"
                        "5: BYTE\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "TIFF",
                    {
                        "desc": "(output) TIFF file (.tif extension)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("nodata", {"desc": "nodata value (default=0.0)\n", "optional": True, "type": "unknown"}),
                ("xspacing", {"desc": "(ignored if omitted)\n", "optional": True, "type": "unknown"}),
                ("yspacing", {"desc": "(ignored if omitted, default=xspacing)\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "data2tiff",
    },
    "data2xyz": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data",
                    {
                        "desc": "(input) float format data with same dimensions as given in the " "DEM_par\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "data_xyz",
                    {
                        "desc": "(output) triplets (northing, easting, data_value) in 8-byte "
                        "double-precision or text format \n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dflg",
                    {
                        "desc": "output format:\n"
                        "0: little-endian double precision (default)\n"
                        "1: text, comma separated values (csv)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "data2xyz",
    },
    "dcomp_sirc": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) SIR-C single-pol SLC compressed data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) complex floating point data\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "samples",
                    {
                        "desc": "number of polarimetric samples per input line (4 bytes/sample)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("loff", {"desc": "offset to starting line (default: 0)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines to copy(default: entire file, 0 = entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dcomp_sirc",
    },
    "dcomp_sirc_quad": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) SIR-C SLC or MLC quad-pol compressed data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) complex floating point data\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "samples",
                    {
                        "desc": "number of polarimetric samples per input line (10 " "bytes/sample)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "parameter",
                    {
                        "desc": "polarimetric parameter to extract from SLC or MLC product:\n"
                        "0:  SLC total power\n"
                        "1:  SLC-HH\n"
                        "2:  SLC-HV\n"
                        "3:  SLC-VH\n"
                        "4:  SLC-VV\n"
                        "5:  MLC total power\n"
                        "6:  MLC-HVHV*\n"
                        "7:  MLC-VVVV*\n"
                        "8:  MLC-HHHH*\n"
                        "9:  MLC-HHHV*\n"
                        "10: MLC-HHVV*\n"
                        "11: MLC-HVVV*\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                ("loff", {"desc": "offset to starting line (default: 0)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines to copy(default: entire file, 0 = entire " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dcomp_sirc_quad",
    },
    "dem_RDC_list": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par1",
                    {
                        "desc": "(input) DEM parameter file describing region covered by the "
                        "geocoding lookup table\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "gc_map",
                    {
                        "desc": "(input) geocoding lookup table containing RDC coordinates defined " "by DEM_par1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(input) ISP image parameter file of MLI image associated with the "
                        "geocoding lookup table\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mask",
                    {
                        "desc": "(input) mask file in 8-bit raster mask to exclude regions in the "
                        "map geometry (enter - for none)\n"
                        "NOTE: pixels with (R,G,B)=0 are excluded from the clist_RDC and "
                        "clist_MAP\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "clist_RDC",
                    {
                        "desc": "(output) list of x,y pixel coordinates in the reference SLC image "
                        "geometry (Range-Doppler Coordinates) (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "clist_MAP",
                    {
                        "desc": "(output) list of x,y pixel coordinates in the map projection "
                        "geometry (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par2",
                    {
                        "desc": "(output) DEM parameter file associated with clist_MAP\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "s_north",
                    {
                        "desc": "DEM latitude, S, or northing subsampling factor for patch "
                        "locations (integer >= 1) (nominal: 10)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "s_east",
                    {
                        "desc": "DEM longitude, C, or easting subsampling factor (integer >= 1) " "(nominal: 10)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dem_RDC_list",
    },
    "dem_coord": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "east",
                    {
                        "desc": "(output) easting coordinate map, meters or longitude degrees (enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "north",
                    {
                        "desc": "(output) northing coordinate map, meters or latitude degrees (enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type:\n0: FLOAT (default)\n1: DOUBLE\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dem_coord",
    },
    "dem_gradient": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file (or constant height value)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "theta",
                    {
                        "desc": "(output) elevation angle of DEM normal or gradient vector " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "phi",
                    {
                        "desc": "(output) orientation angle of DEM normal or gradient vector " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mag",
                    {
                        "desc": "(output) magnitude of the gradient vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "type",
                    {
                        "desc": "vector type selection (enter - for default)\n"
                        "0: normal vector\n"
                        "1: gradient vector (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sharpness",
                    {
                        "desc": "gradient sharpness (scale from 0 to 9, enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dem_gradient",
    },
    "dem_import": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "input_DEM",
                    {
                        "desc": "(input) input DEM in original file format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(output) DEM in binary format (float, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input/output) DEM parameter file corresponding to output DEM\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "input_type",
                    {
                        "desc": "input DEM type: (enter - for default)\n"
                        "0: GeoTIFF or any other GDAL supported raster format (default)\n"
                        "1: xyz triplets\n"
                        "2: ascii grid (ESRI)\n"
                        "3: UZH RSL (a pair of *.dem and *.dem.hdr files, only write the "
                        "*.dem file in the command line)\n"
                        "4: Gamma binary file (to be used for converting the DEM height from "
                        "a geoid height into an ellipsoid height)\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "priority",
                    {
                        "desc": "priority flag: (enter - for default)\n"
                        "0: DEM_par parameters have priority\n"
                        "1: input DEM parameters have priority (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "geoid",
                    {
                        "desc": "(input) geoid or constant geoid height value (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "geoid_par",
                    {
                        "desc": "(input) geoid DEM_par file (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "geoid_type",
                    {
                        "desc": "geoid type: (enter - for default)\n"
                        "0: global geoid in EQA coordinates (default)\n"
                        "1: local geoid in the same coordinate system as the DEM\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "latN_shift",
                    {
                        "desc": "latitude or Northing constant shift to apply on the input data (in "
                        "degree / meter, enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lonE_shift",
                    {
                        "desc": "longitude or Easting constant shift to apply on the input data (in "
                        "degree / meter, enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflg",
                    {
                        "desc": "interpretation of no_data values in real data (enter - for default)\n"
                        "0: no_data values in the input file are kept as no_data values (0.0) "
                        "in the output file (default)\n"
                        "1: no_data values in the input file are converted to valid near-zero "
                        "values in the output file\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "no_data",
                    {
                        "desc": "no_data value in the input file (enter - for default: value either "
                        "defined in the input metadata or 0.0 if not found)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "GTF_direct",
                    {
                        "desc": "direction of GeoTIFF / GDAL supported raster format reading (enter - "
                        "for default)\n"
                        "0: vertically\n"
                        "1: horizontally (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dem_import",
    },
    "dem_trans": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM1_par",
                    {
                        "desc": "(input) DEM parameter file of the input DEM\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM1",
                    {
                        "desc": "(input) input DEM data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM2_par",
                    {
                        "desc": "(input/output) DEM parameter file of the resampled input DEM \n"
                        "NOTE: if DEM2_par does not exist, it is created using the projection "
                        "parameters from DEM1_par\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM2",
                    {
                        "desc": "(output) DEM in transformed coordinates specified by DEM2_par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lat_ovr",
                    {
                        "desc": "lat, northing, or S map projection oversampling factor (enter - for "
                        "default: 2.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lon_ovr",
                    {
                        "desc": "lon, easting, or C map projection oversampling factor (enter - for "
                        "default: 2.0)\n"
                        "NOTE: lat_ovr and lon_ovr are only considered if DEM2_par does not "
                        "exist\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "datum_shift",
                    {
                        "desc": "vertical datum shift flag, enter - for default:\n"
                        "0: output DEM heights not corrected for datum shift between "
                        "projections (default)\n"
                        "1: output DEM heights corrected for datum shift between projections\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "bflg",
                    {
                        "desc": "output DEM bounds flag (enter - for default):\n"
                        "0: use DEM bounds specified by DEM2_par (default)\n"
                        "1: determine bounds from DEM1_par in the projection specified by "
                        "DEM2_par\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(output) complex-valued lookup table (DEM2 -> DEM1) (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode (enter - for default):\n"
                        "0: nearest neighbor\n"
                        "1: bicubic spline (default)\n"
                        "2: B-spline interpolation (default B-spline degree: 3)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {"desc": "B-spline degree (2->5) (enter - for default: 3)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "dem_trans",
    },
    "dem_x_y_z": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM file or constant height value\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_X",
                    {
                        "desc": "(output) X coordinates of grid points of the DEM\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_Y",
                    {
                        "desc": "(output) Y coordinates of grid points of the DEM\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_Z",
                    {
                        "desc": "(output) Z coordinates of grid points of the DEM\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "format_flag",
                    {
                        "desc": "output data format\n0: FLOAT (default)\n1: DOUBLE \n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dem_x_y_z",
    },
    "dem_xyz": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file DEM\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) input DEM file or constant height value\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_XYZ",
                    {
                        "desc": "(output) DEM samples in Cartesian XYZ coordinates (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "dem_xyz",
    },
    "dh_map_orb": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC parameter file of reference SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) SLC parameter file of resampled SLC-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(input) height map in the same geometry as the interferogram, or "
                        "constant value (m) (float, enter - for none))\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "dp",
                    {
                        "desc": "(input) interferogram phase - simulated phase (radians) (float, "
                        "enter - for none)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "dpdh",
                    {
                        "desc": "(output) sensitivity of interf. phase with respect to height "
                        "calculated using state vectors and hgt (rad/m) (float, enter - for "
                        "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dh",
                    {
                        "desc": "(output) height difference calculated from dp using dpdh (m) (float, "
                        "enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_ref_par",
                    {
                        "desc": "(input) SLC parameter file of the image used for geometric "
                        "coregistration (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "int_mode",
                    {
                        "desc": "(input) interferometric acquisition mode:\n"
                        "0: single-pass mode (Tandem-X)\n"
                        "1: repeat-pass mode (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dh_map_orb",
    },
    "diff_ls_fit": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "unw-1",
                    {
                        "desc": "(input) unwrapped interferogram 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "unw-2",
                    {
                        "desc": "(input) unwrapped interferogram 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input)) DIFF/GEO parameter file for the scene\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("nr", {"desc": "number of range samples (default=32)\n", "optional": True, "type": "unknown"}),
                ("naz", {"desc": "number of azimuth samples (default=32)\n", "optional": True, "type": "unknown"}),
                (
                    "mask",
                    {
                        "desc": "mask (SUN/BMP/TIFF raster format), 0 valued pixels are excluded for "
                        "fit (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "plot_data",
                    {
                        "desc": "(output) plot data file compatible with xmgr\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "diff_ls_fit",
    },
    "diff_ls_unw": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "int-1",
                    {
                        "desc": "(input) complex or unwrapped interferogram 1 file name\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "unw-2",
                    {
                        "desc": "(input) unwrapped interferogram 2 file name\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) interferogram/offset processing parameters\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "diff_int",
                    {
                        "desc": "(output)  phase difference of interferograms: (int-1 - " "scaled(unw-2)) file name\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "int_type",
                    {
                        "desc": "int-1 type: 0: unwrapped phase, 1:complex interferogram (default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ph_flag",
                    {
                        "desc": "phase conjugation flag: 0:normal, 1:conjugate phase (default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "diff_ls_unw",
    },
    "diplane_helix": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "LL",
                    {
                        "desc": "(input) single-look complex image with LL circular component\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "RR",
                    {
                        "desc": "(input) single-look complex image with RR circular component\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "diplane",
                    {
                        "desc": "(output) multi-look intensity image with diplane component\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "helix",
                    {
                        "desc": "(output) multi-look intensity image with helix component\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI ISP image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rlks", {"desc": "number of range looks\n", "optional": False, "type": "unknown"}),
                ("azlks", {"desc": "number of azimuth looks\n", "optional": False, "type": "unknown"}),
                ("loff", {"desc": "offset to starting line (default: 0)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of SLC lines to process (default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {"desc": "scale factor for output MLI (default: 1.0)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "diplane_helix",
    },
    "dis2SLC": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data1",
                    {
                        "desc": "(input) complex data1 (FCOMPLEX, SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(input) complex data2 (FCOMPLEX. SCOMPLEX, same type as data1)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width1", {"desc": "data samples per row of data1\n", "optional": False, "type": "unknown"}),
                ("width2", {"desc": "data samples per row of data2\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of cpx1 (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "x-offset (across) samples of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "y-offset (down) lines of data2 relative to data 1 (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {"desc": "display scale factor (enter - for default: 1.0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "exp",
                    {"desc": "display exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type (enter - for default)\n" "0: FCOMPLEX\n" "1: SCOMPLEX (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dis2SLC",
    },
    "dis2_dB": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data1",
                    {
                        "desc": "(input) data1 (FLOAT, UNSIGNED SHORT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(input) data2 (FLOAT, UNSIGNED SHORT, same data type as data1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width1", {"desc": "number of samples/row of data1\n", "optional": False, "type": "unknown"}),
                ("width2", {"desc": "number of samples/row of data2\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "x-offset (across) samples of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "y-offset (down) lines of data2 relative to data 1 (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min_dB",
                    {
                        "desc": "minimum data value (enter - for default: -1.0000e+01)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max_dB",
                    {
                        "desc": "maximum data value (enter - for default:  1.0000e+01)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: gray.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n" "0: FLOAT (default)\n" "1: UNSIGNED SHORT\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_abs",
                    {
                        "desc": "absolute scaling flag (enter - for default)\n"
                        "0: scaling relative to average (min_dB + av_dB) -> (max_dB + av_dB) "
                        "(default)\n"
                        "NOTE: av_dB is the average image intensity dB\n"
                        "1: absolute scaling range: min_dB -> max_dB\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dis2_dB",
    },
    "dis2_linear": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data1",
                    {
                        "desc": "(input) data1 (FLOAT, UNSIGNED SHORT, or UNSIGNED BYTE)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(input) data2 (same data type as data1)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width1", {"desc": "number of samples/row of data1\n", "optional": False, "type": "unknown"}),
                ("width2", {"desc": "number of samples/row of data2\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "x-offset (across) samples of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "y-offset (down) lines of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min",
                    {
                        "desc": "minimum data value (enter - for default:  0.0000e+00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max",
                    {
                        "desc": "maximum data value (enter - for default:  1.0000e+00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cflg",
                    {
                        "desc": "cyclic data display flag (enter - for default: hls.cm)\n"
                        "0: display min <= data < max (default)\n"
                        "1: display (data - min) modulo (max - min)\n"
                        "2: autoscale between min and max value found in data\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: hls.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: "
                        "cc.cm, rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: UNSIGNED SHORT (2-byte integer)\n"
                        "2: SIGNED SHORT (2-byte integer)\n"
                        "3: UNSIGNED BYTE\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dis2_linear",
    },
    "dis2dt_pwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data1",
                    {
                        "desc": "(input) data1 (FLOAT, UNSIGNED SHORT, or UNSIGNED BYTE)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(input) data2 (same data type as data1)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr",
                    {
                        "desc": "(input) intensity image coregistered with data1 (enter - for none, "
                        "FLOAT or raster image)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width1", {"desc": "number of samples/row of data1\n", "optional": False, "type": "unknown"}),
                ("width2", {"desc": "number of samples/row of data2\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "x-offset (across) samples of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "y-offset (down) lines of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min",
                    {
                        "desc": "minimum data value (enter - for default:  0.0000e+00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max",
                    {
                        "desc": "maximum data value (enter - for default:  1.0000e+00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cflg",
                    {
                        "desc": "cyclic data display flag (enter - for default)\n"
                        "0: display min <= data < max (default)\n"
                        "1: display (data - min) modulo (max - min)\n"
                        "2: autoscale between min and max value found in data\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: hls.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {"desc": "display scale factor (enter - for default: 1.0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "exp",
                    {"desc": "display exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "dis2dt_pwr",
    },
    "dis2gbyte": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "image1",
                    {
                        "desc": "(input) GBYTE format image 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "image2",
                    {
                        "desc": "(input) GBYTE format image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width1", {"desc": "samples per row of image1\n", "optional": False, "type": "unknown"}),
                ("width2", {"desc": "samples per row of image2\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of image1 (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "x-offset (across) samples of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "y-offset (down) lines of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {"desc": "display scale factor (enter - for default: 1.0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: gray.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dis2gbyte",
    },
    "dis2mph": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data1",
                    {
                        "desc": "(input) complex data1 (FCOMPLEX, SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(input) complex data2 (same data type as data1)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width1", {"desc": "data samples per row of data1\n", "optional": False, "type": "unknown"}),
                ("width2", {"desc": "data samples per row of data2\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of cpx1 (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "x-offset (across) samples of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "y-offset (down) lines of data2 relative to data 1 (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {"desc": "display scale factor (enter - for default: 1.0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "exp",
                    {"desc": "display exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: rmg.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type (enter - for default)\n"
                        "0: FCOMPLEX (default)\n"
                        "1: SCOMPLEX\n"
                        "2: BCOMPLEX\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_ave",
                    {
                        "desc": "average intensity used to scale images (enter - for default: determined "
                        "from data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dis2mph",
    },
    "dis2mph_pwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data1",
                    {
                        "desc": "(input) complex data1 (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(input) complex data2 (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr",
                    {
                        "desc": "(input) intensity image coregistered with data1 (enter - for none, "
                        "FLOAT or raster image)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width1", {"desc": "data samples per row of data1\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "dis2mph_pwr",
    },
    "dis2pwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data1",
                    {
                        "desc": "(input) data1 (FLOAT, UNSIGNED SHORT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(input) data2 (same data type as data1)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width1", {"desc": "number of samples/row of data1\n", "optional": False, "type": "unknown"}),
                ("width2", {"desc": "number of samples/row of data2\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "x-offset (across) samples of data2 relative to data 1 (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "y-offset (down) lines of data2 relative to data 1 (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law scale factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {"desc": "power-law exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: gray.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n" "0: FLOAT (default)\n" "1: UNSIGNED SHORT\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_ave",
                    {
                        "desc": "average intensity used to scale images (enter - for default: determined "
                        "from data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dis2pwr",
    },
    "dis2ras": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "ras1",
                    {
                        "desc": "(input) SUN/BMP/TIFF image (8 or 24 bits/pixel) 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras2",
                    {
                        "desc": "(input) SUN/BMP/TIFF image (8 or 24 bits/pixel) 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mag",
                    {
                        "desc": "zoom magnification factor (enter - for default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win_sz",
                    {
                        "desc": "zoom window size before magnification (enter - for default: 132)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dis2ras",
    },
    "disSLC": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) input data (FCOMPLEX, SCOMPLEX SLC)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of the data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law scale factor, (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {"desc": "power-law exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n0: FCOMPLEX\n1: SCOMPLEX (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "disSLC",
    },
    "dis_dB": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FLOAT or UNSIGNED SHORT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min_dB",
                    {
                        "desc": "data display minimum (enter - for default: -10.00 dB)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max_dB",
                    {
                        "desc": "data display maximum (enter - for default: 10.00 dB)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: gray.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n0: FLOAT (default)\n1: UNSIGNED SHORT\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_abs",
                    {
                        "desc": "absolute scaling flag (enter - for default)\n"
                        "0: scaling relative to average (min_dB + av_dB) -> (max_dB + av_dB) "
                        "(default)\n"
                        "NOTE: av_dB is the average image intensity dB\n"
                        "1: absolute scaling range: min_dB -> max_dB\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dis_dB",
    },
    "dis_linear": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FLOAT, UNSIGNED SHORT, or UNSIGNED BYTE)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min",
                    {
                        "desc": "data display minimum (enter - for default: 0.000)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max",
                    {
                        "desc": "data display maximum (enter - for default: 1.000)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cflg",
                    {
                        "desc": "cyclic data display flag (enter - for default)\n"
                        "0: display min <= data < max (default)\n"
                        "1: display (data - min) modulo (max-min)\n"
                        "2: autoscale between min and max value found in data\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: hls.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: UNSIGNED SHORT (2-byte integer)\n"
                        "2: SIGNED SHORT (2-byte integer)\n"
                        "3: UNSIGNED BYTE\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dis_linear",
    },
    "discpx": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FCOMPLEX, SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "mode",
                    {
                        "desc": "display mode (enter - for default: power-law scaling)\n"
                        "0: intensity with power-law scaling (scale and exp), default colormap: "
                        "gray.cm, (default)\n"
                        "1: intensity with logarithmic scaling min -> max (dB), default colormap: "
                        "gray.cm\n"
                        "2: real component, scaling min -> max, default colormap: hls.cm\n"
                        "3: imaginary component, scaling min -> max, default colormap: hls.cm\n"
                        "4: phase, scaling min -> max, default colormap: default colormap "
                        "rmg.cm\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min",
                    {
                        "desc": "data display minimum (enter - for default mode 0: not used, mode 1: -10 "
                        "dB, modes 2,3: -1.0, mode 4: -PI)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max",
                    {
                        "desc": "data display maximum (enter - for default mode 0: not used, mode 1: +16 "
                        "dB, modes 2,3: +1.0, mode 4: +PI)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law scale factor, (enter - for default: 1.0) (mode 0 only)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "power-law exponent (enter - for default: 0.35) (mode 0 only)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n0: FCOMPLEX (default)\n1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_ave",
                    {
                        "desc": "average intensity used to calculate image scaling (modes 0 and 1)\n"
                        "(enter - for default: determined from the input data file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "discpx",
    },
    "disdem_par": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "DEM",
                    {
                        "desc": "(input) Digital elevation model (FLOAT or SHORT as specified in " "DEM_par)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DIFF/GEO DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "start",
                    {"desc": "starting line of DEM (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exaggerate",
                    {
                        "desc": "relief exaggeration factor to increase contrast of display (enter - "
                        "for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "theta0",
                    {
                        "desc": "illumination elevation angle in deg. (enter - for default: 45.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "phi0",
                    {
                        "desc": "illumination orientation angle in deg. (enter - for default: 135.0)\n"
                        "(0.: right, 90: top, 180: left, 270: bottom)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "illum_mode",
                    {
                        "desc": "illumination mode (enter - for default)\n"
                        "0: single angle (default)\n"
                        "1: multiple angle\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sharpness",
                    {
                        "desc": "shaded relief sharpness (scale from 0 to 9, enter - for default: " "1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "edge",
                    {
                        "desc": "edge protection (reduce artifacts at the edges and near no-data "
                        "values, enter - for default)\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "disdem_par",
    },
    "disdt_pwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data in FLOAT format (deformation, height, unwrapped phase, "
                        "correlation...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr",
                    {
                        "desc": "(input) intensity image coregistered with data (enter - for none, "
                        "FLOAT or raster image)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data and pwr\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {
                        "desc": "starting line of data and pwr file (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min",
                    {
                        "desc": "minimum data value (enter - for default:  0.0000e+00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max",
                    {
                        "desc": "maximum data value (enter - for default:  1.0000e+00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cflg",
                    {
                        "desc": "cyclic data display flag:\n"
                        "0: display min <= data < max (default)\n"
                        "1: display (data - min) modulo (max - min)\n"
                        "2: autoscale between min and max value found in data\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: hls.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "intensity display scale factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "intensity display exponent (enter - for default: 0.35)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bits",
                    {
                        "desc": "bits/pixel (enter - for default)\n"
                        "8: 8-bit indexed color map (default)\n"
                        "24: RGB 8-bits/color\n",
                        "enum": [8, 24],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "disdt_pwr",
    },
    "disflag": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "flag",
                    {
                        "desc": "(input) phase unwrapping flag file (unsigned char)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "samples per row of flag file\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {
                        "desc": "starting line of flag file (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "disflag",
    },
    "disgbyte": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "image",
                    {
                        "desc": "(input) GBYTE format data (1 byte/sample)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "samples per row of image\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of image1 (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {"desc": "display scale factor (enter - for default: 1.0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: gray.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "disgbyte",
    },
    "dismph": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FCOMPLEX, SCOMPLEX, BCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law scale factor, (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {"desc": "power-law exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: rmg.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n"
                        "0: FCOMPLEX (default)\n"
                        "1: SCOMPLEX\n"
                        "2: BCOMPLEX\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "bits",
                    {
                        "desc": "bits/pixel (enter - for default)\n"
                        "8: 8-bit indexed color map (default)\n"
                        "24: RGB 8-bits/color\n",
                        "enum": [8, 24],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_ave",
                    {
                        "desc": "average intensity used to scale image (enter - for default: determined "
                        "from data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dismph",
    },
    "dismph_fft": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (SCOMPLEX or FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "complex samples per row\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {
                        "desc": "starting line to display (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {"desc": "display scale factor (enter - for default: 1.0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "exp",
                    {"desc": "display exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nfft",
                    {
                        "desc": "2D FFT size, nfft x nfft (enter - for default: 128)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mag",
                    {
                        "desc": "zoom and FFT window magnification factor (enter - for default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "data_type",
                    {
                        "desc": "input data type (enter - for default)\n" "0: FCOMPLEX (default)\n" "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dismph_fft",
    },
    "dismph_pwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr",
                    {
                        "desc": "(input) intensity image coregistered with data (enter - for none, "
                        "FLOAT or raster image)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data and pwr\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {
                        "desc": "starting line of data and pwr (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: rmg.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "intensity display scale factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "intensity display exponent (enter - for default: 0.35)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bits",
                    {
                        "desc": "bits/pixel (enter - for default)\n"
                        "8: 8-bit indexed color map (default)\n"
                        "24: RGB 8-bits/color\n",
                        "enum": [8, 24],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "dismph_pwr",
    },
    "dispmap": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                ("unw", {"desc": "(input) unwrapped phase (radians), (float)\n", "optional": False, "type": "unknown"}),
                (
                    "hgt",
                    {
                        "desc": "(input) height map (enter - for none, reference height set to 0.0) " "(float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(input) SLC/MLI image parameter file of the reference scene\n"
                        "NOTE: use the SLC_par if the OFF_par is provided, otherwise use the "
                        "MLI_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file (enter - for none)\n"
                        "NOTE: geometry and pixel spacing are determined from the MLI_par, if "
                        "the OFF_par is not provided\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_map",
                    {
                        "desc": "(output) displacement map (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "displacement mode (enter - for default):\n"
                        "0: calculate line of sight (LOS) deformation by scaling the unwrapped "
                        "phase (default)\n"
                        "1: calculate the vertical displacement assuming that all the "
                        "displacement is vertical\n"
                        "2: calculate the horizontal displacement assuming that all displacement "
                        "is in the direction\n"
                        "of the look vector projected on the ground\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sflg",
                    {
                        "desc": "sign flag (enter - for default):\n"
                        "0: motion away from the radar is negative: unwrapped phase and "
                        "deformation have opposite sign (default)\n"
                        "1: motion away from the radar is positive: unwrapped phase and "
                        "deformation have the same sign\n"
                        "This is consistent with the look vector that points from the radar to "
                        "the target on the ground\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dispmap",
    },
    "dispmap_ENU": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "LV_tab",
                    {
                        "desc": "(input) list of look vector files in ENU coordinates for each map " "grid position\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DISP_tab",
                    {
                        "desc": "(input) list of displacement files containing LOS displacement for "
                        "each map grid position (text)\n"
                        "NOTE: displacement sign must be consistent with the look vector "
                        "pointing from the radar to the ground\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SIGMA_tab",
                    {
                        "desc": "(input) standard deviation of displacement for each map grid "
                        "position  (enter - for all equal)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file describing the map geometry\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_east",
                    {
                        "desc": "(output) displacement in the East direction for each map grid " "position\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_north",
                    {
                        "desc": "(output) displacement in the North direction for each map grid " "position\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_up",
                    {
                        "desc": "(output) displacement in the Up direction for each map grid " "position\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sigma_east",
                    {
                        "desc": "(output) standard deviation in the East direction for each map grid " "position\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "sigma_north",
                    {
                        "desc": "(output) standard deviation in the North direction for each map " "grid position\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "sigma_up",
                    {
                        "desc": "(output) standard deviation in the Up direction for each map grid " "position\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "chi2",
                    {
                        "desc": "(output) chi-square for each map grid position\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "min_obs",
                    {"desc": "minimum number of observations (default: 3)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "tol",
                    {
                        "desc": "threshold for accepting SVD singular values w_i, when (w_i < "
                        "tol*wmax), w_i is set to 0.0: 1.0000e-05\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dispmap_ENU",
    },
    "dispmap_LOS": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                ("unw", {"desc": "(input) unwrapped phase (radians), (float)\n", "optional": False, "type": "unknown"}),
                ("width", {"desc": "data samples/line\n", "optional": False, "type": "unknown"}),
                ("freq", {"desc": "radar center frequency (GHz)\n", "optional": False, "type": "unknown"}),
                (
                    "disp_map",
                    {
                        "desc": "(output) displacement map along the Line of Sight (LOS) (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sflg",
                    {
                        "desc": "displacement sign flag (enter - for default):\n"
                        "0: motion away from the radar is negative: unwrapped phase and "
                        "deformation have opposite sign (default)\n"
                        "1: motion away from the radar is positive: unwrapped phase and "
                        "deformation have the same sign\n"
                        "This is consistent with the look vector pointing from the radar to "
                        "the target on the ground\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dispmap_LOS",
    },
    "dispmap_sim": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "LV",
                    {
                        "desc": "(input) look vector in East, North, Up (ENU) coordinates for each "
                        "map grid position\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file describing the map geometry\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_east",
                    {
                        "desc": "(input) displacement in the East direction for each map grid " "position\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_north",
                    {
                        "desc": "(input) displacement in the North direction for each map grid " "position\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_up",
                    {
                        "desc": "(input) displacement in the Up direction for each map grid " "position\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_LOS",
                    {
                        "desc": "(output) displacement in the line of sight (LOS) for each map grid " "position\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "dispmap_sim",
    },
    "dispmap_vec": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dispmap",
                    {
                        "desc": "(input) displacement observation (along look-vector) (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "lv_theta",
                    {
                        "desc": "(input) look-vector elevation angle (file  or constant value in " "deg.)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lv_phi",
                    {
                        "desc": "(input) look-vector orientation angle (file or constant value in " "deg.)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "fv_theta",
                    {
                        "desc": "(input) flow-vector elevation angle (file or constant value in " "deg.)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "fv_phi",
                    {
                        "desc": "(input) flow-vector orientation angle (file or constant value in " "deg.)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dv_norm",
                    {
                        "desc": "(output) norm of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dv_theta",
                    {
                        "desc": "(output) elevation angle of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_phi",
                    {
                        "desc": "(output) orientation angle of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_x",
                    {
                        "desc": "(output) easting  component of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_y",
                    {
                        "desc": "(output) northing component of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_z",
                    {
                        "desc": "(output) vertical component of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "mask_angle",
                    {
                        "desc": "cutoff angle in degrees between the look and normal vector to mask "
                        "instable results (default=5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dispmap_vec",
    },
    "dispmap_vec2": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file (or constant height value)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dispmap1",
                    {
                        "desc": "(input) 1. displacement observation (along look-vector 1) " "(float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "lv1_theta",
                    {
                        "desc": "(input) look-vector 1 elevation angle (file or constant value in " "deg.)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lv1_phi",
                    {
                        "desc": "(input) look-vector 1 orientation angle (file or constant value in " "deg.)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dispmap2",
                    {
                        "desc": "(input) 2. displacement observation (along look-vector 2) " "(float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "lv2_theta",
                    {
                        "desc": "(input) look-vector 2 elevation angle (file or constant value in " "deg.)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lv2_phi",
                    {
                        "desc": "(input) look-vector 2 orientation angle (file or constant value in " "deg.)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dv_norm",
                    {
                        "desc": "(output) norm of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dv_theta",
                    {
                        "desc": "(output) elevation angle of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_phi",
                    {
                        "desc": "(output) orientation angle of 3-dim displacement vector (file of " "float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_x",
                    {
                        "desc": "(output) easting  component of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_y",
                    {
                        "desc": "(output) northing component of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_z",
                    {
                        "desc": "(output) vertical component of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "mask_angle",
                    {
                        "desc": "cutoff angle in degrees between the look and normal vectors to "
                        "mask inaccurate results (default=2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "displacement model mode (default=0):\n"
                        "0: displacement along terrain surface\n"
                        "1: displacement towards center axis\n"
                        "2: east-west and up-down components (north-south assumed zero)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ax_north",
                    {"desc": "displacement center axis northing/latitude\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ax_east",
                    {"desc": "displacement center axis easting/longitude\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "dispmap_vec2",
    },
    "dispmap_vec_offset": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file (or constant height value)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dispmap_r",
                    {
                        "desc": "(input) slant-range displacement map (m) (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "dispmap_az",
                    {"desc": "(input) azimuth displacement map (m) (float)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "lv_theta",
                    {
                        "desc": "(input) look-vector elevation angle file or constant value " "in deg. (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "lv_phi",
                    {
                        "desc": "(input) look-vector orientation angle file or constant value " "in deg. (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "dv_norm",
                    {
                        "desc": "(output) norm of 3-dim displacement vector (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dv_theta",
                    {
                        "desc": "(output) elevation angle of 3-dim displacement vector " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_phi",
                    {
                        "desc": "(output) orientation angle of 3-dim displacement vector file "
                        "or constant value deg. (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_x",
                    {
                        "desc": "(output) easting  component of 3-dim displacement vector " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_y",
                    {
                        "desc": "(output) northing component of 3-dim displacement vector " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dv_z",
                    {
                        "desc": "(output) vertical component of 3-dim displacement vector " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "mask_angle",
                    {
                        "desc": "cutoff angle in degrees between the look and normal vectors "
                        "to mask inaccurate results (default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "displacement model mode (default=0):\n"
                        "0: displacement along terrain surface\n"
                        "1: displacement towards center axis\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ax_north",
                    {"desc": "displacement center axis northing or latitude S\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ax_east",
                    {"desc": "displacement center axis easting or longitude S\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "dispmap_vec_offset",
    },
    "dispwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FLOAT, UNSIGNED SHORT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law scale factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {"desc": "power-law exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: gray.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n0: FLOAT (default)\n1: UNSIGNED SHORT\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_ave",
                    {
                        "desc": "average intensity used to scale image (enter - for default: determined "
                        "from data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dispwr",
    },
    "disras": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "ras",
                    {
                        "desc": "(input) raster image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mag",
                    {
                        "desc": "zoom magnification factor (enter - for default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win_sz",
                    {
                        "desc": "zoom window size before magnification (enter - for default: 132)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "disras",
    },
    "disras_dem_par": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "ras",
                    {
                        "desc": "(input) raster image with same dimensions as in DEM_par (SUN "
                        "*.ras, or BMP *.bmp format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DIFF DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mag",
                    {
                        "desc": "zoom magnification factor (enter - for default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win_sz",
                    {
                        "desc": "zoom window size before magnification (enter - for default: " "132)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "disras_dem_par",
    },
    "disshd": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "DEM",
                    {
                        "desc": "(input) digital elevation model (FLOAT or SHORT)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("width", {"desc": "samples per row of DEM\n", "optional": False, "type": "unknown"}),
                (
                    "col_post",
                    {"desc": "posting between cols (same unit as DEM values)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "row_post",
                    {
                        "desc": "posting between rows (same unit as DEM, enter - for default: col_post)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "start",
                    {"desc": "starting line of DEM (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "theta0",
                    {
                        "desc": "illumination elevation angle in deg. (enter - for default: 45.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "phi0",
                    {
                        "desc": "illumination orientation angle in deg. (enter - for default: 135.0)\n"
                        "(0.: right, 90: top, 180: left, 270: bottom)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n0: FLOAT (default)\n1: SHORT INTEGER\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "illum_mode",
                    {
                        "desc": "illumination mode (enter - for default)\n"
                        "0: single angle (default)\n"
                        "1: multiple angle\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sharpness",
                    {
                        "desc": "shaded relief sharpness (scale from 0 to 9, enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "edge",
                    {
                        "desc": "edge protection (reduce artifacts at the edges and near no-data values, "
                        "enter - for default)\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "disshd",
    },
    "distree": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "flag",
                    {
                        "desc": "(input) phase unwrapping flag file (unsigned char)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "unw",
                    {
                        "desc": "(input) unwrapped phase image (enter - for None) (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "int",
                    {
                        "desc": "(input) complex interferogram (wrapped) (enter - for None) (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "samples per row of flag, unw, and int\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {
                        "desc": "starting line of flag, unw, and int (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ph_scale",
                    {
                        "desc": "unwrapped phase display scale factor (enter - for default: 0.33333)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "distree",
    },
    "dop_ambig": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data (I/Q complex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "algorithm",
                    {
                        "desc": "algorithm selection:\n"
                        "1: Multi-Look Cross Correlation (MLCC)\n"
                        "2: Multi-Look Beat Frequency (MLBF) (default)\n",
                        "enum": [1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset (enter - for default: parameter file value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "output_plot",
                    {
                        "desc": "(output) plot file: correlation phase for MLCC, azimuth spectrum for " "MLBF\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "dop_ambig",
    },
    "dop_interf": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par1",
                    {
                        "desc": "(input) SAR sensor/raw data parameter file for scene 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par1",
                    {
                        "desc": "(input) MSP processing parameter file for scene 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par2",
                    {
                        "desc": "(input) MSP processing parameter file for scene 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par1_out",
                    {
                        "desc": "(output) MSP processing parameter file for scene 1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par2_out",
                    {
                        "desc": "(output) MSP processing parameter file for scene 2\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dop",
                    {
                        "desc": "(output) doppler function as a function of range sample number (plot " "file)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "dop_interf",
    },
    "dop_mlcc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data (I/Q complex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "plot_data",
                    {
                        "desc": "(output) plot file, correlation phase for MLCC (text format)\n"
                        "1: range pixel number\n"
                        "2: upper spectrum half mlcc phase (radians)\n"
                        "3: lower spectrum half mlcc phase (radians)\n"
                        "4: mlcc phase difference between uppler and lower spectrum half "
                        "(radians)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset (enter - for default=parameter file value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of range lines to process (default=proc. parameters)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "dop_mlcc",
    },
    "doppler": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) input uncompressed IQ raw SAR data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "doppler",
                    {
                        "desc": "(output) Doppler as a function of slant range\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset (enter - for default: PROC_par loff value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nsub",
                    {
                        "desc": "number of azimuth subapertures (enter - for default: 12)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ambig_flag",
                    {
                        "desc": "Doppler ambiguity resolution flag\n"
                        "0: use unambiguous Doppler Ambiguity Resolver (DAR) estimate (default)\n"
                        "1: estimate Doppler ambiguity number from the Doppler slope\n"
                        "2: command line entry for the Doppler ambiguity number\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "namb",
                    {
                        "desc": "user defined number of Doppler ambiguities to add to the Doppler "
                        "function (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "order of polynomial used to fit the range Doppler function 0-->3: "
                        "(enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "azimuth spectrum plotting flag:\n"
                        "0: none (default)\n"
                        "1: output plot in PNG format\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "doppler",
    },
    "doppler_2d": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed IQ raw SAR data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dop2d",
                    {
                        "desc": "(output) Doppler centroid as a function of range for each block\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset (enter - for default=parameter file value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "blsz",
                    {"desc": "block size lines (enter - for default = 4096)\n", "optional": True, "type": "unknown"},
                ),
                ("nbl", {"desc": "number of blocks (enter - for default)\n", "optional": True, "type": "unknown"}),
                (
                    "a2_flg",
                    {
                        "desc": "fit a2 for second derivative of the Doppler centroid w.r.t.range "
                        "(Hz/m/m) (default=0: no  1: yes)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "b0_flg",
                    {
                        "desc": "fit b0 for first derivative of the Doppler centroid w.r.t. "
                        "along-track time  (Hz/sec) (0: no  default=1: yes)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "b1_flg",
                    {
                        "desc": "fit b1 for along-track rate of the change in slope of Doppler w.r.t. "
                        "range (Hz/sec/m)(0: no  default=1: yes)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "c0_flg",
                    {
                        "desc": "fit c0 for second derivative of the Doppler centroid w.r.t. "
                        "along-track time (Hz/sec/sec) (default=0: no 1: yes)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ambig_flag",
                    {
                        "desc": "Doppler ambiguity resolution flag\n"
                        "0 = use unambiguous Doppler Ambiguity Resolver (DAR) estimate "
                        "(default)\n"
                        "1 = command line entry for the Doppler ambiguity number\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "namb",
                    {
                        "desc": "user defined number of Doppler ambiguities to add to the Doppler " "function\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "doppler_2d",
    },
    "doppler_2d_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) SLC image (SCOMPLEX or FCOMPLEX format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dop2d",
                    {
                        "desc": "(output) estimated doppler centroid as a function of range for "
                        "each block (text format) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {"desc": "number of lines offset (enter - for default: 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "blsz",
                    {
                        "desc": "block size lines, minimum: 256 (enter - for default: 2048)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nbl",
                    {
                        "desc": "number of blocks (enter - for default: calculated " "automatically)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "a2_flg",
                    {
                        "desc": "fit a2 for second derivative of the Doppler centroid w.r.t.range "
                        "(Hz/m/m) (enter - for default)\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "b0_flg",
                    {
                        "desc": "fit b0 for first derivative of the Doppler centroid w.r.t. "
                        "along-track time (Hz/sec) (enter - for default)\n"
                        "0: no\n"
                        "1: yes (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "b1_flg",
                    {
                        "desc": "fit b1 for along-track rate of the change in slope of Doppler "
                        "w.r.t. range (Hz/sec/m)(enter - for default)\n"
                        "0: no\n"
                        "1: yes (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "c0_flg",
                    {
                        "desc": "fit c0 for second derivative of the Doppler centroid w.r.t. "
                        "along-track time (Hz/sec/sec) (enter - for default)\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "namb",
                    {
                        "desc": "user defined number of Doppler ambiguities to add to the Doppler "
                        "function (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "doppler_2d_SLC",
    },
    "doppler_real": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed IQ raw SAR data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "doppler",
                    {
                        "desc": "(output) Doppler as a function of slant range (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset (enter - for default=parameter file " "value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nsub",
                    {"desc": "number of azimuth subapertures (default = 12)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ambig_flag",
                    {
                        "desc": "Doppler ambiguity resolution flag\n"
                        "0 = use unambiguous Doppler Ambiguity Resolver (DAR) estimate "
                        "(default)\n"
                        "1 = estimate Doppler ambiguity number from the Doppler slope\n"
                        "2 = command line entry for the Doppler ambiguity number\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "namb",
                    {
                        "desc": "User defined number of Doppler ambiguities to add to the Doppler " "function\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "doppler_real",
    },
    "double2float": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) input data file (double)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) output data file (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("scale", {"desc": "scale factor (default: 1.0)\n", "optional": True, "type": "unknown"}),
                ("exp", {"desc": "exponent (default: 1.0)\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "double2float",
    },
    "drawthat": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "ras_in",
                    {
                        "desc": "(input) raster image (SUN, BMP, or TIFF format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras_out",
                    {
                        "desc": "(output) raster image with features drawn at points (SUN, BMP, or TIFF " "format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pt_list",
                    {
                        "desc": "(input) point list (text)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "drawing mode (enter - for default)\n"
                        "0: draw an arc connecting points (default)\n"
                        "1: draw a filled polygon specified by the points\n"
                        "2: draw cross\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "r",
                    {
                        "desc": "line color value red   (0 --> 255) (enter - for default: 255)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "g",
                    {
                        "desc": "line color value green (0 --> 255) (enter - for default: 255)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "b",
                    {
                        "desc": "line color value blue  (0 --> 255) (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xs",
                    {
                        "desc": "size of cross in pixels, set to 1 for single points (enter - for " "default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflg",
                    {
                        "desc": "zero image flag (enter - for default)\n"
                        "0: retain image values (default)\n"
                        "1: set all image values to 0 except points\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "drawthat",
    },
    "edge_detection": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width of input data\n", "optional": False, "type": "unknown"}),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file (FLOAT type)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: SUN/BMP/TIFF 8 or 24-bit raster image\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "op_flg",
                    {
                        "desc": "operation before computing edges (enter - for default)\n"
                        "0: none (default)\n"
                        "1: sqrt\n"
                        "2: log\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sigma_x",
                    {
                        "desc": "Gaussian filter sigma parameter in horizontal direction (enter - "
                        "for default: 1.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sigma_y",
                    {
                        "desc": "Gaussian filter sigma parameter in vertical direction (enter - "
                        "for default: same as sigma_x)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "T1",
                    {
                        "desc": "low gradient value for hysteresis thresholding relative to "
                        "maximum gradient (0 < T1 < 1, enter - for default: 0.01)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "T2",
                    {
                        "desc": "high gradient value for hysteresis thresholding relative to "
                        "maximum gradient (T1 < T2 < 1, enter - for default: 0.10)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min_seg_size",
                    {
                        "desc": "minimum segment size (enter - for default: 0)\n"
                        "NOTE: only segments with a limited curvature will be kept if "
                        "[min_seg_size] > 1,\n"
                        "the curvature is defined by [max_reg_len] [max_reg_std] and "
                        "[max_reg_dist] values\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max_reg_len",
                    {
                        "desc": "maximum linear regression length (must be >= 3, enter - for " "default: 9)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max_reg_std",
                    {
                        "desc": "maximum standard deviation of segment linear regression (enter - "
                        "for default: 1.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max_reg_dist",
                    {
                        "desc": "maximum distance between candidate pixel and linear regression "
                        "(enter - for default: 2.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "seg_out",
                    {
                        "desc": "(output) output text file containing the detected line segments "
                        "(requires [min_seg_size] > 1, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "line_filt",
                    {
                        "desc": "flag for filtering out non-straight lines (enter - for default)\n"
                        "0: no filter (default)\n"
                        "1: keep only straight lines (requires [min_seg_size] > 1)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "max_line_std",
                    {
                        "desc": "maximum standard deviation of line linear regression (enter - " "for default: 1.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "edge_detection",
    },
    "enh_lee": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "input_data",
                    {
                        "desc": "(input) input intensity file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "output_data",
                    {
                        "desc": "(output) output intensity file (filtered)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                ("nlooks", {"desc": "number of looks\n", "optional": False, "type": "unknown"}),
                ("damp", {"desc": "damping constant of filter\n", "optional": False, "type": "unknown"}),
                (
                    "bx",
                    {"desc": "filter size in x direction (number of cols) \n", "optional": False, "type": "unknown"},
                ),
                (
                    "by",
                    {
                        "desc": "filter size in y direction (number of rows) (enter - for default: by = " "bx)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "enh_lee",
    },
    "error_stat": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "d1",
                    {
                        "desc": "(input) data file 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "d2",
                    {
                        "desc": "(input) data file 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "image line width (samples/line)\n", "optional": False, "type": "unknown"}),
                (
                    "dtype",
                    {
                        "desc": "data type for d1 and d2:\n0: FLOAT\n1: FCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "sample offset to region start (enter - for default: 0)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "line offset to region start (enter - for default: 0)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "region width (samples, enter - for default: width - roff)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines in the region (enter - for default: data_lines - " "loff)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "report",
                    {
                        "desc": "output text file (keyword:value format)\n"
                        "keywords: data_1, data_2, d1_mean, d2_mean, d1_stddev, d2_stddev, "
                        "root_mean_square_error, normalized_mean_square_error,\n"
                        "cross_correlation_coefficient, cross_correlation_angle, "
                        "total_samples, non_zero_samples, valid_fraction\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "error_stat",
    },
    "extract_gcp": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_rdc",
                    {
                        "desc": "(input) DEM in range-Doppler coordinates\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GCP",
                    {
                        "desc": "(output) GCP height data file (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nr",
                    {"desc": "number of GCP locations in range (default: 32)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "naz",
                    {"desc": "number of GCP azimuth locations (default: 32)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "mask",
                    {
                        "desc": "(input) GCP selection mask (SUN raster, BMP, or TIFF format)\n"
                        "NOTE: GCPs are excluded from regions where the mask = 0\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "extract_gcp",
    },
    "extract_psd": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "spectra",
                    {
                        "desc": "range spectra data file (binary format from rspec_JERS.c)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("num", {"desc": "spectrum number (1 --> rsp.nspec)\n", "optional": False, "type": "unknown"}),
                (
                    "output_spectrum",
                    {"desc": "output spectrum (text format for plotting)\n", "optional": False, "type": "unknown"},
                ),
            ]
        ),
        "program": "extract_psd",
    },
    "fill": {
        "module": "DISP",
        "params": OrderedDict(
            [
                ("d1", {"desc": "(input) data file 1 (float)\n", "optional": False, "type": "unknown"}),
                (
                    "d2",
                    {
                        "desc": "(input) data file 2 used to fill gaps in d1, or a constant value (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "dout",
                    {
                        "desc": "(output) d1 with gaps filled (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
            ]
        ),
        "program": "fill",
    },
    "fill_gaps": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input data file (FLOAT / FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width of input data\n", "optional": False, "type": "unknown"}),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file (FLOAT / FCOMPLEX)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input and output data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "method",
                    {
                        "desc": "method flag (enter - for default: 4)\n"
                        "0: Laplace interpolation and linear extrapolation - least squares "
                        "solution\n"
                        "1: Laplace interpolation and linear extrapolation - smaller system of "
                        "linear equations than in method #0 in case of few missing values - "
                        "least squares solution\n"
                        "2: Laplace interpolation and linear extrapolation - solves a direct "
                        "linear system of equations for the missing values (not a least "
                        "squares solution)\n"
                        "3: biharmonic interpolation - implementation similar to method #1 - "
                        "least squares solution\n"
                        "4: spring analogy: assumes springs (with a nominal length of zero) "
                        "connect each node with every neighbor - least squares solution "
                        "(default)\n"
                        "5: average of the 8 nearest neighbors - this method solves a direct "
                        "linear system for the missing values (not a least squares solution)\n"
                        "NOTE: small gaps: use method #0, #1 or #3 - large gaps: use method "
                        "#2, #4 or #5 - most demanding: method #3\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max_dist",
                    {
                        "desc": "maximum interpolation / extrapolation distance in pixels (enter - or "
                        "0 for default: unlimited)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bp_flag",
                    {
                        "desc": "perform block processing (enter - for default: 0)\n"
                        "0: no block processing (default)\n"
                        "1: block processing (faster, avoid overflow, however might be "
                        "slightly less accurate)\n"
                        "NOTE: when block processing is selected, a two-step process is "
                        "carried out: 1: solving the downsampled array (coarse processing), 2: "
                        "block processing\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win",
                    {
                        "desc": "block size (pixels, 10 < win < 1000, enter - for default: 100)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ds_method",
                    {
                        "desc": "method flag (0 - 5, same choices as for [method] option) (enter - for "
                        "default: same as [method])\n"
                        "NOTE: for an input containing large gaps, method #2, #4 or #5 may "
                        "yield more appropriate results.\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ds_size",
                    {
                        "desc": "maximum size of downsampled data (for both width and height) (pixels, "
                        "ds_size > 10, enter - for default: 400)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ds_data",
                    {
                        "desc": "(output) write intermediate data after solving the downsampled array "
                        "(FLOAT / FCOMPLEX)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "fill_gaps",
    },
    "flip": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) output data file (flipped)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of data values/line\n", "optional": False, "type": "unknown"}),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "2: SCOMPLEX\n"
                        "3: UNSIGNED CHAR\n"
                        "4: SHORT\n"
                        "5: INTEGER\n"
                        "6: DOUBLE\n"
                        "7: SUN/BMP/TIFF format raster image\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "direction",
                    {
                        "desc": "flip direction (enter - for default)\n"
                        "1: right/left\n"
                        "2: top/bottom\n"
                        "3: right/left and top/bottom\n",
                        "enum": [1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "flip",
    },
    "float2ascii": {
        "module": "DISP",
        "params": OrderedDict(
            [
                ("din", {"desc": "(input) input data file (float)\n", "optional": False, "type": "unknown"}),
                ("width", {"desc": "number of data values per line\n", "optional": False, "type": "unknown"}),
                (
                    "data_out",
                    {
                        "desc": "(output) input text format data file with whitespace between " "columns\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("loff", {"desc": "offset lines to start of data (default: 0)\n", "optional": True, "type": "unknown"}),
                (
                    "nl",
                    {
                        "desc": "number of lines (enter - for default: to end of file) \n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "float2ascii",
    },
    "float2double": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {"desc": "(input) input data file (float, 4 bytes/sample)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) output data file (double, 8 bytes/sample)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("scale", {"desc": "scale factor (default: 1.0)\n", "optional": False, "type": "unknown"}),
                ("exp", {"desc": "exponent (default: 1.0)\n", "optional": False, "type": "unknown"}),
            ]
        ),
        "program": "float2double",
    },
    "float2gbyte": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) FLOAT format data (4 bytes/sample)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) GBYTE logarithmic scaled format data (1 byte/sample)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "float2gbyte",
    },
    "float2short": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) input data file (FLOAT, 4 bytes/sample)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) output file (SHORT integers, 2 bytes/sample)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("scale", {"desc": "scale factor (enter - for default: 1.0)\n", "optional": True, "type": "unknown"}),
                ("exp", {"desc": "exponent (enter - for default: 1.0)\n", "optional": True, "type": "unknown"}),
                (
                    "neg",
                    {
                        "desc": "behavior for negative output values (enter - for default)\n"
                        "0: replace by minimum positive value (default)\n"
                        "1: keep negative values\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data type (enter - for default)\n"
                        "0: SHORT (int16, default)\n"
                        "1: UNSIGNED SHORT (uint16)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "output",
                    {
                        "desc": "scale*input^exp  (for SAR backscatter use scale=1000.0, exp=0.5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "float2short",
    },
    "float2uchar": {
        "module": "DISP",
        "params": OrderedDict(
            [
                ("infile", {"desc": "input file (float, 4 bytes/sample)\n", "optional": False, "type": "unknown"}),
                (
                    "outfile",
                    {"desc": "output file (unsigned char, 1 byte/sample)\n", "optional": False, "type": "unknown"},
                ),
                ("scale", {"desc": "scale factor (default=1.0)\n", "optional": False, "type": "unknown"}),
                ("exp", {"desc": "exponent (default=1.0)\n", "optional": False, "type": "unknown"}),
            ]
        ),
        "program": "float2uchar",
    },
    "float_math": {
        "module": "DISP",
        "params": OrderedDict(
            [
                ("d1", {"desc": "(input) data file 1 (float)\n", "optional": False, "type": "unknown"}),
                (
                    "d2",
                    {
                        "desc": "(input) data file 2 (float) (enter - for none)\n"
                        "NOTE: if no input file is provided, d2 values are set to value "
                        "specified by c0 parameter\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "d_out",
                    {
                        "desc": "(output) output of math operation on the input data, must differ "
                        "from d1 and d2! (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "mode",
                    {
                        "desc": "math operation to perform on data:\n"
                        "0:  addition, d1 + d2\n"
                        "1:  subtraction, d1 - d2\n"
                        "2:  multiplication, d1 * d2\n"
                        "3:  division, d1/d2\n"
                        "4:  10 * log10(d1), evaluate dB value\n"
                        "5:  d1*d1\n"
                        "6:  sqrt(d1)\n"
                        "7:  sin(d1)\n"
                        "8:  cos(d1)\n"
                        "9:  tan(d1)\n"
                        "10: asin(d1)\n"
                        "11: acos(d1)\n"
                        "12: atan2(d2,d1)\n"
                        "13: d1**d2\n"
                        "14: abs(d1)\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "range pixel offset to center of the reference region (enter - for "
                        "default: no reference correction)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "line offset to center of the reference region (enter - for default: "
                        "no reference correction)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range pixels to average in the reference region (enter - "
                        "for default: 13)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines average in the reference region (enter - for " "default: 13)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "c0",
                    {
                        "desc": "constant value (enter - for default: 1.18e-38 for addition and "
                        "subtraction, 1.0 for multiplication and division)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflg",
                    {
                        "desc": "zero data flag (enter - for default:0):\n"
                        "0: values of 0.0 in d1 or d2 are considered as no-data and the "
                        "output is set to 0.0 (default)\n"
                        "1: values of 0.0 are considered as valid data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "float_math",
    },
    "frame": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) image data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) image data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width of input data (samples/line)\n", "optional": False, "type": "unknown"}),
                (
                    "dtype",
                    {
                        "desc": "data type:\n"
                        "0: FLOAT    (REAL*4)\n"
                        "1: FCOMPLEX (REAL*4, REAL*4)\n"
                        "2: INTEGER  (INTEGER*4)\n"
                        "3: SHORT    (INTEGER*2)\n"
                        "4: BYTE     (UNSIGNED CHAR)\n"
                        "5: SUN/BMP/TIFF format raster image (8 or 24 bits/pixel)\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                ("dx1", {"desc": "left side frame width (samples)\n", "optional": False, "type": "unknown"}),
                ("dx2", {"desc": "right side frame width (samples)\n", "optional": False, "type": "unknown"}),
                ("dy1", {"desc": "top side frame width (lines)\n", "optional": False, "type": "unknown"}),
                ("dy2", {"desc": "bottom side frame width (lines)\n", "optional": False, "type": "unknown"}),
                (
                    "null_flag",
                    {
                        "desc": "specify how a new fame is added to the existing border around the image "
                        "(enter - for default)\n"
                        "0: absolute border does not depend on the existing image pixel values "
                        "(default)\n"
                        "1: border is added to the existing image border\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "all_flag",
                    {
                        "desc": "specify classification of null values in SUN raster and BMP format files "
                        "(enter - for default)\n"
                        "0: require only one component of the pixel RGB value to be NULL in order "
                        "to belong to the NULL class (default)\n"
                        "1: require that all components of the pixel RGB value to be NULL in order "
                        "to belong to the NULL class\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "null_value",
                    {
                        "desc": "NULL value:\n"
                        "FLOAT, INTEGER, SHORT, BYTE default: 0.0\n"
                        "FCOMPLEX default: 0.0, 0.0\n"
                        "SUN/BMP/TIFF raster image default (RGB): 0 0 0\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "frame_value",
                    {
                        "desc": "FRAME value:\n"
                        "FLOAT, INTEGER, SHORT, BYTE default: 0.0\n"
                        "FCOMPLEX default: 0.0 0.0\n"
                        "SUN/BMP/TIFF raster image default (RGB): 0 0 0\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "frame",
    },
    "frost": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("pwr1", {"desc": "(input) intensity image (float)\n", "optional": False, "type": "unknown"}),
                (
                    "pwr1_frost",
                    {
                        "desc": "(output) filtered intensity image (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                ("fx", {"desc": "filter size (enter - for default: 5)\n", "optional": True, "type": "unknown"}),
                (
                    "sx",
                    {
                        "desc": "window size used for statistics (enter - for default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "power",
                    {
                        "desc": "exponent applied to window size parameter alpha (enter - for default: 1.0 "
                        "for model by Frost et al., 1982)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "frost",
    },
    "fspf": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input image data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) spatially filtered image data\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default):\n"
                        "0: FCOMPLEX\n"
                        "1: SCOMPLEX\n"
                        "2: FLOAT (default)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "r_max",
                    {
                        "desc": "maximum filter radius (range samples) (enter - for default: 64)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "spf_type",
                    {
                        "desc": "spatial filter type (enter - for default):\n"
                        "0: uniform average (default for FCOMPLEX and SCOMPLEX)\n"
                        "1: triangular weighted average: 1 - (r/r_max)\n"
                        "2: quadratic weighted average: 1 - (r/r_max)^2\n"
                        "3: Gaussian weighted average: exp(-2.*(r^2/r_max^2))\n"
                        "4: linear least-squares (default for FLOAT data)\n"
                        "5: median\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "MLI or SLC parameter file with the same number of looks as the input "
                        "image, required for GPRI data (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "fspf",
    },
    "gamma_map": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "input_data",
                    {
                        "desc": "(input) input intensity file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "output_data",
                    {
                        "desc": "(output) output intensity file (filtered)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "nlooks",
                    {"desc": "effective number of look of the input data\n", "optional": False, "type": "unknown"},
                ),
                (
                    "bx",
                    {"desc": "filter size in x direction (columns) (1,3,5...)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "by",
                    {
                        "desc": "filter size in y direction (rows) (1,3,5...) (enter - for default: by " "= bx)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gamma_map",
    },
    "gbyte2float": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) GBYTE logarithmic scaled format data (1 byte/sample)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) FLOAT format data (4 bytes/sample)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "gbyte2float",
    },
    "gc_insar": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC parameter file of reference SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(input) height map in SAR geometry (float format)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameters (characterizing map projection)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(output) geocoding lookup table (fcomplex format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "gc_insar",
    },
    "gc_map1": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI_par",
                    {
                        "desc": "(input) ISP MLI or SLC image parameter file (slant range geometry)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file (enter - if geocoding "
                        "SLC or MLI data)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file (or constant height value)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg_par",
                    {
                        "desc": "(input/output) DEM/MAP segment parameter file used for output " "products\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg",
                    {
                        "desc": "(output) DEM segment used for output products, interpolated if lat_ovr "
                        "> 1.0 or lon_ovr > 1.0\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(output) geocoding lookup table (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lat_ovr",
                    {
                        "desc": "latitude or northing output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lon_ovr",
                    {
                        "desc": "longitude or easting output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sim_sar",
                    {
                        "desc": "(output) simulated SAR backscatter image in DEM geometry\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "u",
                    {
                        "desc": "(output) zenith angle of surface normal vector n (angle between z and " "n)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "v",
                    {
                        "desc": "(output) orientation angle of n (between x and projection of n in xy " "plane)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "inc",
                    {
                        "desc": "(output) local incidence angle (between surface normal and look " "vector)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "psi",
                    {
                        "desc": "(output) projection angle (between surface normal and image plane " "normal)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "pix",
                    {
                        "desc": "(output) pixel area normalization factor\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ls_map",
                    {
                        "desc": "(output) layover and shadow map (in map projection)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "frame",
                    {
                        "desc": "number of DEM pixels to add around area covered by SAR image (enter - "
                        "for default = 8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ls_mode",
                    {
                        "desc": "output lookup table values in regions of layover, shadow, or DEM gaps "
                        "(enter - for default)\n"
                        "0: set to (0.,0.)\n"
                        "1: linear interpolation across these regions\n"
                        "2: actual value (default)\n"
                        "3: nn-thinned\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "r_ovr",
                    {
                        "desc": "range over-sampling factor for nn-thinned layover/shadow mode(enter - "
                        "for default: 2.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gc_map1",
    },
    "gc_map2": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI_par",
                    {
                        "desc": "(input) MLI or SLC image parameter file (slant range geometry)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file (or constant height value)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg_par",
                    {
                        "desc": "(output) DEM segment parameter file (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg",
                    {
                        "desc": "(output) DEM segment file (FLOAT, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(output) geocoding lookup table (FCOMPLEX, original DEM geometry) "
                        "(enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "lat_ovr",
                    {
                        "desc": "latitude or northing output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lon_ovr",
                    {
                        "desc": "longitude or easting output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ls_map",
                    {
                        "desc": "(output) layover and shadow map (UCHAR, original DEM geometry) (enter - "
                        "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ls_map_rdc",
                    {
                        "desc": "(output) layover and shadow map (UCHAR, slant range geometry) (enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "inc",
                    {
                        "desc": "(output) local incidence angle map (FLOAT, between surface normal and "
                        "look vector, original DEM geometry) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "res",
                    {
                        "desc": "(output) local resolution map (FCOMPLEX, original DEM geometry) (enter "
                        "- for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "offnadir",
                    {
                        "desc": "(output) local offnadir (or look) angle map (FLOAT, original DEM "
                        "geometry) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "sim_sar",
                    {
                        "desc": "(output) simulated SAR backscatter image (FLOAT, original DEM geometry) "
                        "(enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "u",
                    {
                        "desc": "(output) zenith angle map of surface normal vector n (FLOAT, angle "
                        "between z and n, original DEM geometry) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "v",
                    {
                        "desc": "(output) orientation angle map of n (FLOAT, between x and projection of "
                        "n in xy plane, original DEM geometry) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "psi",
                    {
                        "desc": "(output) projection angle map (FLOAT, between surface normal and image "
                        "plane normal, original DEM geometry) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "pix",
                    {
                        "desc": "(output) pixel area normalization factor map (FLOAT, enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "r_ovr",
                    {
                        "desc": "range oversampling factor (for layover-shadow calculations, enter - for "
                        "default: automatic value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_dec",
                    {
                        "desc": "azimuth decimation factor (for layover-shadow calculations, enter - for "
                        "default: automatic value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mask",
                    {
                        "desc": "mask values outside swath, use layover and shadow map as a mask (enter "
                        "- for default)\n"
                        "0: no masking (default)\n"
                        "1: masking values outside swath\n"
                        "2: masking shadow and values outside swath\n"
                        "3: masking layover, shadow and values outside swath\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "frame",
                    {
                        "desc": "number of DEM pixels to add around area covered by SAR image (enter - "
                        "for default: 8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ls_scaling",
                    {
                        "desc": "scaling of the layover and shadow maps (enter - for default)\n"
                        "0: standard values for further processing (default)\n"
                        "1: scaling optimized for visualization\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file containing offset polynomial "
                        "coefficients, for LUT and ls_map_rdc refinement (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ref_flg",
                    {
                        "desc": "reference image flag (offsets are measured relative to the reference "
                        "image) (enter - for default)\n"
                        "0: reference image is the actual SAR image\n"
                        "1: reference image is the simulated SAR image (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "inc_flg",
                    {
                        "desc": "incidence angle flag (enter - for default)\n"
                        "0: [inc] defined as local incidence angle (angle between surface normal "
                        "and look vector) (default)\n"
                        "1: [inc] defined as incidence angle (angle between ellipsoid normal and "
                        "look vector)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "gc_map2",
    },
    "gc_map_fd": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI_par",
                    {
                        "desc": "(input) ISP MLI or SLC image parameter file (slant range geometry)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "fd_tab",
                    {
                        "desc": "(input)table of doppler polynomials at uniform azimuth time steps\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file (or constant height value)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg_par",
                    {
                        "desc": "(input/output) DEM/MAP segment parameter file used for output " "products\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg",
                    {
                        "desc": "(output) DEM segment used for output products, interpolated if "
                        "lat_ovr > 1.0  or lon_ovr > 1.0\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(output) geocoding lookup table (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lat_ovr",
                    {
                        "desc": "latitude or northing output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lon_ovr",
                    {
                        "desc": "longitude or easting output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sim_sar",
                    {
                        "desc": "(output) simulated SAR backscatter image in DEM geometry\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "u",
                    {
                        "desc": "(output) zenith angle of surface normal vector n (angle between z and " "n)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "v",
                    {
                        "desc": "(output) orientation angle of n (between x and projection of n in xy " "plane)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "inc",
                    {
                        "desc": "(output) local incidence angle (between surface normal and look " "vector)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "psi",
                    {
                        "desc": "(output) projection angle (between surface normal and image plane " "normal)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "pix",
                    {
                        "desc": "(output) pixel area normalization factor\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ls_map",
                    {
                        "desc": "(output) layover and shadow map (in map projection)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "frame",
                    {
                        "desc": "number of DEM pixels to add around area covered by SAR image (enter - "
                        "for default = 8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ls_mode",
                    {
                        "desc": "output lookup table values in regions of layover, shadow, or DEM gaps "
                        "(enter - for default)\n"
                        "0: set to (0.,0.)\n"
                        "1: linear interpolation across these regions (default)\n"
                        "2: actual value\n"
                        "3: nn-thinned\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "r_ovr",
                    {
                        "desc": "range over-sampling factor for nn-thinned layover/shadow mode(enter - "
                        "for default: 2.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gc_map_fd",
    },
    "gc_map_fine": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "gc_in",
                    {
                        "desc": "(input) geocoding lookup table\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {"desc": "width of geocoding lookup table (samples)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "DIFF/GEO parameter file containing offset polynomial coefficients\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "gc_out",
                    {
                        "desc": "(output) refined geocoding lookup table\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ref_flg",
                    {
                        "desc": "reference image flag (offsets are measured relative to the "
                        "reference image): \n"
                        "0: actual SAR image\n"
                        "1: simulated SAR image (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "gc_map_fine",
    },
    "gc_map_grd": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI_par",
                    {
                        "desc": "(input) ground-range image ISP parameter file (format as " "SLC/MLI_par)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file (or constant height value)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg_par",
                    {
                        "desc": "(input/output) DEM/MAP segment parameter file used for output " "products\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg",
                    {
                        "desc": "(output) DEM segment used for output products, interpolated if "
                        "lat_ovr > 1.0  or lon_ovr > 1.0\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(output) geocoding lookup table (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lat_ovr",
                    {
                        "desc": "latitude or northing output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lon_ovr",
                    {
                        "desc": "longitude or easting output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sim_sar",
                    {
                        "desc": "(output) simulated SAR backscatter image in DEM geometry\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "u",
                    {
                        "desc": "(output) zenith angle of surface normal vector n (angle between z " "and n)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "v",
                    {
                        "desc": "(output) orientation angle of n (between x and projection of n in xy " "plane)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "inc",
                    {
                        "desc": "(output) local incidence angle (between surface normal and look " "vector)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "psi",
                    {
                        "desc": "(output) projection angle (between surface normal and image plane " "normal)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "pix",
                    {
                        "desc": "(output) pixel area normalization factor\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ls_map",
                    {
                        "desc": "(output) layover and shadow map (in map projection)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "frame",
                    {
                        "desc": "number of DEM pixels to add around area covered by SAR image (enter "
                        "- for default = 8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ls_mode",
                    {
                        "desc": "output lookup table values in regions of layover, shadow, or DEM "
                        "gaps (enter - for default)\n"
                        "0: set to (0.,0.)\n"
                        "1: linear interpolation across these regions (default)\n"
                        "2: actual value\n"
                        "3: nn-thinned\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "r_ovr",
                    {
                        "desc": "range over-sampling factor for nn-thinned layover/shadow mode(enter "
                        "- for default: 2.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gc_map_grd",
    },
    "gc_map_inversion": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "gc_map",
                    {
                        "desc": "lookup table containing pairs of real-valued coordinates " "(fcomplex)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("width_in", {"desc": "width of input lookup table lines\n", "optional": False, "type": "unknown"}),
                ("gc_map_out", {"desc": "inverted geocoding lookup table\n", "optional": False, "type": "unknown"}),
                ("width_out", {"desc": "width of output data file\n", "optional": False, "type": "unknown"}),
                (
                    "nlines_out",
                    {
                        "desc": "number of lines of output data file (enter - or 0 for default: "
                        "all lines up to highest value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "resampling interpolation mode (enter - for default)\n"
                        "0: 1/dist (default)\n"
                        "1: nearest-neighbor\n"
                        "2: 1/dist**2\n"
                        "3: constant\n"
                        "4: Gaussian\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "interpolation oversampling factor (enter - for default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rad_max",
                    {
                        "desc": "maximum interpolation search radius (enter - for default: " "4*n_ovr = 8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nintr",
                    {
                        "desc": "number of points required for interpolation when not "
                        "nearest-neighbor (enter - for default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gc_map_inversion",
    },
    "gcp_2ras": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "ras1",
                    {
                        "desc": "(input) image 1, SUN raster: *.ras, BMP: *.bmp, TIFF: *.tif\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras2",
                    {
                        "desc": "(input) image 2, SUN raster: *.ras, BMP: *.bmp, TIFF: *.tif\n"
                        "NOTE: the image depth (bits/pixel) of ras1 and ras2 must be the same\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "gcp",
                    {
                        "desc": "(output) ground control point file (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mag",
                    {
                        "desc": "zoom magnification factor (enter - for default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win_sz",
                    {
                        "desc": "zoom window size before magnification (enter - for default: 132)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gcp_2ras",
    },
    "gcp_phase": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "unw",
                    {
                        "desc": "(input) unwrapped interferometric phase\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP interferogram/offset parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "gcp",
                    {
                        "desc": "(input) ground control point data (text format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "gcp_ph",
                    {
                        "desc": "(output) ground control point data + extracted unwrapped phase " "(text)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "win_sz",
                    {
                        "desc": "window size for averaging phase for each GCP, must be odd (default: " "1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gcp_phase",
    },
    "gcp_ras": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "ras",
                    {
                        "desc": "(input) image, SUN raster: *.ras, BMP: *.bmp, TIFF: *.tif\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GCP",
                    {
                        "desc": "(output) GCP data file (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mag",
                    {
                        "desc": "zoom magnification factor (enter - for default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win_sz",
                    {
                        "desc": "zoom window size before magnification (enter - for default: 132)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gcp_ras",
    },
    "gec_map": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC-1/MLI parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file, enter - if geocoding "
                        "SLC or MLI data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "href",
                    {
                        "desc": "(input) elevation reference [m]\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg_par",
                    {
                        "desc": "(input/output) DEM segment parameter file used for geocoding\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(output) geocoding lookup table\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lat_ovr",
                    {
                        "desc": "latitude or northing output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lon_ovr",
                    {
                        "desc": "longitude or easting output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gec_map",
    },
    "gec_map_grd": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "GRD_par",
                    {
                        "desc": "(input) ground-range ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "href",
                    {
                        "desc": "(input) elevation reference [m]\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_seg_par",
                    {
                        "desc": "(input/output) DEM segment parameter file used for geocoding\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(output) geocoding lookup table\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lat_ovr",
                    {
                        "desc": "latitude or northing output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lon_ovr",
                    {
                        "desc": "longitude or easting output DEM oversampling factor (enter - for " "default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "gec_map_grd",
    },
    "geocode": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "lookup_table",
                    {
                        "desc": "(input) lookup table containing pairs of real-valued output data " "coordinates\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_in",
                    {
                        "desc": "(input) data file (format as specified by format_flag parameter)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width_in",
                    {
                        "desc": "width of input data file and gc_map lookup table\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width_out", {"desc": "width of output data file\n", "optional": False, "type": "unknown"}),
                (
                    "nlines_out",
                    {
                        "desc": "number of lines for the output data file (enter - or 0 for default: all " "lines)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "resampling interpolation mode (enter - for default)\n"
                        "0: 1/dist (default)\n"
                        "1: nearest neighbor\n"
                        "2: SQR(1/dist)\n"
                        "3: constant\n"
                        "4: Gauss weighting\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input/output data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "2: Sun/BMP/TIFF 8 or 24-bit raster image\n"
                        "3: UNSIGNED CHAR\n"
                        "4: SHORT\n"
                        "5: SCOMPLEX\n"
                        "6: DOUBLE\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "lr_in",
                    {
                        "desc": "input  Sun/BMP/TIFF raster image flipped left/right (enter - for "
                        "default: 1: not flipped (default), -1: flipped)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lr_out",
                    {
                        "desc": "output Sun/BMP/TIFF raster image flipped left/right (enter - for "
                        "default: 1: not flipped (default), -1: flipped)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "interpolation oversampling factor (enter - for default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rad_max",
                    {
                        "desc": "maximum interpolation search radius (enter - for default 4*n_ovr: 8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nintr",
                    {
                        "desc": "number of points required for interpolation when not nearest neighbor "
                        "(enter - for default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "geocode",
    },
    "geocode_back": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) data file (format as specified by format_flag parameter)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width_in", {"desc": "width of input data file\n", "optional": False, "type": "unknown"}),
                (
                    "lookup_table",
                    {
                        "desc": "(input) lookup table containing pairs of real-valued input data " "coordinates\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width_out",
                    {
                        "desc": "width of gc_map lookup table, output file has the same width\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines_out",
                    {
                        "desc": "number of lines of output data file (enter - or 0 for default: "
                        "number of lines in gc_map)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n"
                        "0: nearest-neighbor\n"
                        "1: bicubic spline (default)\n"
                        "2: bicubic-log spline, interpolates log(data)\n"
                        "3: bicubic-sqrt spline, interpolates sqrt(data)\n"
                        "4: B-spline interpolation (default B-spline degree: 5)\n"
                        "5: B-spline interpolation sqrt(x) (default B-spline degree: 5)\n"
                        "6: Lanczos interpolation (default Lanczos function order: 5)\n"
                        "7: Lanczos interpolation sqrt(x) (default Lanczos function order: "
                        "5)\n"
                        "NOTE: log and sqrt interpolation modes should only be used with "
                        "non-negative data!\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input/output data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "2: SUN/BMP/TIFF 8 or 24-bit raster image\n"
                        "3: UNSIGNED CHAR\n"
                        "4: SHORT\n"
                        "5: DOUBLE\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "lr_in",
                    {
                        "desc": "input  SUN/BMP/TIFF raster image flipped left/right (enter - for "
                        "default: 1: not flipped (default), -1: flipped)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lr_out",
                    {
                        "desc": "output SUN/BMP/TIFF raster image flipped left/right (enter - for "
                        "default: 1: not flipped (default), -1: flipped)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos function order or B-spline degree (2->9) (enter - default: " "5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "e_flag",
                    {
                        "desc": "extrapolation flag (enter - for default)\n"
                        "0: do not extrapolate (default)\n"
                        "1: extrapolate up to 0.5 pixels beyond input edges\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "geocode_back",
    },
    "get_data_values": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "par/width",
                    {
                        "desc": "(input) SLC/MLI, DEM, DIFF/GEO or ISP offset/interferogram "
                        "parameter file for input data, or width of input data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "positions",
                    {
                        "desc": "(input) text file containing list of positions:\n"
                        "no DEM parameter file provided: column number, row number (can "
                        "be integer or real values)\n"
                        "DEM parameter file provided: longitude, latitude (EQA) or "
                        "easting, northing (map coordinates, e.g. UTM)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "report",
                    {
                        "desc": "(output) text file containing extracted values\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "data extraction mode (enter - for default)\n"
                        "0 : extract values along the profile connecting the indicated "
                        "positions (default)\n"
                        "1 : extract values in the polygon region specified by the "
                        "indicated positions\n"
                        "2 : extract values at the indicated positions\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: DOUBLE\n"
                        "2: INT\n"
                        "3: SHORT\n"
                        "4: SCOMPLEX\n"
                        "5: FCOMPLEX\n"
                        "6: UNSIGNED CHAR\n"
                        "7: SUN/BMP/TIFF raster image\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n"
                        "0: nearest-neighbor\n"
                        "1: bicubic spline (default)\n"
                        "2: bicubic-log spline, interpolates log(data)\n"
                        "3: bicubic-sqrt spline, interpolates sqrt(data)\n"
                        "4: B-spline interpolation (default B-spline degree: 5)\n"
                        "5: B-spline interpolation sqrt(x) (default B-spline degree: 5)\n"
                        "6: Lanczos interpolation (default Lanczos function order: 5)\n"
                        "7: Lanczos interpolation sqrt(x) (default Lanczos function "
                        "order: 5)\n"
                        "NOTE: log and sqrt interpolation modes should only be used with "
                        "non-negative data!\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos function order or B-spline degree (2->9) (enter - " "default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zero_flag",
                    {
                        "desc": "interpretation of 0.0 values (enter - for default)\n"
                        "0: 0.0 indicates missing value (default)\n"
                        "1: 0.0 is a valid value\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "print_flag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print values at all positions (default)\n"
                        "1: print only positions with valid data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "get_data_values",
    },
    "get_value": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "PAR_in",
                    {"desc": "input  keyword:value based parameter file\n", "optional": False, "type": "unknown"},
                ),
                ("keyword", {"desc": "search keyword of keyword:value pair\n", "optional": False, "type": "unknown"}),
            ]
        ),
        "program": "get_value",
    },
    "grasses": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "int",
                    {
                        "desc": "(input) interferogram filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "flag",
                    {
                        "desc": "(input) unwrapping flag filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "unw",
                    {
                        "desc": "(output) unwrapped phase filename\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                ("xmin", {"desc": "starting range pixel offset (default = 0)\n", "optional": True, "type": "unknown"}),
                ("xmax", {"desc": "last range pixel offset (default=width-1)\n", "optional": True, "type": "unknown"}),
                (
                    "ymin",
                    {
                        "desc": "starting azimuth row offset, relative to start (default = 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ymax",
                    {
                        "desc": "last azimuth row offset, relative to start (default = nlines-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xinit",
                    {
                        "desc": "starting range pixel for unwrapping (default = width/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yinit",
                    {"desc": "starting row to unwrap (default = height/2)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "init_ph",
                    {
                        "desc": "flag to set phase at starting point to 0.0 (default 0: not set to 0.0, "
                        "1: set to 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "grasses",
    },
    "hgt_map": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "unw",
                    {
                        "desc": "(input) unwrapped interferometric phase\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP parameter file for the reference SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram processing parameters\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "baseline",
                    {
                        "desc": "(input) baseline parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(output) height file (in slant range geometry) relative to the WGS-84 " "ellipsoid\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "gr",
                    {
                        "desc": "(output) cross-track ground ranges on the WGS-84 ellipsoid (in slant "
                        "range geometry)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ph_flag",
                    {
                        "desc": "restore phase slope flag (0:no phase change  default=1:add back phase " "ramp)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("loff", {"desc": "offset to starting line (default = 0)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines to calculate (enter - for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) parameter file of resampled SLC, required if SLC-2 frequency "
                        "differs from SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "hgt_map",
    },
    "hist_IQ": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "historgram",
                    {
                        "desc": "(output) histogram (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset (default = parameter file value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to estimate historgram (default=1024)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "hist_IQ",
    },
    "histogram": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("data_in", {"desc": "(input) input data (float)\n", "optional": False, "type": "unknown"}),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "polygon",
                    {
                        "desc": "(input) polygon data file containing vertices of N polygons (enter - "
                        "to use all the input data)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "hist",
                    {
                        "desc": "(output) histogram values as a table (text format)\n"
                        "format: data_value  data_fraction[0]  "
                        "data_fraction[1]....data_fraction[N-1]\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "stat",
                    {
                        "desc": "(output) mean, standard deviation, and sum of values (text format)\n"
                        "format: POLYGON:  ID   mean   standard_deviation  sum\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("min", {"desc": "minimum histogram value\n", "optional": False, "type": "unknown"}),
                ("max", {"desc": "maximum histogram value\n", "optional": False, "type": "unknown"}),
                (
                    "nbins",
                    {
                        "desc": "number of histogram bins (enter - for default: 50)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "processing mode (enter - for default)\n"
                        "0: histogram and statistics are calculated for each polygonal region "
                        "(default)\n"
                        "1: histogram and statistics are calculated for samples within the "
                        "union of all the polygonal regions\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "lin_log",
                    {
                        "desc": "data scaling (enter - for default)\n"
                        "0: linear scaling (default)\n"
                        "1: data are logarithmic scale (dB values)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "histogram",
    },
    "histogram_ras": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "ras_in",
                    {
                        "desc": "(input) raster image, SUN raster *.ras, BMP *.bmp, or TIFF *.tif "
                        "format, 8 bits/pixel\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("polygon", {"desc": "polygon data file\n", "optional": False, "type": "unknown"}),
                ("histograms", {"desc": "calculated histograms (output)\n", "optional": False, "type": "unknown"}),
                ("mean/stdev", {"desc": "calculated mean/stdev (output)\n", "optional": False, "type": "unknown"}),
                (
                    "percent",
                    {
                        "desc": "histogram in terms of percent of total pixels (output)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "lr_flag",
                    {
                        "desc": "input left/right flipped (default=1: flipped; -1: not flipped)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("start", {"desc": "first histogram class (default=0)\n", "optional": True, "type": "unknown"}),
                ("stop", {"desc": "last histogram class (default=all values)\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "histogram_ras",
    },
    "hsi_color_scale": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "file_out",
                    {
                        "desc": "(output) (24-bit) SUN/BMP/TIFF format raster image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nval",
                    {
                        "desc": "number of discrete color values to display (enter - for "
                        "default)\n"
                        "0: continuous color wheel (default)\n",
                        "enum": [0],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "chip_width",
                    {"desc": "width of color chips (enter - for default: 16)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "gap",
                    {
                        "desc": "number of pixels between color chips (enter - for default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "height",
                    {
                        "desc": "height of color scale (enter - for default: chip_width)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "hsi_color_scale",
    },
    "image_stat": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "image",
                    {
                        "desc": "(input) image data file (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "image line width (samples/line)\n", "optional": False, "type": "unknown"}),
                (
                    "roff",
                    {
                        "desc": "sample offset to region start (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "line offset to region start (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "region width (samples, enter - for default: width - roff)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines in the region (enter - for default: image_lines - " "loff)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "report",
                    {
                        "desc": "output text file (keyword:value format, enter - for none)\n"
                        "keywords: file, mean, stdev, total_samples, non_zero_samples, "
                        "fraction_valid, min, max, median\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "median_flg",
                    {
                        "desc": "median calculation flag (enter - for default)\n"
                        "0: do not calculate median\n"
                        "1: calculate median (default, memory use may be large)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "image_stat",
    },
    "init_offset": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rlks", {"desc": "number of range looks (default: 1)\n", "optional": True, "type": "unknown"}),
                ("azlks", {"desc": "number of azimuth looks (default: 1)\n", "optional": True, "type": "unknown"}),
                (
                    "rpos",
                    {
                        "desc": "center of patch in range (samples) (enter - for default: image " "center)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azpos",
                    {
                        "desc": "center of patch in azimuth (lines) (enter - for default: image " "center)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offr",
                    {
                        "desc": "initial range offset (samples) (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offaz",
                    {
                        "desc": "initial azimuth offset (lines) (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (enter - for default: 0.150)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("rwin", {"desc": "range window size (default: 512)\n", "optional": True, "type": "unknown"}),
                ("azwin", {"desc": "azimuth window size (default: 512)\n", "optional": True, "type": "unknown"}),
                (
                    "cflag",
                    {
                        "desc": "copy offsets to the range and azimuth offset polynomials in the "
                        "OFF_par (enter - for default)\n"
                        "0: do not copy\n"
                        "1: copy constant range and azimuth offset (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "deramp",
                    {
                        "desc": "deramp SLC phase flag (enter - for default)\n"
                        "0: no deramp (Doppler centroid close to 0) (default)\n"
                        "1: deramp SLC phase\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "init_offset",
    },
    "init_offset_orbit": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input/output) ISP/offset parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rpos",
                    {
                        "desc": "range position for offset estimation (enter - for default: " "center of SLC-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azpos",
                    {
                        "desc": "azimuth position for offset estimation (enter - for default: " "center of SLC-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cflag",
                    {
                        "desc": "copy offsets to the range and azimuth offset polynomials in "
                        "the OFF_par\n"
                        "0: do not copy\n"
                        "1: copy constant range and azimuth offset (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "init_offset_orbit",
    },
    "init_offset_orbitm": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI1_par",
                    {
                        "desc": "(input) MLI-1 image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI2_par",
                    {
                        "desc": "(input) MLI-2 image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input/output) DIFF/GEO parameter file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rpos",
                    {
                        "desc": "range position for offset estimation (enter - for default: " "center of MLI-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azpos",
                    {
                        "desc": "azimuth position for offset estimation (enter - for default: " "center of MLI-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cflag",
                    {
                        "desc": "copy offsets to the range and azimuth offset polynomials in "
                        "the DIFF_par\n"
                        "0: do not copy\n"
                        "1: copy constant range and azimuth offsets (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "init_offset_orbitm",
    },
    "init_offsetm": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI-1",
                    {"desc": "(input) intensity image 1 (float) (reference)\n", "optional": False, "type": "unknown"},
                ),
                ("MLI-2", {"desc": "(input) intensity image 2 (float)\n", "optional": False, "type": "unknown"}),
                ("DIFF_par", {"desc": "DIFF/GEO parameter file\n", "optional": False, "type": "unknown"}),
                (
                    "rlks",
                    {"desc": "number of range looks (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "azlks",
                    {"desc": "number of azimuth looks (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "rpos",
                    {
                        "desc": "center of region for comparison in range (enter - for default: " "image center)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azpos",
                    {
                        "desc": "center of region for comparison in azimuth (enter - for default: " "image center)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offr",
                    {
                        "desc": "initial range offset (enter - for default from DIFF_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offaz",
                    {
                        "desc": "initial azimuth offset (enter - for default from DIFF_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "correlation SNR threshold (enter -  for default:  0.150)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "patch",
                    {
                        "desc": "correlation patch size (enter - for default: 512)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cflag",
                    {
                        "desc": "copy offsets to the range and azimuth offset polynomials in "
                        "DIFF_par (enter - for default)\n"
                        "0: do not copy\n"
                        "1: copy constant range and azimuth offsets (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "init_offsetm",
    },
    "interf_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-1",
                    {
                        "desc": "(output) multi-look intensity image 1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2",
                    {
                        "desc": "(output) multi-look intensity image 2\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("interf", {"desc": "interferogram from SLC-1 and SLC-2\n", "optional": False, "type": "unknown"}),
                (
                    "nrlk",
                    {"desc": "number of interferogram range looks (default: 2)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nazlk",
                    {
                        "desc": "number of interferogram azimuth looks (default: 10)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to starting line of interferogram (relative to start of "
                        "SLC-1) (default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nltot",
                    {
                        "desc": "number of SLC lines to process (default: 0, to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rfilt",
                    {
                        "desc": "range common band filtering flag\n0: OFF\n1: ON (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "azfilt",
                    {
                        "desc": "azimuth common band filtering flag\n0: OFF\n1: ON (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "s_off",
                    {
                        "desc": "offset to the nominal range spectral shift (frac. of range sampling "
                        "freq.) (default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "interf_SLC",
    },
    "interp_ad": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) data with gaps\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) data with gaps filled by interpolation\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "r_max",
                    {
                        "desc": "maximum interpolation window radius (default(-): 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "np_min",
                    {
                        "desc": "minimum number of points used for the interpolation (default(-): " "16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "np_max",
                    {
                        "desc": "maximum number of points used for the interpolation (default(-): " "16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "w_mode",
                    {
                        "desc": "data weighting mode (enter - for default):\n"
                        "0: constant\n"
                        "1: 1 - (r/r_max)\n"
                        "2: 1 - (r/r_max)**2  (default)\n"
                        "3: exp(-2.*(r**2/r_max**2))\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input and output data type:\n"
                        "0: FCOMPLEX\n"
                        "1: SCOMPLEX\n"
                        "2: FLOAT (default)\n"
                        "3: INT\n"
                        "4: SHORT\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "cp_data",
                    {
                        "desc": "copy data flag:\n"
                        "0: do not copy input data values to output\n"
                        "1: copy input data values to output (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "interp_ad",
    },
    "interp_data": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "data2",
                    {
                        "desc": "(input) input data file (format as specified by format_flag " "parameter)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file containing range and azimuth offset "
                        "polynomial coefficients\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2_out",
                    {
                        "desc": "(output) resampled data2, dimensions determined by data1 in the " "DIFF_par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode:\n"
                        "0: nearest-neighbor\n"
                        "1: bicubic spline (default)\n"
                        "2: bicubic spline log(x)\n"
                        "3: bicubic spline sqrt(x)\n"
                        "4: B-spline interpolation (default B-spline degree: 5)\n"
                        "5: B-spline interpolation sqrt(x) (default B-spline degree: 5)\n"
                        "6: Lanczos interpolation (default Lanczos function order: 5)\n"
                        "7: Lanczos interpolation sqrt(x) (default Lanczos function order: "
                        "5)\n"
                        "NOTE: log and sqrt interpolation modes should only be used with "
                        "non-negative data!\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input and output data format\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "2: SUN/BMP/TIFF format raster image\n"
                        "3: UNSIGNED CHAR\n"
                        "4: SHORT\n"
                        "5: DOUBLE\n"
                        "6: SCOMPLEX\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos function order or B-spline degree (2->9) (enter - default: " "5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "interp_data",
    },
    "kml2poly": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "kml",
                    {
                        "desc": "(input) KML file containing georeferenced polygon corner coordinates\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "poly",
                    {
                        "desc": "(output) file containing polygon corner coordinates\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "kml2poly",
    },
    "kml_map": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "image",
                    {
                        "desc": "(input) URL of background image in bmp, png or jpg format, \n"
                        "needs to be in EQA projection with WGS84 for Google Earth\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dem_par",
                    {
                        "desc": "(input) corresponding dem_par file \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "kml",
                    {
                        "desc": "(output) kml output file (default = *.kml)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "kml_map",
    },
    "kml_plan": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "MLI_par",
                    {
                        "desc": "(input) MLI or SLC image parameter file (slant range geometry)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(input) geocoding lookup table (fcomplex, original DEM geometry)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "kml",
                    {
                        "desc": "(output) kml output file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "geoid",
                    {
                        "desc": "(input) global geoid (float, egm96 or egm2008) or constant geoid "
                        "height value (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "geoid_par",
                    {
                        "desc": "(input) global geoid DEM_par file (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "extension",
                    {
                        "desc": "extension length before and after acquisition for waypoint calculation "
                        "(enter - for default: 1852.0 m)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "flight_path",
                    {
                        "desc": "flight path visualization option: (enter - for default)\n"
                        "0: show flight path and flight path clamped to the ground (default)\n"
                        "1: do not show the flight path clamped to the ground\n"
                        "2: do not show the flight path\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "t_event",
                    {
                        "desc": 'additional event markers are added "t_event" seconds ahead of the '
                        "actual event markers (enter - for default: 0.0 seconds)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pt_list",
                    {
                        "desc": "(input) list of points triggering event markers (three columns, csv "
                        "format: pt_name; east/lon/c; north/lat/s) (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "kml_plan",
    },
    "kml_pt": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "table",
                    {
                        "desc": "(input) ASCII file with columns of latitude, longitude and value\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lat_col",
                    {
                        "desc": "column number containing latitude information (WGS84, decimal)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "lon_col",
                    {
                        "desc": "column number containing longitude information (WGS84, decimal)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "val1_col",
                    {
                        "desc": "column number containing the value for red/hue (enter - if not " "available)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "val1_label",
                    {
                        "desc": "label of val1_col (enter - if values shall be omitted in the pop-up " "window)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "val2_col",
                    {
                        "desc": "column number containing the value for green/brightness (enter - if not "
                        "available)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "val2_label",
                    {
                        "desc": "label of val2_col (enter - if values shall be omitted in the pop-up " "window)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "val3_col",
                    {
                        "desc": "column number containing the value for blue/saturation (enter - if not "
                        "available)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "val3_label",
                    {
                        "desc": "label of val3_col (enter - if values shall be omitted in the pop-up " "window)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "id_col",
                    {
                        "desc": "column number containing the id values (enter - if no ID values shall be "
                        "displayed)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "kml",
                    {
                        "desc": "(output) kml output file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "icon_URL",
                    {
                        "desc": "Uniform Resource Locator to the master icon (enter - for default: "
                        "https://www.gamma-rs.ch/images/media/kml/images/button_master.png)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "logo_URL",
                    {
                        "desc": "Uniform Resource Locator to the logo image (enter - for none, enter "
                        '"gamma" for gamma logo: '
                        "https://www.gamma-rs.ch/images/media/kml/images/gamma_logo.png)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "legend_URL",
                    {
                        "desc": "Uniform Resource Locator to the legend image (use a vertical legend, "
                        "enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "color_model",
                    {
                        "desc": "color model selection flag: (enter - for default)\n"
                        "0: RGB color model (default)\n"
                        "1: HLS (double hexagon color model)\n"
                        "2: HSV (single hexagon color model)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "h0",
                    {
                        "desc": "starting hue (color for starting value, enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "hrange",
                    {
                        "desc": "range of hue values in degrees (-360. ... 360., enter - for default: " "360.)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "imin",
                    {
                        "desc": "minimum brightness value (0.0 ... 1.0, enter - for default: 0.15)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "imax",
                    {
                        "desc": "maximum brightness value (0.0 ... 1.0, enter - for default: 0.85)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sat_min",
                    {
                        "desc": "minimum color saturation value (0.0 ... 1.0, enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sat_max",
                    {
                        "desc": "maximum color saturation value (0.0 ... 1.0, enter - for default: 1.0)\n"
                        "Scaling parameters for val1:\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sc1",
                    {
                        "desc": "scaling model flag (enter - for default)\n"
                        "0: linear (default)\n"
                        "1: log\n"
                        "2: power-law\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "A1",
                    {
                        "desc": "scaling parameter A (minimum or scale; enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "B1",
                    {
                        "desc": "scaling parameter B (maximum or exponent; enter - for default: 6.2832)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cyclic1",
                    {
                        "desc": "cyclic scaling model (enter - for default)\n"
                        "0: no\n"
                        "1: yes (default)\n"
                        "Scaling parameters for val2:\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sc2",
                    {
                        "desc": "scaling model flag (enter - for default)\n"
                        "0: linear\n"
                        "1: log\n"
                        "2: power-law (default)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "A2",
                    {
                        "desc": "scaling parameter A (minimum or scale; enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "B2",
                    {
                        "desc": "scaling parameter B (maximum or exponent; enter - for default: 0.35)\n"
                        "Scaling parameters for val3:\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "start_f1",
                    {
                        "desc": "scaling model flag (enter - for default)\n"
                        "0: linear (default)\n"
                        "1: log\n"
                        "2: power-law\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "start_f2",
                    {
                        "desc": "scaling parameter A (minimum or scale; enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "icon_sz",
                    {
                        "desc": "scaling parameter B (maximum or exponent; enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dir_name",
                    {
                        "desc": "directory name for the KML tiles (enter - for default: kml)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "kml_pt",
    },
    "lee": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "input_data",
                    {
                        "desc": "(input) input intensity file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "output_data",
                    {
                        "desc": "(output) output intensity file (filtered)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                ("nlooks", {"desc": "number of looks\n", "optional": False, "type": "unknown"}),
                (
                    "bx",
                    {"desc": "filter size in x direction (number of cols) \n", "optional": False, "type": "unknown"},
                ),
                (
                    "by",
                    {
                        "desc": "filter size in y direction (number of rows) (enter - for default: by = " "bx)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "lee",
    },
    "lin_comb": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("nfiles", {"desc": "number of input data files\n", "optional": False, "type": "unknown"}),
                ("f1", {"desc": "(input) 1. input data file (float)\n", "optional": False, "type": "unknown"}),
                ("f2", {"desc": "(input) 2. input data file (float)\n", "optional": False, "type": "unknown"}),
                ("constant", {"desc": "constant value to add to output\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "lin_comb",
    },
    "lin_comb_cpx": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("nfiles", {"desc": "number of input data files\n", "optional": False, "type": "unknown"}),
                (
                    "f1",
                    {
                        "desc": "(input) 1. input data file (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "f2",
                    {
                        "desc": "(input) 2. input data file (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "constant_r",
                    {"desc": "constant value (real part) to add to output\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "lin_comb_cpx",
    },
    "lin_comb_ref": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("f1", {"desc": "(input) input data file 1 (float)\n", "optional": False, "type": "unknown"}),
                (
                    "f2",
                    {
                        "desc": "(input) input data file 2,  reference scene if this mode selected "
                        "by selecting a region with roff and loff (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("constant", {"desc": "constant value to add to output\n", "optional": False, "type": "unknown"}),
                ("factor1", {"desc": "factor1 to multiply with f1\n", "optional": False, "type": "unknown"}),
                (
                    "factor2",
                    {
                        "desc": "factor2 to multiply with f2, or reference region average, set to "
                        "-1.0 to subtract reference region value\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "f_out",
                    {
                        "desc": "(output) output file (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "roff",
                    {
                        "desc": "range pixel offset to center of the reference region in f2, "
                        "(default: -1, otherwise center of reference region)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {"desc": "line offset to center of the reference region\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nr",
                    {
                        "desc": "number of range pixels to average in the reference region (enter - "
                        "for default = 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines average in the reference region (enter - for " "default= 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflag",
                    {
                        "desc": "interpretation of 0.0 data values:\n"
                        "0: interpreted as missing value (default)\n"
                        "1: 0.0 is valid data value\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "lin_comb_ref",
    },
    "line_interp": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "input",
                    {"desc": "file   input data containing 0.0 values (float) \n", "optional": True, "type": "unknown"},
                )
            ]
        ),
        "program": "line_interp",
    },
    "linear_to_dB": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("data_in", {"desc": "(input) image data file (float)\n", "optional": False, "type": "unknown"}),
                (
                    "data_out",
                    {
                        "desc": "(output) output image data file (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "inverse_flag",
                    {
                        "desc": "flag indicating direction of conversion (default=0)\n"
                        "0: converts linear scale (input) to dB scale (output)\n"
                        "1: converts dB values (input) to linear scale (output))\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "null_value",
                    {
                        "desc": "null value to use for values that are <= 0 in linear scale, " "default=0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "linear_to_dB",
    },
    "lk_vec_lt": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI_par",
                    {
                        "desc": "(input) ISP MLI/SLC image parameter file\n"
                        "NOTE: MLI_par must have the same dimensions and number of looks as "
                        "the image used to calculate the geocoding lookup table\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file or constant height value\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lt",
                    {
                        "desc": "(input) geocoding lookup table with same dimensions as DEM\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lv_theta",
                    {
                        "desc": "(output) SAR look-vector elevation angle with respect to the "
                        "topocentric horizontal plane at each map pixel (enter - for none)\n"
                        "lv_theta: PI/2 -> up  -PI/2 -> down\n"
                        "The elevation angle is measured between the local topocentric "
                        "horizontal plane and the look vector pointing at the radar\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lv_phi",
                    {
                        "desc": "(output) SAR look-vector orientation angle in the topocentric "
                        "horizontal plane at each map pixel (enter - for none)\n"
                        "lv_phi: 0 -> East  PI/2 -> North\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lv_ENU",
                    {
                        "desc": "(output) unit look vector (pointing from SAR sensor to ground) given "
                        "in East, North, Up (ENU) topocentric coordinates at each map pixel "
                        "(float) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "azv_ENU",
                    {
                        "desc": "(output) unit vector in the positive azimuth direction, East, North, "
                        "Up (ENU) topocentric coordinates (float) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "lk_vec_lt",
    },
    "look_vector": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC or MLI image parameter file (slant range geometry\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file (enter - for SLC or " "MLI data)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file or constant height value\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lv_theta",
                    {
                        "desc": "(output) SAR look vector elevation angle at each map pixel\n"
                        "lv_theta: PI/2 -> up  -PI/2 -> down\n"
                        "The elevation angle is measured between the surface and the look "
                        "vector pointing at the radar\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lv_phi",
                    {
                        "desc": "(output) SAR look vector orientation angle at each map pixel\n"
                        "lv_phi: 0 -> East  PI/2 -> North\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "look_vector",
    },
    "looks": {"module": "LAT", "params": OrderedDict(), "program": "looks"},
    "ls_map_mask": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "ls_map",
                    {
                        "desc": "(input) layover and shadow map (UNSIGNED CHAR)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width of input data\n", "optional": False, "type": "unknown"}),
                (
                    "mask",
                    {
                        "desc": "(output) output mask in SUN raster *.ras, BMP *.bmp, or TIFF *.tif " "format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outside_swath",
                    {
                        "desc": "flag for data outside of the swath (enter - for default)\n"
                        "0: do not mask areas outside of the swath\n"
                        "1: mask areas outside of the swath (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "regular",
                    {
                        "desc": "flag for areas within the swath and unaffected by layover or shadow "
                        "(enter - for default)\n"
                        "0: do not mask areas within the swath and unaffected by layover or "
                        "shadow (default)\n"
                        "1: mask areas within the swath and unaffected by layover or "
                        "shadow\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "layover",
                    {
                        "desc": "flag for layover areas (enter - for default)\n"
                        "0: do not mask layover areas\n"
                        "1: mask layover areas (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "shadow",
                    {
                        "desc": "flag for shadow areas (enter - for default)\n"
                        "0: do not mask shadow areas\n"
                        "1: mask shadow areas (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "shadow_in_layover",
                    {
                        "desc": 'flag for "shadow in layover" areas (enter - for default)\n'
                        '0: do not mask "shadow in layover" areas\n'
                        '1: mask "shadow in layover" areas (default)\n',
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ls_map_mask",
    },
    "m-alpha": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "s0",
                    {
                        "desc": "(input) Stokes parameter for the total power in the H and V "
                        "polarizations <|E_h|**2 + |E_v|**2>\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "m",
                    {
                        "desc": "(input) degree of polarization: sqrt(s1**2 + s2**2 + s3**2)/s0 " "(float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "alpha",
                    {
                        "desc": "(input) 0.5*atan(sqrt(s1**2 + s2**2)/s3):\n"
                        "0.0  < alpha < PI/4 LCP\n"
                        "PI/4 < alpha < PI/2 RCP\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "S_par",
                    {
                        "desc": "(input) MLI image parameter file associated with the Stokes parameter " "data files\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "c1",
                    {
                        "desc": "(output) s0 * m * (1 + cos(2*alpha))/2 (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "c2",
                    {
                        "desc": "(output) s0 * (1.0-m) depolarized component (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "m-alpha",
    },
    "m-chi": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "s0",
                    {
                        "desc": "(input) Stokes parameter for the total power in the H and V polarizations "
                        "<|E_h|**2 + |E_v|**2>\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "m",
                    {
                        "desc": "(input) degree of polarization: sqrt(s1**2 + s2**2 + s3**2)/s0 (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "s2chi",
                    {
                        "desc": "(input) sin(2*chi) = s3/(m*s0), 2*chi: latitude of the Stokes vector on "
                        "the Poincare sphere\n"
                        "sin(2*chi) > 0  measured field is LCP\n"
                        "sin(2*chi) < 0  measured field is RCP\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "S_par",
                    {
                        "desc": "(input) MLI image parameter file associated with the Stokes parameter " "data files\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "c1",
                    {
                        "desc": "(output) s0 * m * (1 + sin(2*chi))/2 (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "c2",
                    {
                        "desc": "(output) s0 * (1.0-m) depolarized component (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "m-chi",
    },
    "m-delta": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "s0",
                    {
                        "desc": "(input) Stokes parameter for the total power in the H and V "
                        "polarizations <|E_h|**2 + |E_v|**2>\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "m",
                    {
                        "desc": "(input) degree of polarization: sqrt(s1**2 + s2**2 + s3**2)/s0 " "(float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "delta",
                    {
                        "desc": "(input) relative H-V phase: atan(s3/s2):\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "S_par",
                    {
                        "desc": "(input) MLI image parameter file associated with the Stokes parameter " "data files\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "c1",
                    {
                        "desc": "(output) s0 * m * (1 + sin(delta))/2 (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "c2",
                    {
                        "desc": "(output) s0 * (1.0-m) depolarized component (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "m-delta",
    },
    "map_section": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file describing the input map geometry\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "n1",
                    {
                        "desc": "northing map coordinate of the upper-left corner of the map segment "
                        "(enter - to use the value in the DEM_par)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "e1",
                    {
                        "desc": "easting  map coordinate of the upper-left corner of the map segment "
                        "(enter - to use the value in the DEM_par)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "n2",
                    {
                        "desc": "northing map coordinate of the lower-right corner of the map "
                        "segment (enter - to use the value in the DEM_par)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "e2",
                    {
                        "desc": "easting  map coordinate of the lower-right corner of the map "
                        "segment (enter - to use the value in the DEM_par)\n"
                        "NOTE: units for the corner coordinates depend on the projection "
                        "specified in the DEM_par\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "post_north",
                    {
                        "desc": "posting of the output lookup table for map samples in northing "
                        "(enter - to keep the posting in the DEM_par)\n"
                        "NOTE: post_north must be a negative number to prevent the DEM from "
                        "flipping north/south when displayed\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "post_east",
                    {
                        "desc": "posting of the output lookup table in map coordinates in easting  "
                        "(enter - to keep the posting in the DEM_par)\n"
                        "NOTE: post_east must be a positive number to prevent the DEM from "
                        "flipping east/west when displayed\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "DEM_par2",
                    {
                        "desc": "(output) DEM parameter file describing the output lookup table\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lt",
                    {
                        "desc": "(input) geocoding lookup table for the transformation from map "
                        "geometry to radar Range-Doppler Coordinates (RDC) (enter - for "
                        "none)\n"
                        "NOTE: The lookup table has the dimensions described by the "
                        "DEM_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ISP_par1",
                    {
                        "desc": "(input) image parameter file (MLI_par or SLC_par) of the data used "
                        "for calculation of the input lookup table values (enter - for "
                        "none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ISP_par2",
                    {
                        "desc": "(input) image parameter file (MLI_par or SLC_par) of the data that "
                        "will be terrain geocoded with the new lookup table lt2 (enter - to "
                        "be the same as ISP_par1)\n"
                        "NOTE: Must be generated from the same SLC image as MLI_par but "
                        "differs in the number of range and azimuth looks\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "cflg",
                    {
                        "desc": "lookup table coordinate shift flag (enter - for default):\n"
                        "0: leave output lookup table values unchanged (default)\n"
                        "The output lookup table values are coordinates defined by the "
                        "ISP_par1 parameters\n"
                        "1: subtract range and azimuth offsets from the output lookup table "
                        "values\n"
                        "The output lookup table values are coordinates defined by the "
                        "bounding box of the specified region (coords)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lt2",
                    {
                        "desc": "(output) resampled geocoding lookup table with the specified bounds "
                        "and map posting (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "coord",
                    {
                        "desc": "(output) rectangular region coordinates covering the region of the "
                        "lt2 lookup table (text format, enter - for none)\n"
                        "ISP_par1 geometry: range_offset  range samples   azimuth_offset  "
                        "azimuth_lines\n"
                        "ISP_par2 geometry: range_offset  range samples   azimuth_offset  "
                        "azimuth_lines\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {
                        "desc": "number of samples per line of lt2, (enter - for default, calculated "
                        "from (east1 - east2))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines in the output lt2, (enter - for default, calculated "
                        "from (north1 - north2))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "map_section",
    },
    "map_trans": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DEM1_par",
                    {
                        "desc": "(input) DEM parameter file of input data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data1",
                    {
                        "desc": "(input) input data in the geometry of DEM1_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM2_par",
                    {
                        "desc": "(input/output) DEM parameter file of the output data\n"
                        "NOTE: if DEM2_par does not exist, it is created using the map "
                        "projection parameters from DEM1_par\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(output) input data1 resampled into the geometry of DEM2_par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lat_ovr",
                    {
                        "desc": "lat, northing, or S map projection oversampling factor (enter - for "
                        "default: 2.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lon_ovr",
                    {
                        "desc": "lon, easting, or C map projection oversampling factor (enter - for "
                        "default: 2.0)\n"
                        "NOTE: lat_ovr and lon_ovr are only considered if DEM2_par does not "
                        "exist\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode (enter - for default):\n"
                        "0: nearest neighbor\n"
                        "1: bicubic spline (default)\n"
                        "2: bicubic spline log(x)\n"
                        "3: bicubic spline sqrt(x)\n"
                        "4: B-spline interpolation (default B-spline degree: 5)\n"
                        "5: B-spline interpolation sqrt(x) (default B-spline degree: 5)\n"
                        "6: Lanczos interpolation (default Lanczos function order: 5)\n"
                        "7: Lanczos interpolation sqrt(x) (default Lanczos function order: 5)\n"
                        "NOTE: log and sqrt interpolation modes should only be used with "
                        "non-negative data!\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data format (enter - for default):\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX or geocoding lookup table\n"
                        "2: SUN/BMP/TIFF raster file\n"
                        "3: UNSIGNED CHAR\n"
                        "4: SHORT INTEGER\n"
                        "5: DOUBLE\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "bflg",
                    {
                        "desc": "output DEM bounds flag (enter - for default):\n"
                        "0: use DEM bounds specified by DEM2_par (default)\n"
                        "1: determine bounds from DEM1_par in the projection specified by "
                        "DEM2_par\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(output) complex-valued lookup table (enter - for none, DEM2 -> " "DEM1)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos function order or B-spline degree (2->9) (enter - default: " "5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "map_trans",
    },
    "mapshd": {
        "module": "DISP",
        "params": OrderedDict(
            [
                ("DEM", {"desc": "(input) digital elevation model (FLOAT)\n", "optional": False, "type": "unknown"}),
                ("width", {"desc": "samples per row of DEM\n", "optional": False, "type": "unknown"}),
                (
                    "col_post",
                    {"desc": "posting between cols (same unit as DEM values)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "row_post",
                    {
                        "desc": "posting between rows (enter - for default: col_post)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "theta0",
                    {
                        "desc": "illumination elevation angle in deg. (enter - for default: 45.)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "phi0",
                    {
                        "desc": "illumination orientation angle in deg. (enter - default: 135)\n"
                        "(0.: right, 90: top, 180: left, 270: bottom)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "shade",
                    {
                        "desc": "(output) shaded relief intensity image (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "DEM data type (enter - for default):\n" "0: FLOAT (default)\n" "1: SHORT integer\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "zero_flag",
                    {
                        "desc": "zero data handling (enter - for default):\n"
                        "0: 0.0 interpreted at missing value (default)\n"
                        "1: 0.0 interpreted as valid data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "illum_mode",
                    {
                        "desc": "illumination mode (enter - for default)\n"
                        "0: single angle (default)\n"
                        "1: multiple angle\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sharpness",
                    {
                        "desc": "shaded relief sharpness (scale from 0 to 9, enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "edge",
                    {
                        "desc": "edge protection (reduce artifacts at the edges and near no-data values, "
                        "enter - for default)\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "mapshd",
    },
    "mask_class": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "class_map",
                    {
                        "desc": "(input) class map (8-bit SUN raster(*.ras), BMP (*.bmp), TIFF "
                        "(*.tif) class map file)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "file_in",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "file_out",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "format_flag",
                    {
                        "desc": "input/output data format flag\n"
                        "0: FLOAT\n"
                        "1: FCOMPLEX\n"
                        "2: SUN (*.ras), BMP (*.bmp), TIFF (*.tif) raster image\n"
                        "3: UNSIGNED CHAR\n",
                        "enum": [0, 1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "LR",
                    {
                        "desc": "left/right mirror image flag (enter - for default: 1: normal "
                        "(default), -1: mirror image)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "selection_flag",
                    {
                        "desc": "flag for mask behavior\n"
                        "1: mask is the region belonging to the selected classes\n"
                        "-1: mask is the complement of the region belonging to the selected "
                        "classes\n",
                        "enum": [1],
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "n_class",
                    {
                        "desc": "number of classes to consider, up to 20 classes can be defined\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("class_1", {"desc": "class map value 1\n", "optional": False, "type": "unknown"}),
                ("class_n", {"desc": "class map value n\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "mask_class",
    },
    "mask_data": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) data file (FLOAT or FCOMPLEX format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width of input data file\n", "optional": False, "type": "unknown"}),
                (
                    "data_out",
                    {
                        "desc": "(output) data file, same data format as input\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mask",
                    {
                        "desc": "(input) mask file, SUN/BMP/TIFF raster format, 8-bits/pixel\n"
                        "output data values are set to 0.0 at all locations where the mask is "
                        "black (0,0,0) or dn = 0\n"
                        "NOTE: mask file must have the same width as the input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data format:\n0: FLOAT (default)\n1: FCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "mask_data",
    },
    "mask_op": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "mask-1",
                    {
                        "desc": "(input) mask 1 raster file SUN raster *.ras, BMP *.bmp, or TIFF *.tif "
                        "8-bits/pixel\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mask-2",
                    {
                        "desc": "(input) mask 2 raster file SUN raster *.ras, BMP *.bmp, or TIFF *.tif "
                        "8-bits/pixel\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mask_out",
                    {
                        "desc": "(output) output mask SUN raster *.ras, BMP *.bmp, or TIFF *.tif " "format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "logical operations on a pixel by pixel basis:\n"
                        "0: if mask-1 > 0 AND mask-2 > 0 then mask_out = mask-1\n"
                        "1: if mask-1 > 0 then mask_out = mask-1, OR if mask-2 > 0 then mask_out "
                        "= mask-2, otherwise mask_out = 0\n"
                        "2: if mask-1 > 0 then mask_out = 0, and if mask-1 == 0 then mask_out = "
                        "255\n",
                        "enum": [0, 1, 2],
                        "optional": False,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "mask_op",
    },
    "mcf": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "interf",
                    {
                        "desc": "(input) interferogram (*.int,*.diff,*.flt) (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "wgt",
                    {
                        "desc": "(input) weight factors (0 -> 1.0, e.g. coherence map) file (FLOAT) (enter - "
                        "for uniform weights)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mask",
                    {
                        "desc": "(input) validity mask (SUN/BMP/TIFF raster format, value 0 -> pixel not "
                        "used) (enter - if no mask)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "unw",
                    {
                        "desc": "(output) unwrapped phase image (*.unw) (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "tri_mode",
                    {
                        "desc": "triangulation mode (enter - for default)\n"
                        "0: filled triangular mesh\n"
                        "1: Delaunay triangulation\n"
                        "2: filled triangular mesh, replacing gaps with noise (default)\n"
                        "3: filled triangular mesh, replacing gaps and outside boundary with noise\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "offset to starting range of section to unwrap (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to starting line of section to unwrap (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range samples of section to unwrap (enter - for default: width - " "roff)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines of section to unwrap (enter - for default: total number of "
                        "lines - loff)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "npat_r",
                    {
                        "desc": "number of patches in range (enter - for default: 1, enter 0 to "
                        "automatically define number of patches)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "npat_az",
                    {
                        "desc": "number of patches in azimuth (enter - for default: 1, enter 0 to "
                        "automatically define number of patches)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ovrlap",
                    {
                        "desc": "overlap between patches in pixels (overlap >= 7, enter - for default: " "1024)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "r_init",
                    {
                        "desc": "phase reference point range offset (enter - for default: center of valid "
                        "data bounding box)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_init",
                    {
                        "desc": "phase reference point azimuth offset (enter - for default: center of valid "
                        "data bounding box)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "init_flag",
                    {
                        "desc": "flag to set phase at reference point (enter - for default)\n"
                        "0: use initial point phase value (default)\n"
                        "1: set phase to 0.0 at initial point\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "mcf",
    },
    "median_filter": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "din",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dout",
                    {
                        "desc": "(output) output data file (filtered)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                ("bx", {"desc": "filter window width (columns): 1,3,5,7...\n", "optional": False, "type": "unknown"}),
                (
                    "by",
                    {
                        "desc": "filter window height (rows): 1,3,5,7.., (enter - for default: " "bx)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min_pt",
                    {
                        "desc": "minimum number of points required in the filter window to "
                        "evaluate the median value (enter - for default: (bx*by)/4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflg",
                    {
                        "desc": "zero value flag (enter - for default)\n"
                        "0: data values that are equal to 0.0 (no data) are not changed "
                        "(default)\n"
                        "1: data gaps can be filled with median values\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "median_filter",
    },
    "mosaic_WB": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "data_tab",
                    {
                        "desc": "(input) 2 column list of data  and ISP image parameter files for the "
                        "beams in the mosaic (text)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "(input) input data type:\n0: FLOAT\n1: FCOMPLEX\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output image mosaic\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_par_out",
                    {
                        "desc": "(output) ISP image parameter file for output image mosaic\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sc_flg",
                    {
                        "desc": "intensity scaling flag:\n"
                        "0: do not scale different beam data values\n"
                        "1: use overlap regions to scale beam intensities (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "mosaic_WB",
    },
    "mt_lee_filt": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "im_list",
                    {
                        "desc": "(input) text file with names of co-registered FLOAT images "
                        "including path (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ref_image",
                    {
                        "desc": "(input) reference image used to generate the filter weights "
                        "(FLOAT)\n"
                        "NOTE: the reference scene should have the same dimensions as the "
                        "data files in the im_list\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "winsz",
                    {
                        "desc": "size of the Lee filter window (valid values: 7, 13, 19)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "L_ref",
                    {
                        "desc": "effective number of looks (ENL) in the reference image (FLOAT)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "L",
                    {
                        "desc": "ENL of the images in the im_list used for local determination of "
                        "the MMSE weight for each image in the im_list (FLOAT)\n"
                        "NOTE: enter - to use the MMSE filter weight derived from the "
                        "reference image for all images in the im_list\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "cthres",
                    {
                        "desc": "directional contrast threshold to determine if the directional "
                        "filter should be applied (0->4) (enter - for default: 1.500)\n"
                        "NOTE: setting cthres=0.0, forces the directional filter to be used "
                        "at all times, setting cthres=4.0 blocks all directional filtering\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "out_list",
                    {
                        "desc": "(input) list of filtered output data files, number of entries in "
                        "the im_list and out_list must match (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ref_out",
                    {
                        "desc": "(output) filtered reference image (FLOAT) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "b_coeff",
                    {
                        "desc": "(output) MMSE weighting coefficient calculated from the mean to "
                        "sigma ratio and L for each sample (FLOAT) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "filt_num",
                    {
                        "desc": "(output) selected structural filter number (0-->7) (BYTE) (enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "msr",
                    {
                        "desc": "(output) mean/sigma ratio where the mean is the local mean and "
                        "sigma the local standard deviation of the intensity image in the "
                        "filter window (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ctr",
                    {
                        "desc": "(output) directional contrast estimate used to determine if the "
                        "directional filter is applied (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "mt_lee_filt",
    },
    "mt_lee_filt_cpx": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "cpx_list",
                    {
                        "desc": "(input) text file with names of co-registered FCOMPLEX data "
                        "files including path (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ref_image",
                    {
                        "desc": "(input) reference intensity image used to generate the filter "
                        "weights (FLOAT)\n"
                        "NOTE: the reference scene should have the same dimensions as "
                        "the data files in the cpx_list\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "winsz",
                    {
                        "desc": "size of the Lee filter window (valid values: 7, 13, 19)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "L_ref",
                    {
                        "desc": "effective number of looks in the reference image (FLOAT)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "cthres",
                    {
                        "desc": "directional contrast threshold to determine if the directional "
                        "filter should be applied (0->4)(enter - for default: 1.500)\n"
                        "NOTE: setting cthres=0.0, forces the directional filter to be "
                        "used at all times, setting cthres=4.0 blocks all directional "
                        "filtering\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "out_list",
                    {
                        "desc": "(input) list of filtered output data files, number of entries "
                        "in the cpx_list and out_list must match (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ref_out",
                    {
                        "desc": "(output) filtered reference image (FLOAT) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "b_coeff",
                    {
                        "desc": "(output) MMSE weighting coefficient calculated from the mean to "
                        "sigma ratio and L for each sample in the reference image "
                        "(FLOAT) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "filt_num",
                    {
                        "desc": "(output) selected structural filter number (0-->7) (BYTE) " "(enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "msr",
                    {
                        "desc": "(output) mean/sigma ratio where the mean is the local mean and "
                        "sigma the local standard deviation of the intensity image in "
                        "the filter window (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ctr",
                    {
                        "desc": "(output) directional contrast estimate used to determine if the "
                        "directional filter is applied (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "mt_lee_filt_cpx",
    },
    "multi_GRD_SLC": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SLC_PROC_par",
                    {
                        "desc": "(input) MSP SLC processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_PROC_par",
                    {
                        "desc": "(output) MSP ground range (GRD) multi-look image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_image",
                    {
                        "desc": "(input) SLC image file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_image",
                    {
                        "desc": "(output) ground-range projected image file (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rlks", {"desc": "number of range looks (default: 1)\n", "optional": False, "type": "unknown"}),
                ("azlks", {"desc": "number of azimuth looks (default: 1)\n", "optional": False, "type": "unknown"}),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode:\n" "0: nearest-neighbor\n" "1: SINC interpolator (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sample_spacing",
                    {
                        "desc": "multilook image sample spacing (m) (enter - for default: azimuth "
                        "SLC spacing * azlks)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "gr_start",
                    {
                        "desc": "starting ground-range (meters), (enter - for default: start of " "data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "t_start",
                    {
                        "desc": "starting time (s) for output, (enter - for default: start of " "data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "t_end",
                    {
                        "desc": "ending time (s) for output, (enter -  for default: end of data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "multi_GRD_SLC",
    },
    "multi_SLC": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SLC_PROC_par",
                    {
                        "desc": "(input) SLC MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_PROC_par",
                    {
                        "desc": "(output) MLI MSP processing parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(input) single look complex image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) multilook intensity image derived from SLC\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rlks", {"desc": "number of range looks\n", "optional": False, "type": "unknown"}),
                ("azlks", {"desc": "number of azimuth looks\n", "optional": False, "type": "unknown"}),
                (
                    "slc_format",
                    {
                        "desc": "input SLC format flag (default: from SLC_PROC_par)\n"
                        "0: FCOMPLEX (pairs of 4-byte float)\n"
                        "1: SCOMPLEX (pairs of 2-byte short integer)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "multi_SLC",
    },
    "multi_SLC_WSS": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) ASAR Wide-Swath SLC image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) multi-look intensity image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "multi_SLC_WSS",
    },
    "multi_class_mapping": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("nfiles", {"desc": "number of input data files\n", "optional": False, "type": "unknown"}),
                ("f1", {"desc": "(input) 1. input data file (float)\n", "optional": False, "type": "unknown"}),
                ("f2", {"desc": "(input) 2. input data file (float)\n", "optional": False, "type": "unknown"}),
                ("fn", {"desc": "(input) last input data file (float)\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "multi_class_mapping",
    },
    "multi_cpx": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input complex image file (FCOMPLEX or SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PAR_in",
                    {
                        "desc": "(input) SLC/MLI, DEM, DIFF/GEO or ISP offset/interferogram parameter "
                        "file for input image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output multi-look or interpolated complex data file "
                        "(FCOMPLEX or SCOMPLEX)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PAR_out",
                    {
                        "desc": "(input/output) SLC/MLI, DEM, DIFF/GEO or ISP offset/interferogram "
                        "parameter file for output, used as input if already exists\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of range looks, values < -1 interpreted as an image "
                        "oversampling factor (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number of azimuth looks, values < -1 interpreted as an image "
                        "oversampling factor (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "line offset to starting line (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "offset to starting range sample (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nsamp",
                    {
                        "desc": "number of range samples to extract (enter - or 0 for default: to end " "of line)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "multi_cpx",
    },
    "multi_look": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) single-look complex image (SCOMPLEX or FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) multi-look intensity image (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI ISP image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rlks", {"desc": "number of range looks (INT)\n", "optional": False, "type": "unknown"}),
                ("azlks", {"desc": "number of azimuth looks (INT)\n", "optional": False, "type": "unknown"}),
                (
                    "loff",
                    {"desc": "offset to starting line (enter - for default: 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of SLC lines to process (enter - for default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "scale factor for output MLI (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "exponent for the output MLI (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "multi_look",
    },
    "multi_look2": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) single-look complex image (SCOMPLEX or FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) multi-look intensity image (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("r_dec", {"desc": "range decimation factor (int)\n", "optional": False, "type": "unknown"}),
                ("az_dec", {"desc": "azimuth decimation factor (int)\n", "optional": False, "type": "unknown"}),
                (
                    "rwin",
                    {
                        "desc": "averaging window width (int)  (enter - for default: r_dec)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "averaging window height (int) (enter - for default: az_dec)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wflg",
                    {
                        "desc": "window weighting function (enter - for default):\n"
                        "0: rectangular (default)\n"
                        "1: Kaiser\n"
                        "2: circular Gaussian\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "oversampling factor 1 -> 2 (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: 7)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "beta",
                    {
                        "desc": "Gaussian or Kaiser window parameter (enter - for default: 2.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "scale factor for output MLI (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "exponent for the output MLI (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "multi_look2",
    },
    "multi_look_MLI": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "MLI_in",
                    {
                        "desc": "(input) multi-look intensity image (MLI) file (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "MLI_in_par",
                    {
                        "desc": "(input) MLI parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_out",
                    {
                        "desc": "(output) multi-looked MLI image (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_out_par",
                    {
                        "desc": "(output) MLI parameter file for output MLI\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rlks", {"desc": "range looks for multi-looking\n", "optional": False, "type": "unknown"}),
                ("azlks", {"desc": "azimuth looks for multi-looking\n", "optional": False, "type": "unknown"}),
                (
                    "loff",
                    {"desc": "offset to starting line (enter - for default: 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of input MLI lines to process (enter - for default: " "entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "scale factor for output MLI (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "e_flag",
                    {
                        "desc": "extent flag (enter - for default)\n"
                        "0: only permit pixels with the full number of looks (default)\n"
                        "1: permit pixels without the full number of looks\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "multi_look_MLI",
    },
    "multi_look_ScanSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_tab",
                    {
                        "desc": "(input) 3 column list of ScanSAR SLC, swaths are listed in "
                        "order from near to far range\n"
                        "SLC_tab line entries:   SLC   SLC_par  TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) mosaicked MLI image (non-overlapping burst " "windows)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("rlks", {"desc": "number of range looks\n", "optional": False, "type": "unknown"}),
                ("azlks", {"desc": "number of azimuth looks\n", "optional": False, "type": "unknown"}),
                (
                    "bflg",
                    {
                        "desc": "burst window calculation flag (enter - for default):\n"
                        "0: use existing burst window parameters if they exist, "
                        "otherwise calculate burst window parameters (default)\n"
                        "1: calculate burst window parameters from burst parameters "
                        "and the number of range and azimuth looks\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "SLCR_tab",
                    {
                        "desc": "(input) 3 column list of the reference scene, swaths are "
                        "listed in order from near to far range, enter - for none\n"
                        "SLCR_tab line entries:   SLC    SLC_par   TOPS_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "scale factor for output MLI (enter - for default: calculate "
                        "from calibration gain in SLC parameter file)\n"
                        "NOTE: When generating an MLI mosaic from resampled SLC data, "
                        "the SLC_tab of the reference scene is required\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "multi_look_ScanSAR",
    },
    "multi_look_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC/MLI",
                    {
                        "desc": "(input) geocoded SLC or MLI image (FCOMPLEX, SCOMPLEX, or " "FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par1",
                    {
                        "desc": "(input) DEM parameter file of the input image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) geocoded MLI image (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par2",
                    {
                        "desc": "(output) DEM parameter file of the output image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "e_lks",
                    {
                        "desc": "number of easting looks (longitude, cross-track)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "n_lks",
                    {
                        "desc": "number of northing looks (latitude, along-track)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type:\n0: FCOMPLEX (default)\n1: SCOMPLEX\n2: FLOAT\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "scale factor for output MLI (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "exponent for the output MLI (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "multi_look_geo",
    },
    "multi_look_geo2": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) geocoded SLC image (SCOMPLEX or FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) geocoded SLC DEM parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) geocoded MLI image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par2",
                    {
                        "desc": "(output) MLI DEM parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("e_dec", {"desc": "easting decimation factor (int)\n", "optional": False, "type": "unknown"}),
                ("n_dec", {"desc": "northing decimation factor (int)\n", "optional": False, "type": "unknown"}),
                (
                    "e_win",
                    {
                        "desc": "easting averaging window width (int) (enter - for default: " "e_dec)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "n_win",
                    {
                        "desc": "northing averaging window height (int)(enter - for default: " "n_dec)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wflg",
                    {
                        "desc": "window weighting function (enter - for default):\n"
                        "0: rectangular (default)\n"
                        "1: Kaiser\n"
                        "2: circular Gaussian\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "oversampling factor 1 -> 2 (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: 7)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "beta",
                    {
                        "desc": "Gaussian or Kaiser window parameter (enter - for default: " "2.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "scale factor for output MLI (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "exponent for the output MLI (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "multi_look_geo2",
    },
    "multi_mosaic": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "data_tab",
                    {
                        "desc": "(input) list of data to mosaic (2 columns), one line for each "
                        "input data file (text format):\n"
                        "data   DEM_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par_out",
                    {
                        "desc": "(output) DEM parameter file of output data file\n"
                        "NOTE: If this file exists, then the bounds of the mosaic are read "
                        "from the parameter file, \n"
                        "otherwise bounds including all input data will be computed and "
                        "written to the parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "mosaic processing mode\n"
                        "0: value of prior image preferred in the case of multiple valid "
                        "input values\n"
                        "1: average of multiple valid input values calculated\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "format_flag",
                    {
                        "desc": "input/output data format flag\n"
                        "0: FLOAT (REAL*4)\n"
                        "1: FCOMPLEX (pairs of float)\n"
                        "2: INTEGER (INTEGER*4)\n"
                        "3: SHORT (INTEGER*2)\n"
                        "4: UNSIGNED CHAR\n"
                        "5: SUN raster, BMP, or TIFF image files (8 or 24 bit)\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": False,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "multi_mosaic",
    },
    "multi_real": {
        "module": "ISP",
        "params": OrderedDict(
            [
                ("data_in", {"desc": "(input) input float image file\n", "optional": False, "type": "unknown"}),
                (
                    "OFF_par_in",
                    {
                        "desc": "(input) interferogram/offset parameter file for input image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output multi-look or interpolated float data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par_out",
                    {
                        "desc": "(input/output) interferogram/offset parameter file for output, if "
                        "already existing, used as input\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of range looks, values < -1, interpreted as an image "
                        "oversampling factor (default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number azimuth looks,  values < -1, interpreted as an image "
                        "oversampling factor (default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("loff", {"desc": "line offset to starting line (default:0)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {"desc": "number of lines (default:0, to end of file)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "roff",
                    {"desc": "offset to starting range sample (default:0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nsamp",
                    {
                        "desc": "number of range samples to extract (default:0, to end of line)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "multi_real",
    },
    "multi_stat": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "im_list",
                    {
                        "desc": "(input) text file with names of co-registered FLOAT images including " "path\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "im_out",
                    {
                        "desc": "(output) output filtered image (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "data selection mode:\n"
                        "0: average\n"
                        "1: median\n"
                        "2: rank relative to minimum, rank=1 for minimum\n"
                        "3: rank relative to maximum, rank=1 for maximum\n"
                        "4: percentile, 0 (minimum) --> 100 (maximum)\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "rank",
                    {
                        "desc": "rank value in modes 2 and 3, percentile in mode 4 (0-->100), ignored "
                        "for average or median\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nmin",
                    {
                        "desc": "minimum number of valid image values required to sort (enter - for "
                        "default: nfiles/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "multi_stat",
    },
    "neutron": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "intensity",
                    {
                        "desc": "(input) image intensity \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "flag",
                    {
                        "desc": "(input) phase unwrapping flag file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "n_thres",
                    {
                        "desc": "neutron threshold, multiples of the average intensity (default=6.0)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "ymin",
                    {"desc": "offset to starting azimuth row (default = 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ymax",
                    {"desc": "offset to last azimuth row (default = nlines-1)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "neutron",
    },
    "offset_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "snr",
                    {
                        "desc": "(output) offset estimation SNR (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "search window size (range pixels, (enter - for default from offset "
                        "parameter file))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "search window size (azimuth lines, (enter - for default from offset "
                        "parameter file))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and SNR data in text format, "
                        "enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor (integer 2**N (1,2,4) default = 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of offset estimates in range direction (enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "naz",
                    {
                        "desc": "number of offset estimates in azimuth direction (enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "offset estimation quality threshold (enter - for default from offset "
                        "parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ISZ",
                    {
                        "desc": "search chip interferogram size (in non-oversampled pixels, " "default=16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (0:print offset summary  default=1:print all offset " "data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "offset_SLC",
    },
    "offset_SLC_tracking": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "snr",
                    {
                        "desc": "(output) offset estimation SNR (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rsw",
                    {
                        "desc": "range search window size (range pixels) (enter - for "
                        "default from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azsw",
                    {
                        "desc": "azimuth search window size (azimuth lines) (enter - for "
                        "default from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and SNR data in text "
                        "format, enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC over-sampling factor (integer 2**N (1,2,4) default: " "2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "offset estimation quality threshold (enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstep",
                    {
                        "desc": "step in range pixels (enter - for default: rsw/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstep",
                    {
                        "desc": "step in azimuth pixels (enter - for default: azsw/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstart",
                    {
                        "desc": "starting range pixel (enter - for default: rsw/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstop",
                    {
                        "desc": "ending range pixel (enter - for default: nr - rsw/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstart",
                    {
                        "desc": "starting azimuth line (enter - for default: azsw/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstop",
                    {
                        "desc": "ending azimuth line  (enter - for default: nlines - " "azsw/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ISZ",
                    {
                        "desc": "search chip interferogram size (in non-oversampled pixels, " "default: 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag:\n" "0: print offset summary  (default)\n" "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "offset_SLC_tracking",
    },
    "offset_add": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "OFF_par1",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par2",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par3",
                    {
                        "desc": "(output) ISP offset/interferogram parameter file with sums of the\n"
                        "range and azimuth offset polynomials in OFF_par1 and OFF_par2\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "offset_add",
    },
    "offset_fit": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "offs",
                    {
                        "desc": "(input) range and azimuth offset estimates for each patch " "(fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(input) cross-correlation or SNR of each patch (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "coffs",
                    {
                        "desc": "(output) culled range and azimuth offset estimates (fcomplex, enter " "- for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "coffsets",
                    {
                        "desc": "(output) culled offset estimates and cross-correlation values (text "
                        "format, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (enter - for default from OFF_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "npoly",
                    {
                        "desc": "number of model polynomial parameters (enter - for default, 1, 3, 4, "
                        "6, default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interact_flag",
                    {
                        "desc": "interactive culling of input data:\n0: off (default)\n1: on\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "offset_fit",
    },
    "offset_fitm": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "offs",
                    {
                        "desc": "(input) range and azimuth offset estimates (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {"desc": "(input) cross-correlation of each patch (float)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file for the scene\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "coffs",
                    {
                        "desc": "(output) culled range and azimuth offset estimates (fcomplex, enter " "- for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "coffsets",
                    {
                        "desc": "(output) culled offset estimates and cross-correlation values (text "
                        "format, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (enter - for default from DIFF_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "npoly",
                    {
                        "desc": "number of model polynomial parameters (enter - for default, 1, 3, "
                        "4, 6, default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interact_mode",
                    {
                        "desc": "interactive culling of input data:\n0: off (default)\n1: on\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "offset_fitm",
    },
    "offset_list_fitm": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "cp_list",
                    {
                        "desc": "(input) list with registration control point (CP) "
                        "coordinates:\n"
                        "CP_nr  ref_col  ref_row  col2  row2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input/output) DIFF&GEO parameter file (for output of fine "
                        "registration polynomial)\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input)DEM/MAP parameter file (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(input)geocoding lookup table (required to convert between map "
                        "pixel numbers and SAR pixel numbers)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "lt_type",
                    {
                        "desc": "lookup table type (enter - for default)\n"
                        "1: map_to_rdc (default)\n"
                        "2: rdc_to_map\n",
                        "enum": [1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "type1",
                    {
                        "desc": "reference coordinate type (enter - for default):\n"
                        "1: SAR (col,row) pixel numbers (default):\n"
                        "2: map (col,row) pixel numbers\n"
                        "3: map (easting, northing) coordinates)\n",
                        "enum": [1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "type2",
                    {
                        "desc": "image 2 coordinate type (enter - for default):\n"
                        "1: SAR (col,row) pixel numbers (default)\n"
                        "2: map (col,row) pixel numbers\n"
                        "3: map (easting, northing) coordinates)\n",
                        "enum": [1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "coffsets",
                    {
                        "desc": "(output) list of culled registration offsets (text file)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "poly_order",
                    {
                        "desc": "polynomial order parameter (1, 3, 4, 6, default: 4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "interact_flag",
                    {
                        "desc": "interactive culling of input data (1=YES, 0=NO, default: NO)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "trans_list",
                    {"desc": "transformed coordinate list using model\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "offset_list_fitm",
    },
    "offset_pwr": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates in range and azimuth (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(output) cross-correlation of each patch (0.0->1.0) (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for default from offset " "parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for default from offset "
                        "parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and cross-correlation data in "
                        "text format, enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor (integer 2**N (1,2,4), enter - for default: " "2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of offset estimates in range direction (enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "naz",
                    {
                        "desc": "number of offset estimates in azimuth direction (enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (0.0->1.0) (enter - for default from "
                        "offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_frac",
                    {
                        "desc": "bandwidth fraction of low-pass filter on complex data (0.0->1.0) "
                        "(enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "deramp",
                    {
                        "desc": "deramp SLC phase flag (enter - for default)\n"
                        "0: no deramp (Doppler centroid close to 0) (default)\n"
                        "1: deramp SLC phase\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "int_filt",
                    {
                        "desc": "intensity low-pass filter flag (enter - for default)\n"
                        "0: no filter\n"
                        "1: low-pass filter of intensity data, highly recommended when no "
                        "oversampling used (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print offset summary (default)\n"
                        "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: screen output\n"
                        "2: screen output and PNG format plots\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ccs",
                    {
                        "desc": "(output) cross-correlation standard deviation of each patch " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "offset_pwr",
    },
    "offset_pwr_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF parameter file created from DEM_par files\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates in range and azimuth (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(output) cross-correlation of each patch (0.0->1.0) (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for default from offset " "parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for default from "
                        "offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and cross-correlation data in "
                        "text format, enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor (integer 2**N (1,2,4), enter - for " "default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of offset estimates in range direction (enter - for "
                        "default from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "naz",
                    {
                        "desc": "number of offset estimates in azimuth direction (enter - for "
                        "default from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (0.0->1.0) (enter - for default from "
                        "offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_frac",
                    {
                        "desc": "bandwidth fraction of low-pass filter on complex data (0.0->1.0) "
                        "(enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "format",
                    {
                        "desc": "SLC data format (enter - for default)\n" "0: FCOMPLEX (default)\n" "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "int_filt",
                    {
                        "desc": "intensity low-pass filter flag (enter - for default)\n"
                        "0: no filter\n"
                        "1: low-pass filter of intensity data, highly recommended when no "
                        "oversampling used (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print offset summary (default)\n"
                        "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: screen output\n"
                        "2: screen output and PNG format plots\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ccs",
                    {
                        "desc": "(output) cross-correlation standard deviation of each patch " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "offset_pwr_geo",
    },
    "offset_pwr_list": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "clist_RDC",
                    {
                        "desc": "(input) list of x,y pixel coordinates in the reference SLC "
                        "image geometry (Range-Doppler Coordinates) (text format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "clist_MAP",
                    {
                        "desc": "(input) list of x,y pixel coordinates in the map projection "
                        "geometry (text format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimate 2D map (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(output) cross-correlation of each patch (0.0->1.0) in map " "coordinates (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("nx", {"desc": "width of 2D offset map in MAP geometry\n", "optional": False, "type": "unknown"}),
                ("ny", {"desc": "height of 2D offset map in MAP geometry\n", "optional": False, "type": "unknown"}),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for default from offset " "parameter file))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for default from "
                        "offset parameter file))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and cross-correlation data "
                        "in text format, enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor (integer 2**N (1,2,4), enter - for " "default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (0.0->1.0) (enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_frac",
                    {
                        "desc": "bandwidth fraction of low-pass filter on complex data "
                        "(0.0->1.0) (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "deramp",
                    {"desc": "deramp SLC phase flag (enter - for default)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "int_filt",
                    {
                        "desc": "intensity low-pass filter flag (enter - for default)\n"
                        "0: no filter\n"
                        "1: low-pass filter of intensity data, highly recommended when "
                        "no oversampling used (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print offset summary (default)\n"
                        "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: screen output\n"
                        "2: screen output and PNG format plots\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ccs",
                    {
                        "desc": "(output) cross-correlation standard deviation of each patch in "
                        "map coordinates (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "offset_pwr_list",
    },
    "offset_pwr_tracking": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates in range and azimuth (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(output) cross-correlation of each patch (0.0->1.0) " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for default from " "offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for default from "
                        "offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and cross-correlation "
                        "data in text format, enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor (integer 2**N (1,2,4), enter - for " "default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (0.0->1.0) (enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstep",
                    {
                        "desc": "step in range pixels (enter - for default: rwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstep",
                    {
                        "desc": "step in azimuth pixels (enter - for default: azwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstart",
                    {
                        "desc": "offset to starting range pixel (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstop",
                    {
                        "desc": "offset to ending range pixel (enter - for default: nr-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstart",
                    {
                        "desc": "offset to starting azimuth line (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstop",
                    {
                        "desc": "offset to ending azimuth line (enter - for default: " "nlines-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: " "5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_frac",
                    {
                        "desc": "bandwidth fraction of low-pass filter on complex data "
                        "(0.0->1.0) (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "deramp",
                    {
                        "desc": "deramp SLC phase flag (enter - for default)\n"
                        "0: no deramp (Doppler centroid close to 0) (default)\n"
                        "1: deramp SLC phase\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "int_filt",
                    {
                        "desc": "intensity low-pass filter flag (enter - for default)\n"
                        "0: no filter\n"
                        "1: low-pass filter of intensity data, highly recommended "
                        "when no oversampling used (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print offset summary (default)\n"
                        "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: screen output\n"
                        "2: screen output and PNG format plots\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ccs",
                    {
                        "desc": "(output) cross-correlation standard deviation of each patch " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "offset_pwr_tracking",
    },
    "offset_pwr_tracking2": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC-1 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC-2 ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates in range and azimuth " "(fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(output) cross-correlation of each patch (0.0->1.0) " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par2",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file of the "
                        "offset map to determine initial offsets (enter - for "
                        "none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "offs2",
                    {
                        "desc": "(input) input range and azimuth offset map to determine "
                        "initial offsets (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for default from " "offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and cross-correlation "
                        "data in text format, enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor (integer 2**N (1,2,4), enter - for " "default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (0.0->1.0) (enter - for "
                        "default from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstep",
                    {
                        "desc": "step in range pixels (enter - for default: rwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstep",
                    {
                        "desc": "step in azimuth pixels (enter - for default: azwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstart",
                    {
                        "desc": "offset to starting range pixel (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstop",
                    {
                        "desc": "offset to ending range pixel (enter - for default: nr-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstart",
                    {
                        "desc": "offset to starting azimuth line (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstop",
                    {
                        "desc": "offset to ending azimuth line (enter - for default: " "nlines-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_frac",
                    {
                        "desc": "bandwidth fraction of low-pass filter on complex data "
                        "(0.0->1.0) (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "deramp",
                    {
                        "desc": "deramp SLC phase flag (enter - for default)\n"
                        "0: no deramp (Doppler centroid close to 0) (default)\n"
                        "1: deramp SLC phase\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "int_filt",
                    {
                        "desc": "intensity low-pass filter flag (enter - for default)\n"
                        "0: no filter\n"
                        "1: low-pass filter of intensity data, highly recommended "
                        "when no oversampling used (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print offset summary (default)\n"
                        "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: screen output\n"
                        "2: screen output and PNG format plots\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ccs",
                    {
                        "desc": "(output) cross-correlation standard deviation of each " "patch (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "offset_pwr_tracking2",
    },
    "offset_pwr_tracking_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC1",
                    {
                        "desc": "(input) single-look complex image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2",
                    {
                        "desc": "(input) single-look complex image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates in range and azimuth " "(fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(output) cross-correlation of each patch (0.0->1.0) " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for default " "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and "
                        "cross-correlation data in text format, enter - for no "
                        "output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "SLC oversampling factor (integer 2**N (1,2,4), enter - " "for default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (0.0->1.0) (enter - for "
                        "default from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstep",
                    {
                        "desc": "step in range pixels (enter - for default: rwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstep",
                    {
                        "desc": "step in azimuth pixels (enter - for default: azwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstart",
                    {
                        "desc": "offset to starting range pixel (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstop",
                    {
                        "desc": "offset to ending range pixel (enter - for default: " "nr-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstart",
                    {
                        "desc": "offset to starting azimuth line (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstop",
                    {
                        "desc": "offset to ending azimuth line (enter - for default: " "nlines-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: " "5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_frac",
                    {
                        "desc": "bandwidth fraction of low-pass filter on complex data "
                        "(0.0->1.0) (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "format",
                    {
                        "desc": "SLC data format (enter - for default)\n" "0: FCOMPLEX (default)\n" "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "int_filt",
                    {
                        "desc": "intensity low-pass filter flag (enter - for default)\n"
                        "0: no filter\n"
                        "1: low-pass filter of intensity data, highly "
                        "recommended when no oversampling used (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print offset summary (default)\n"
                        "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: screen output\n"
                        "2: screen output and PNG format plots\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ccs",
                    {
                        "desc": "(output) cross-correlation standard deviation of each " "patch (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "offset_pwr_tracking_geo",
    },
    "offset_pwr_tracking_polygons": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) reference SLC ISP image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input/output) ISP offset/interferogram parameter " "file\n",
                        "is_infile": True,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "range decimation factor for MLI geometry  (enter - " "for default: 1)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "azimuth decimation factor for the MLI geometry " "(enter - for default: 1)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for " "default from offset parameter file)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for "
                        "default from offset parameter file)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "polygons",
                    {
                        "desc": "(output) polygon vertices in text format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rstep",
                    {
                        "desc": "step in range pixels (enter - for default: " "rwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstep",
                    {
                        "desc": "step in azimuth pixels (enter - for default: " "azwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstart",
                    {
                        "desc": "offset to starting range pixel (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstop",
                    {
                        "desc": "offset to ending range pixel (enter - for default: " "nr-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstart",
                    {
                        "desc": "offset to starting azimuth line (enter - for " "default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstop",
                    {
                        "desc": "offset to ending azimuth line (enter - for " "default: nlines-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rb",
                    {
                        "desc": "polygon range border in MLI samples: (enter - for " "default: 7)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azb",
                    {
                        "desc": "polygon azimuth border in MLI lines: (enter - for " "default: 7)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "offset_pwr_tracking_polygons",
    },
    "offset_pwr_trackingm": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI-1",
                    {
                        "desc": "(input) real valued intensity image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2",
                    {
                        "desc": "(input) real valued intensity image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates in range and azimuth " "(fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(output) cross-correlation of each patch (0.0->1.0) " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for default from " "offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and cross-correlation "
                        "data in text format, enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "MLI oversampling factor (integer 2**N (1,2,4), enter - for " "default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (0.0->1.0) (enter - for "
                        "default from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstep",
                    {
                        "desc": "step in range pixels (enter - for default: rwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstep",
                    {
                        "desc": "step in azimuth pixels (enter - for default: azwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstart",
                    {
                        "desc": "offset to starting range pixel (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstop",
                    {
                        "desc": "offset to ending range pixel (enter - for default: nr-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstart",
                    {
                        "desc": "offset to starting azimuth line (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstop",
                    {
                        "desc": "offset to ending azimuth line (enter - for default: " "nlines-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: " "5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_frac",
                    {
                        "desc": "bandwidth fraction of low-pass filter on intensity data "
                        "(0.0->1.0) (enter - for default: 0.8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print offset summary (default)\n"
                        "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: screen output\n"
                        "2: screen output and PNG format plots\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ccs",
                    {
                        "desc": "(output) cross-correlation standard deviation of each " "patch (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "std_mean",
                    {
                        "desc": "patch minimum standard deviation/mean ratio (enter - for " "default: 0.01)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "offset_pwr_trackingm",
    },
    "offset_pwr_trackingm2": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI-1",
                    {
                        "desc": "(input) real valued intensity image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2",
                    {
                        "desc": "(input) real valued intensity image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates in range and azimuth " "(fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(output) cross-correlation of each patch (0.0->1.0) " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par2",
                    {
                        "desc": "(input) DIFF/GEO parameter file of the offset map to "
                        "determine initial offsets (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "offs2",
                    {
                        "desc": "(input) input range and azimuth offset map to determine "
                        "initial offsets (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for default from " "offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and cross-correlation "
                        "data in text format, enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "MLI oversampling factor (integer 2**N (1,2,4), enter - " "for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (0.0->1.0) (enter - for "
                        "default from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstep",
                    {
                        "desc": "step in range pixels (enter - for default: rwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstep",
                    {
                        "desc": "step in azimuth pixels (enter - for default: azwin/2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstart",
                    {
                        "desc": "offset to starting range pixel (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rstop",
                    {
                        "desc": "offset to ending range pixel (enter - for default: " "nr-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstart",
                    {
                        "desc": "offset to starting azimuth line (enter - for default: " "0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azstop",
                    {
                        "desc": "offset to ending azimuth line  (enter - for default: " "nlines-1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_frac",
                    {
                        "desc": "bandwidth fraction of low-pass filter on intensity data "
                        "(0.0->1.0) (enter - for default: 0.8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print offset summary (default)\n"
                        "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: screen output\n"
                        "2: screen output and PNG format plots\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ccs",
                    {
                        "desc": "(output) cross-correlation standard deviation of each " "patch (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "std_mean",
                    {
                        "desc": "patch minimum standard deviation/mean ratio (enter - for " "default: 0.01)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "offset_pwr_trackingm2",
    },
    "offset_pwrm": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI-1",
                    {
                        "desc": "(input) real valued intensity image 1 (reference)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI-2",
                    {
                        "desc": "(input) real valued intensity image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs",
                    {
                        "desc": "(output) offset estimates in range and azimuth (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(output) cross-correlation of each patch (0.0->1.0) (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rwin",
                    {
                        "desc": "range patch size (range pixels, enter - for default from offset " "parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azwin",
                    {
                        "desc": "azimuth patch size (azimuth lines, enter - for default from offset "
                        "parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "offsets",
                    {
                        "desc": "(output) range and azimuth offsets and cross-correlation data in "
                        "text format, enter - for no output\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "n_ovr",
                    {
                        "desc": "MLI oversampling factor (integer 2**N (1,2,4), enter - for default: " "1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of offset estimates in range direction (enter - for default "
                        "from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "naz",
                    {
                        "desc": "number of offset estimates in azimuth direction (enter - for "
                        "default from offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold (0.0->1.0) (enter - for default from "
                        "offset parameter file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "lanczos",
                    {
                        "desc": "Lanczos interpolator order 5 -> 9 (enter - for default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bw_frac",
                    {
                        "desc": "bandwidth fraction of low-pass filter on intensity data (0.0->1.0) "
                        "(enter - for default: 0.8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pflag",
                    {
                        "desc": "print flag (enter - for default)\n"
                        "0: print offset summary (default)\n"
                        "1: print all offset data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: screen output\n"
                        "2: screen output and PNG format plots\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ccs",
                    {
                        "desc": "(output) cross-correlation standard deviation of each patch " "(float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "std_mean",
                    {
                        "desc": "patch minimum standard deviation/mean ratio (enter - for default: " "0.01)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "offset_pwrm",
    },
    "offset_sub": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "offs",
                    {
                        "desc": "(input) range and azimuth offset estimates (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs_sub",
                    {
                        "desc": "(output) range and azimuth offset estimates after polynomial "
                        "subtraction (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "offset_sub",
    },
    "offset_subm": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "offs",
                    {
                        "desc": "(input) range and azimuth offset estimates (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file for the scene\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "offs_sub",
                    {
                        "desc": "(output) range and azimuth offset estimates after polynomial "
                        "subtraction (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "offset_subm",
    },
    "offset_tracking": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "offs",
                    {
                        "desc": "(input) range and azimuth offset estimates (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ccp",
                    {
                        "desc": "(input) cross-correlation of the offset estimates (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC parameter file of reference SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) offset parameter file used in the offset tracking\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_map",
                    {
                        "desc": "(output) range and azimuth displacement estimates (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "disp_val",
                    {
                        "desc": "(output) range and azimuth displacement estimates and "
                        "cross-correlation values (enter - for none) (text)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "flag indicating displacement mode:\n"
                        "0: displacement in range and azimuth pixels\n"
                        "1: displacement in meters in slant range and azimuth "
                        "directions\n"
                        "2: displacement in meters in ground range and azimuth "
                        "directions (default)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold to accept offset value (default " "from OFF_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "poly_flag",
                    {
                        "desc": "flag indicating if trend calculated using offset polynomials "
                        "from OFF_par is subtracted:\n"
                        "0: do not subtract polynomial trend from offset data\n"
                        "1: subtract polynomial trend from offset data (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "offset_tracking",
    },
    "offset_trackingm": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "offs",
                    {
                        "desc": "(input) range and azimuth offset estimates (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "snr",
                    {
                        "desc": "(input) cross-correlation of the offset estimates (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(input) MLI parameter file of reference MLI\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) offset parameter file used in the offset tracking\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "coffs_map",
                    {
                        "desc": "(output) range and azimuth displacement estimates (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "coffsets",
                    {
                        "desc": "(output) range and azimuth displacement estimates and "
                        "cross-correlation values (enter - for none) (text)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "flag indicating displacement mode:\n"
                        "0: displacement in range and azimuth pixels\n"
                        "1: displacement in meters in slant range and azimuth "
                        "directions\n"
                        "2: displacement in meters in ground range and azimuth "
                        "directions (default)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "cross-correlation threshold to accept offset value (0.0-> 1.0, "
                        "default from DIFF_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "poly_flag",
                    {
                        "desc": "flag indicating if trend calculated using offset polynomials "
                        "from DIFF_par is subtracted:\n"
                        "0: do not subtract polynomial trend from offset data\n"
                        "1: subtract polynomial trend from offset data (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "offset_trackingm",
    },
    "par_ACS_ERS": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) ERS CEOS SAR leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example <orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ACS_ERS",
    },
    "par_ASAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "ASAR/ERS_file",
                    {
                        "desc": "(input) ASAR or ERS data in ASAR format (SAR_IMS_1P) including header "
                        "and image as provided by ESA\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "output_name",
                    {
                        "desc": "(output) common part of output file names (e.g. YYYMMDD date)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "K_dB",
                    {
                        "desc": "Calibration factor in dB (nominal value for all ASAR modes: 55.0)\n"
                        "NOTE: Use - to use the calibration factor provided in the ASAR file "
                        "header\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "to",
                    {
                        "desc": "radiometrically calibrated ground-range intensity images in float " "format\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_ASAR",
    },
    "par_ASF_91": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) ASF CEOS leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_trailer",
                    {
                        "desc": "(input) ASF CEOS trailer file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ASF_91",
    },
    "par_ASF_96": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example <orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ASF_96",
    },
    "par_ASF_PRI": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS data file binary\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) ISP ground range image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) ISP ground range image (enter - for none, FLOAT " "intensity)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ASF_PRI",
    },
    "par_ASF_RSAT_SS": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file (Radarsat-1 SCANSAR)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS data file (Radarsat-1 SCANSAR)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) ISP image parameter file (example <orbit>.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) ISP image (example <orbit>.mli) (enter -  for none, " "short integer)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ASF_RSAT_SS",
    },
    "par_ASF_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example <date>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS data file (example: dat_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data with file and line headers removed (example: " "<date>.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ASF_SLC",
    },
    "par_ASNARO2": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS format SLC data (IMG-PP-AS2*)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS SAR leader file for ASNARO-2 data (LED-AS2*)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd_pp.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC (Spotlight and Stripmap) or SLI (ScanSAR) data file "
                        "(enter - for none, example: yyyymmdd_pp.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "reramp",
                    {
                        "desc": "reramp SLC phase flag (enter - for default)\n"
                        "0: no reramp\n"
                        "1: reramp SLC phase (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_ASNARO2",
    },
    "par_ATLSCI_ERS": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {"desc": "input) CEOS SAR leader file (LEA_01.001)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "CEOS_Image",
                    {
                        "desc": "(input) CEOS image data segment (DAT_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example <orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ATLSCI_ERS",
    },
    "par_CS_SLC_TIF": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) SCS data file in GeoTIFF format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "XML",
                    {
                        "desc": "(input) SCS meta data file in XML format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "trunk",
                    {
                        "desc": "(output) output file name trunk used for output filenames \n"
                        "(example: yyyymmdd -> yyyymmdd_pol_beamid.slc "
                        "yyyymmdd_pol_beamid.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_CS_SLC_TIF",
    },
    "par_Capella_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) Capella image data file in GeoTIFF format (*.tif)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ext_JSON",
                    {
                        "desc": "(input) Capella extended metadata file in JSON format " "(*_extended.json)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (enter - for none, example: " "yyyymmdd.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: beta0 (default)\n"
                        "1: sigma0\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "noise",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels (default)\n"
                        "1: use noise levels\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_Capella_SLC",
    },
    "par_EORC_JERS_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) CEOS SAR leader file for JERS SLC processed by EORC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS format SLC data (IMOP_01.DAT, enter - for " "none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "slc",
                    {
                        "desc": "(output) reformated JERS SLC (example: yyyymmdd.slc, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_EORC_JERS_SLC",
    },
    "par_EORC_PALSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file for PALSAR or PALSAR-2 Level 1.1 SLC " "data (LED...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP image parameter file (example: yyyymmdd.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) PALSAR CEOS format Level 1.1 SLC (IMG...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) reformatted PALSAR SLC (example: yyyymmdd.slc, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data type (enter - for default)\n" "0: FCOMPLEX (default)\n" "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_dB",
                    {
                        "desc": "scale factor for FCOMPLEX -> SCOMPLEX, (enter - for default: "
                        "HH,VV (dB): 60.0000, VH,HV: 70.0000)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_EORC_PALSAR",
    },
    "par_EORC_PALSAR_ScanSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS image file for a PALSAR2 ScanSAR burst " "data subswath (IMG...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file for PALSAR2 ScanSAR burst data " "(LED...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP image parameter file (example: " "yyyymmdd_b1_hh.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (enter - for none, example: " "yyyymmdd_b1_hh.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "TOPS_par",
                    {
                        "desc": "(output) SLC burst annotation file (enter - for none, "
                        "example: yyyymmdd_b1_hh.slc.tops_par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "afmrate",
                    {
                        "desc": "azimuth FM rate estimation method (enter - for "
                        "default)\n"
                        "0: beam velocity on the ground\n"
                        "1: platform velocity (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "flip",
                    {
                        "desc": "shift azimuth spectrum by fs/2 (enter - for default)\n" "0: no\n" "1: yes (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "reramp",
                    {
                        "desc": "reramp data using Doppler centroid and azimuth FM rate "
                        "estimate (enter - for default)\n"
                        "0: no\n"
                        "1: yes (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_EORC_PALSAR_ScanSAR",
    },
    "par_EORC_PALSAR_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file for PALSAR Level 1.5 ellipsoid "
                        "geocoded (GEC) data (LED...P1.5GUA)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) ISP image parameter file (example: " "yyyymmdd_map.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(output) DIFF/GEO DEM parameter file (example: " "yyyymmdd_map.dem_par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) PALSAR CEOS format Level 1.5 GEC MLI data " "(IMG...P1.5GUA)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) reformatted PALSAR GEC MLI image (example: "
                        "yyyymmdd_map.mli, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "cal",
                    {
                        "desc": "radiometric calibration factor in dB (enter - for default: " "read from CEOS data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_EORC_PALSAR_geo",
    },
    "par_ERSDAC_PALSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "VEXCEL_SLC_par",
                    {
                        "desc": "input) ERSDAC SLC parameter file Level 1.1 " "(PASL11*.SLC.par)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP image parameter file (example: " "yyyymmdd.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ERSDAC_PALSAR",
    },
    "par_ESA_ERS": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) ERS CEOS SAR leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: <date>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_DAT",
                    {
                        "desc": "(input) CEOS data file (example: DAT_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data with file and line headers removed (example: " "<date>.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ESA_ERS",
    },
    "par_ESA_JERS_SEASAT_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS format SLC data (DAT_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS SAR leader file for JERS SLC processed by " "ESA (LEA_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: " "yyyymmdd.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (enter - for none, example: " "yyyymmdd.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_ESA_JERS_SEASAT_SLC",
    },
    "par_ESA_PALSAR_GDH": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS image file for PALSAR or PALSAR-2 Level 1.5 GDH " "data (IMG...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file for PALSAR or PALSAR-2 Level 1.5 " "GDH data (LED...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI parameter file (example: yyyymmdd_pp.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) MLI data file in slant range geometry (example: "
                        "yyyymmdd_pp.mli, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) GRD parameter file (example: yyyymmdd_pp.grd.par, " "enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) GRD data file (example: yyyymmdd_pp.grd, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rps",
                    {
                        "desc": "slant range pixel spacing (m) (enter - for default: "
                        "calculated from ground-range parameters)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_ESA_PALSAR_GDH",
    },
    "par_GF3_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) Gaofen-3 data file in GeoTIFF format (*.tiff) (enter - for " "none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "annotation_XML",
                    {
                        "desc": "(input) Gaofen-3 annotation file in XML format (*.meta.xml)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) ISP SLC data file (example: yyyymmdd.slc) (enter - for "
                        "none, SLC output will not be produced)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_GF3_SLC",
    },
    "par_HISEA1_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) image data file in GeoTIFF format (enter - for none, " "*.tiff)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "annotation_XML",
                    {
                        "desc": "(input) Hisea-1 L1 XML annotation file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "calibration_XML",
                    {
                        "desc": "(input) Hisea-1 L1 radiometric calibration XML file (enter - for "
                        "no radiometric calibration)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd_vv.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (enter - for none, example: " "yyyymmdd_vv.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data type (enter - for default)\n" "0: FCOMPLEX (default)\n" "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_dB",
                    {
                        "desc": "scale factor for FCOMPLEX -> SCOMPLEX, (enter - for default: "
                        "HH,VV (dB): 60.0000,  VH,HV: 70.0000)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "shift",
                    {
                        "desc": "shift azimuth spectrum by fs/2 (enter - for default)\n" "0: no\n" "1: yes (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_HISEA1_SLC",
    },
    "par_ICEYE_GRD": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) ICEYE GRD data file in GeoTIFF format (enter - for none, " "*.tif)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(input) ICEYE XML annotation file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mli",
                    {
                        "desc": "(output) MLI parameter file (example: yyyymmdd.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) MLI data file in slant range geometry (example: "
                        "yyyymmdd.mli, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) GRD parameter file (example: yyyymmdd.grd.par, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rps",
                    {
                        "desc": "slant range pixel spacing (m) (enter - for default: calculated "
                        "from ground-range parameters)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_ICEYE_GRD",
    },
    "par_IECAS_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "aux_data",
                    {
                        "desc": "(input) IECAS SAR auxillary data (POS*.dat)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "slc_Re",
                    {
                        "desc": "(input) real part of complex SLC data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "slc_Im",
                    {
                        "desc": "(input) imaginary part of complex SLC data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "date",
                    {
                        "desc": "(input) acquistion date format: YYYYMMDD (example 20110121) from "
                        "aux_data filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_IECAS_SLC",
    },
    "par_JERS_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file for JERS-1 L2 geocoded data " "(SARL_*.DAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) JERS-1 CEOS format L2 terrain-geocoded MLI data " "(IMOP_*.DAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) ISP image parameter file (example: " "yyyymmdd_map.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(output) DIFF/GEO DEM parameter file (example: yyyymmdd.dem_par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GEO",
                    {
                        "desc": "(output) calibrated and geocoded JERS-1 image (example: "
                        "yyyymmdd_map.mli, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_JERS_geo",
    },
    "par_KC_PALSAR_slr": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "facter_m",
                    {
                        "desc": "(input) PALSAR Kyoto-Carbon parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) PALSAR Kyoto-Carbon leader file (LED)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP image parameter file (example: " "yyyymmdd_pp.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("pol", {"desc": "polarization e.g. HH or HV\n", "optional": False, "type": "unknown"}),
                (
                    "pls_mode",
                    {
                        "desc": "PALSAR acquisition mode:\n"
                        "1: Fine Beam Single\n"
                        "2: Fine Beam Double\n"
                        "3: Wide Beam\n",
                        "enum": [1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "KC_data",
                    {
                        "desc": "(input) PALSAR Kyoto-Carbon data (named sar_Q*.dat_*)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr",
                    {
                        "desc": "(output) PALSAR Kyoto-Carbon data strip expressed as SAR "
                        "intensity (enter - for none, example: yyyymmdd_pp.mli)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "fdtab",
                    {
                        "desc": "(output) table of output polynomials, one polynomial/block "
                        "used as input to gc_map_fd (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_KC_PALSAR_slr",
    },
    "par_MSP": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC/MLI_par",
                    {
                        "desc": "(output) ISP SLC/MLI image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "image_format",
                    {
                        "desc": "image format flag (default: from MSP processing parameter file)\n"
                        "0: FCOMPLEX (pairs of 4-byte float)\n"
                        "1: SCOMPLEX (pairs of 2-byte short integer)\n"
                        "2: FLOAT (4-bytes/value)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_MSP",
    },
    "par_NovaSAR_GRD": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) NovaSAR image data file in GeoTIFF format (enter - for " "none, *.tif)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "XML",
                    {
                        "desc": "(input) NovaSAR XML annotation file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "image polarization: HH, VV, HV, VH, CH, CV\n", "optional": False, "type": "unknown"},
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI parameter file (example: yyyymmdd_pp.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) MLI data file in slant range geometry (example: "
                        "yyyymmdd_pp.mli, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) GRD parameter file (example: yyyymmdd_pp.grd.par, " "enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) GRD data file (example: yyyymmdd_pp.grd, enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rps",
                    {
                        "desc": "slant range pixel spacing (m) (enter - for default: calculated "
                        "from ground-range parameters)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: beta0 (default)\n"
                        "1: sigma0\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "noise",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels (default)\n"
                        "1: use noise levels\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_NovaSAR_GRD",
    },
    "par_NovaSAR_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) NovaSAR image data file in GeoTIFF format (enter - for " "none, *.tif)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "XML",
                    {
                        "desc": "(input) NovaSAR XML annotation file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "image polarization: HH, VV, HV, VH, CH, CV\n", "optional": False, "type": "unknown"},
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: " "yyyymmdd_pp.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (enter - for none, example: " "yyyymmdd_pp.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data type (enter - for default: same as input)\n"
                        "0: FCOMPLEX\n"
                        "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: beta0 (default)\n"
                        "1: sigma0\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "noise",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels (default)\n"
                        "1: use noise levels\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_NovaSAR_SLC",
    },
    "par_NovaSAR_SRD": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) NovaSAR image data file in GeoTIFF format (enter - for " "none, *.tif)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "XML",
                    {
                        "desc": "(input) NovaSAR XML annotation file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "image polarization: HH, VV, HV, VH, CH, CV\n", "optional": False, "type": "unknown"},
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI parameter file (example: yyyymmdd_pp.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) MLI data file in slant range geometry (example: "
                        "yyyymmdd_pp.mli, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: beta0 (default)\n"
                        "1: sigma0\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "noise",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels (default)\n"
                        "1: use noise levels\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_NovaSAR_SRD",
    },
    "par_PRI": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) ERS CEOS SAR leader file for PRI product\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PRI_par",
                    {
                        "desc": "(output) ISP image parameter file (example: <yyyymmdd>.pri.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_DAT",
                    {
                        "desc": "(input) CEOS data file (example: DAT_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PRI",
                    {
                        "desc": "(output) PRI data with file and line headers removed (example: " "<yyyymmdd>.pri)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_PRI",
    },
    "par_PRI_ESRIN_JERS": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) ERS CEOS SAR leader file for PRI product\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PRI_par",
                    {
                        "desc": "(output) ISP image parameter file (example: " "<yyyymmdd>.pri.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_DAT",
                    {
                        "desc": "(input) CEOS data file (example: DAT_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PRI",
                    {
                        "desc": "(output) PRI data with file and line headers removed " "(example: <yyyymmdd>.pri)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_PRI_ESRIN_JERS",
    },
    "par_PulSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {
                        "desc": "(input) ERS CEOS SAR leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example <orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_PulSAR",
    },
    "par_RCM_GRC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "RCM_dir",
                    {
                        "desc": "(input) Radarsat Constellation main directory path (e.g.: "
                        "RCM3_OK1001322_PK1001415_1_5M4_20160417_004803_VV_GRC)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "image polarization: HH, VV, HV, VH, CH, CV\n", "optional": False, "type": "unknown"},
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: Beta Nought\n"
                        "2: Sigma Nought\n"
                        "3: Gamma\n",
                        "enum": [0, 1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "noise",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels file (default)\n"
                        "1: use noise levels file\n"
                        "NOTE: noise levels file can only be used for radiometrically "
                        "calibrated data (radcal flag: 1, 2, or 3)\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) SLC parameter file (example: yyyymmdd_pp.slc.par, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file in slant range geometry (example: "
                        "yyyymmdd_pp.slc, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRC_par",
                    {
                        "desc": "(output) GRC parameter file (example: yyyymmdd_pp.grc.par, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRC",
                    {
                        "desc": "(output) GRC data file (example: yyyymmdd_pp.grc, enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rps",
                    {
                        "desc": "slant range pixel spacing (m) (enter - for default: calculated from "
                        "ground-range parameters)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "noise_pwr",
                    {
                        "desc": "(output) noise intensity for each SLC sample in slant range using "
                        "data from noise levels file (enter - for none)\n"
                        "NOTE: when the noise_pwr file is specified, noise power correction "
                        "will NOT be applied to the GRC / SLC data values\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_RCM_GRC",
    },
    "par_RCM_GRD": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "RCM_dir",
                    {
                        "desc": "(input) Radarsat Constellation main directory path (e.g.: "
                        "RCM1_OK1001327_PK1001418_1_3M28_20160417_013625_HH_GRD)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "image polarization: HH, VV, HV, VH, CH, CV\n", "optional": False, "type": "unknown"},
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: Beta Nought\n"
                        "2: Sigma Nought\n"
                        "3: Gamma\n",
                        "enum": [0, 1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "noise",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels file (default)\n"
                        "1: use noise levels file\n"
                        "NOTE: noise levels file can only be used for radiometrically "
                        "calibrated data (radcal flag: 1, 2, or 3)\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI parameter file (example: yyyymmdd_pp.mli.par, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) MLI data file in slant range geometry (example: "
                        "yyyymmdd_pp.mli, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) GRD parameter file (example: yyyymmdd_pp.grd.par, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) GRD data file (example: yyyymmdd_pp.grd, enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rps",
                    {
                        "desc": "slant range pixel spacing (m) (enter - for default: calculated from "
                        "ground-range parameters)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "noise_pwr",
                    {
                        "desc": "(output) noise intensity for each MLI sample in slant range using "
                        "data from noise levels file (enter - for none)\n"
                        "NOTE: when the noise_pwr file is specified, noise power correction "
                        "will NOT be applied to the GRD / MLI data values\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_RCM_GRD",
    },
    "par_RCM_MLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "RCM_dir",
                    {
                        "desc": "(input) Radarsat Constellation main directory path (e.g.: "
                        "RCM2_OK1782060_PK1782073_2_SC30MCPC_20200504_105537_CH_CV_MLC)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: Beta Nought\n"
                        "2: Sigma Nought\n"
                        "3: Gamma\n",
                        "enum": [0, 1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "noise",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels file (default)\n"
                        "1: use noise levels file\n"
                        "NOTE: noise levels file can only be used for radiometrically "
                        "calibrated data (radcal flag: 1, 2, or 3)\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "root_name",
                    {
                        "desc": "(output) root name of the generated output files (example: "
                        "yyyymmdd)\n"
                        "NOTE: the program will automatically complete the root_name and add "
                        "extensions for each covariance matrix element\n"
                        "for both data and parameter files, such as 20210927_CH.mlc, "
                        "20210927_CH.mlc.par, 20210927_XC.mlc, etc.\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_RCM_MLC",
    },
    "par_RCM_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "RCM_dir",
                    {
                        "desc": "(input) Radarsat Constellation main directory path (e.g.: "
                        "RCM2_OK1002260_PK1002436_3_SC50MB_20160417_002427_VH_VV_SLC)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "image polarization: HH, VV, HV, VH, CH, CV\n", "optional": False, "type": "unknown"},
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: Beta Nought\n"
                        "2: Sigma Nought\n"
                        "3: Gamma\n",
                        "enum": [0, 1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "noise",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels file (default)\n"
                        "1: use noise levels file\n"
                        "NOTE: noise levels file can only be used for radiometrically "
                        "calibrated data (radcal flag: 1, 2, or 3)\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd_pp.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (example: yyyymmdd_pp.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "noise_pwr",
                    {
                        "desc": "(output) noise intensity for each SLC sample in slant range using "
                        "data from noise levels file (enter - for none)\n"
                        "NOTE: when the noise_pwr file is specified, noise power correction "
                        "will NOT be applied to the SLC data values\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_RCM_SLC",
    },
    "par_RCM_SLC_ScanSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "RCM_dir",
                    {
                        "desc": "(input) Radarsat Constellation main directory path (e.g.: "
                        "RCM2_OK1002260_PK1002436_3_SC50MB_20160417_002427_VH_VV_SLC)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "image polarization: HH, VV, HV, VH, CH, CV\n", "optional": False, "type": "unknown"},
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: none (default)\n"
                        "1: Beta Nought\n"
                        "2: Sigma Nought\n"
                        "3: Gamma\n",
                        "enum": [0, 1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "noise_in",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels file (default)\n"
                        "1: use noise levels file\n"
                        "NOTE: noise levels file can only be used for "
                        "radiometrically calibrated data (radcal flag: 1, 2, or 3)\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "root_name",
                    {
                        "desc": "(output) root name of the generated output files (example: "
                        "yyyymmdd_pp)\n"
                        "NOTE: the program will automatically complete the root_name "
                        "with beam numbers and extensions for the SLC, SLC_par, and "
                        "TOPS_par files\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_tab",
                    {
                        "desc": "(output) 3 column list of SLC, SLC_par, and TOPS_par files, "
                        "with the beams sorted from near to far range (example: "
                        "yyyymmdd_pp.SLC_tab)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "beam",
                    {
                        "desc": "number specifying the desired ScanSAR beam number (enter - "
                        "for default: extract all beams)\n"
                        "NOTE: enter 0 to get the list of the available beams\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "noise_out",
                    {
                        "desc": "output noise intensity for each SLC sample in slant range "
                        "flag (enter - for default)\n"
                        "0: do not write noise intensity files (default)\n"
                        "1: write noise intensity files (file name(s) automatically "
                        "defined)\n"
                        "NOTE: when noise intensity files are written, noise power "
                        "correction will NOT be applied to the SLC data values\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_RCM_SLC_ScanSAR",
    },
    "par_RCM_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "RCM_dir",
                    {
                        "desc": "(input) Radarsat Constellation main directory path (e.g.: "
                        "RCM2_OK1028884_PK1029284_1_16M12_20191214_111155_HH_HV_GCD)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "image polarization: HH, VV, HV, VH, CH, CV\n", "optional": False, "type": "unknown"},
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) ISP image parameter file (example: yyyymmdd.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(output) DIFF/GEO DEM parameter file (example: yyyymmdd.dem_par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GEO",
                    {
                        "desc": "(output) geocoded and calibrated image data file (example: " "yyyymmdd.geo)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data type for complex data (enter - for default)\n"
                        "0: FCOMPLEX (default)\n"
                        "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ps",
                    {
                        "desc": "pixel spacing (m or decimal degree) (enter - for default: from " "product.xml)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_RCM_geo",
    },
    "par_RISAT_GRD": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS SAR leader file (example: lea_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "BAND_META",
                    {
                        "desc": "(input) BAND_META.txt, additional RISAT system parameters for the "
                        "scene (format keywork=value)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) ISP GRD parameter file (example: YYYYMMDD.grd.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_image",
                    {
                        "desc": "(input) CEOS Ground-Range image file (example: dat_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) Ground-Range data with file and line headers removed "
                        "(enter - for none: example: YYYYMMDD.grd)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "line_dir",
                    {
                        "desc": "set output image line direction (enter - for default):\n"
                        "0: used value derived from CEOS leader file\n"
                        "1: retain input data line direction  (default)\n"
                        "-1: reverse input data line direction\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pix_dir",
                    {
                        "desc": "set output pixel direction (enter - for default):\n"
                        "0: used value derived from CEOS leader file\n"
                        "1: retain input data pixel direction (default)\n"
                        "-1: reverse input data pixel direction\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cal_flg",
                    {
                        "desc": "calibration flag (enter - for default):\n"
                        "0: do not apply radiometric calibration\n"
                        "1: apply radiometric calibration including KdB and incidence "
                        "angle correction (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "KdB",
                    {
                        "desc": "calibration constant (dB) (enter - to use value in the CEOS " "leader)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_RISAT_GRD",
    },
    "par_RISAT_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS SAR leader file (example: lea_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "BAND_META",
                    {
                        "desc": "(input) BAND_META.txt, additional RISAT system parameters for the "
                        "scene (format keywork=value)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC image parameter file (example: " "YYYYMMDD.grd.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_image",
                    {
                        "desc": "(input) CEOS SLC image file (example: dat_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data with file and line headers removed (enter - for "
                        "none: example: YYYYMMDD.grd)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "line_dir",
                    {
                        "desc": "set output image line direction (enter - for default):\n"
                        "0: used value derived from CEOS leader file\n"
                        "1: retain input data line direction  (default)\n"
                        "-1: reverse input data line direction\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pix_dir",
                    {
                        "desc": "set output pixel direction (enter - for default):\n"
                        "0: used value derived from CEOS leader file\n"
                        "1: retain input data pixel direction (default)\n"
                        "-1: reverse input data pixel direction\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cal_flg",
                    {
                        "desc": "calibration flag (enter - for default):\n"
                        "0: do not apply radiometric calibration\n"
                        "1: apply radiometric calibration including KdB and incidence "
                        "angle correction (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "KdB",
                    {
                        "desc": "calibration constant (dB) (enter - to use value in the CEOS " "leader)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_RISAT_SLC",
    },
    "par_RISAT_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "annotation_XML",
                    {
                        "desc": "(input) RISAT-1 product annotation XML file (product.xml)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) image data file in GeoTIFF format (imagery_pp.tif)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {
                        "desc": "(input) polarization RV, RH of the GeoTIFF image data\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(output) DIFF/GEO DEM parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) ISP image parameter file (example: " "yyyymmdd_pp.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) SLC data file (example: yyyymmdd_pp.mli)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_RISAT_geo",
    },
    "par_RSAT2_SG": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "product_XML",
                    {
                        "desc": "(input) Radarsat-2 product annotation XML file (product.xml)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lut_XML",
                    {
                        "desc": "(input) Radarsat-2 calibration XML file (lutSigma.xml), use - for " "no calibration\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) image data file in GeoTIFF format (imagery_PP.tif)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "(input) image polarization: HH, VV, HV, VH\n", "optional": False, "type": "unknown"},
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI parameter file (example: yyyymmdd_pp.mli.par, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) MLI data file in slant range geometry (example: "
                        "yyyymmdd_pp.mli, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) GRD parameter file (example: yyyymmdd_pp.grd.par, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) GRD data file (example: yyyymmdd_pp.grd, enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rps",
                    {
                        "desc": "slant range pixel spacing (m) (enter - for default: calculated "
                        "from ground-range parameters)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_RSAT2_SG",
    },
    "par_RSAT2_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "product_XML",
                    {
                        "desc": "(input) Radarsat-2 product annotation XML file (product.xml)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lut_XML",
                    {
                        "desc": "(input) Radarsat-2 calibration XML file (lutSigma.xml), use - for " "no calibration\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) image data file in GeoTIFF format (imagery_PP.tif)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "polarization",
                    {"desc": "(input) image polarization: HH, VV, HV, VH\n", "optional": False, "type": "unknown"},
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd_pp.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (example: yyyymmdd_pp.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_RSAT2_SLC",
    },
    "par_RSAT_SCW": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS SAR leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_trailer",
                    {
                        "desc": "(input) CEOS SAR trailer file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS data file binary)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) ISP ground range image parameter file (example " "<orbit>.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) ISP ground range image (example <orbit>.mli) (enter -  " "for none, float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sc_dB",
                    {
                        "desc": "intensity scale factor in dB (enter - for default:   0.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dt",
                    {
                        "desc": "azimuth image time offset (s) (enter - for default = 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_RSAT_SCW",
    },
    "par_RSAT_SGF": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file (RSI SGF or SCW16 products, LEA_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS data file (RSI SGF or SCW16 products, DAT_01.001) \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) ISP ground range image parameter file (example " "<orbit>.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) ISP ground range image (example <orbit>.grd.par) (enter "
                        "-  for none, float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sc_dB",
                    {
                        "desc": "intensity scale factor in dB (enter - for default:   0.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dt",
                    {
                        "desc": "azimuth image time offset (s) (enter - for default = 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_RSAT_SGF",
    },
    "par_RSAT_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS SAR leader file (example: lea_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: <date>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) CEOS data file (example: dat_01.001)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data with file and line headers removed (example: " "<date>.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "sc_dB",
                    {
                        "desc": "intensity scale factor in dB (enter - for default:  60.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dt",
                    {
                        "desc": "azimuth image time offset (s) (enter - for default = 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_RSAT_SLC",
    },
    "par_RSI_ERS": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_SAR_leader",
                    {"desc": "input) ERS CEOS SAR leader file\n", "optional": False, "type": "unknown"},
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example <orbit>.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_RSI_ERS",
    },
    "par_S1_GRD": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) image data file in GeoTIFF format (enter - for none, " "*.tiff)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "annotation_XML",
                    {
                        "desc": "(input) Sentinel-1 L1 XML annotation file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "calibration_XML",
                    {
                        "desc": "(input) Sentinel-1 L1 radiometric calibration XML file (enter - for "
                        "no radiometric calibration)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "noise_XML",
                    {
                        "desc": "(input) Sentinel-1 L1 noise XML file (enter - to not subtract "
                        "thermal noise power level)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) MLI parameter file (example: yyyymmdd_pp.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(output) MLI data file in slant range geometry (example: "
                        "yyyymmdd_pp.mli, enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "(output) GRD parameter file (example: yyyymmdd_pp.grd.par, enter - " "for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) GRD data file (example: yyyymmdd_pp.grd, enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "eflg",
                    {
                        "desc": "GR-SR grid extrapolation flag (enter - for default)\n"
                        "0: no extrapolation of the GR-SR grid beyond the grid boundaries\n"
                        "1: permit extrapolation of the GR-SR grid to cover the entire image "
                        "(default)\n"
                        "NOTE: extrapolation of the GR-SR grid may introduce geocoding "
                        "errors\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rps",
                    {
                        "desc": "slant range pixel spacing (m) (enter - for default: calculated from "
                        "ground-range parameters)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "noise_pwr",
                    {
                        "desc": "noise intensity for each MLI sample in slant range using data from "
                        "noise_XML\n"
                        "NOTE: when the noise_pwr file is specified, noise power correction "
                        "will NOT be applied to the MLI data values\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "edge_flag",
                    {
                        "desc": "edge cleaning flag (enter - for default)\n"
                        "0: do not clean edges (default for Sentinel-1 IPF version >= 2.90)\n"
                        "1: basic method\n"
                        "2: elaborate method based on Canny edge detection (default for "
                        "Sentinel-1 IPF version < 2.90)\n"
                        "3: force basic method when Sentinel-1 IPF version >= 2.90\n"
                        "4: force elaborate method based on Canny edge detection when "
                        "Sentinel-1 IPF version >= 2.90\n"
                        "NOTE: options 1 and 2 are changed to 0 when Sentinel-1 IPF version "
                        ">= 2.90\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to starting line of the input segment (default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to read from the file beginning at loff (default: to "
                        "end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_S1_GRD",
    },
    "par_S1_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) image data file in GeoTIFF format (enter - for none, " "*.tiff)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "annotation_XML",
                    {
                        "desc": "(input) Sentinel-1 L1 XML annotation file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "calibration_XML",
                    {
                        "desc": "(input) Sentinel-1 L1 radiometric calibration XML file (enter - for "
                        "no radiometric calibration)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "noise_XML",
                    {
                        "desc": "(input) Sentinel-1 L1 noise XML file (enter - to not subtract "
                        "thermal noise power level)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd_iw1_vv.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (enter - for none, example: " "yyyymmdd_iw1_vv.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "TOPS_par",
                    {
                        "desc": "(output) SLC burst annotation file, TOPS and EW SLC data only (enter "
                        "- for none, example: yyyymmdd_iw1_vv.slc.tops_par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data type (enter - for default)\n" "0: FCOMPLEX (default)\n" "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_dB",
                    {
                        "desc": "scale factor for FCOMPLEX -> SCOMPLEX, (enter - for default: HH,VV "
                        "(dB): 60.0000,  VH,HV: 70.0000)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "noise_pwr",
                    {
                        "desc": "noise intensity for each SLC sample in slant range using data from "
                        "noise_XML (enter - for none)\n"
                        "NOTE: when the noise_pwr file is specified, noise power will NOT be "
                        "subtracted from the image data values\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_S1_SLC",
    },
    "par_SAOCOM_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) SAOCOM image data file in binary format (enter - for "
                        "none, e.g. slc-acqId0000089010-a-tna-0000000000-s3qp-hh)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "XML",
                    {
                        "desc": "(input) SAOCOM XML annotation file (e.g. "
                        "slc-acqId0000089010-a-tna-0000000000-s3qp-hh.xml)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) SLC parameter file (example: yyyymmdd_s3_pp.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (FCOMPLEX, enter - for none, example: " "yyyymmdd_s3_pp.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "TOPS_par",
                    {
                        "desc": "(output) SLC burst annotation file, TOPS data only (enter - for "
                        "none, example: yyyymmdd_s3_vv.slc.tops_par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "RSLC_par",
                    {
                        "desc": "(input) reference SLC parameter file to keep consistent range "
                        "pixel spacing (example: yyyymmdd_s1_pp.slc.par)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_SAOCOM_SLC",
    },
    "par_SICD_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "NITF",
                    {
                        "desc": "(input) Sensor Independent Complex Data (SICD) file in NITF 2.1 "
                        "container file (e.g.: "
                        "CAPELLA_C03_SM_SICD_HH_20210512034455_20210512034459.ntf)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "radcal",
                    {
                        "desc": "radiometric calibration flag (enter - for default)\n"
                        "0: none\n"
                        "1: beta0 (default)\n"
                        "2: sigma0\n"
                        "3: gamma0\n",
                        "enum": [0, 1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "noise",
                    {
                        "desc": "noise levels flag (enter - for default)\n"
                        "0: do not use noise levels (default)\n"
                        "1: use noise levels\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file (enter - for none, example: yyyymmdd.slc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_SICD_SLC",
    },
    "par_SIRC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) JPL SIR-C CEOS leader file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "UTC/MET",
                    {
                        "desc": "time reference for state vectors:\n"
                        "MET (Mission Elapsed Time) or UTC (default=UTC)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_SIRC",
    },
    "par_STRIX": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "CEOS_leader",
                    {
                        "desc": "(input) CEOS leader file for STRIX-alpha SLC data (LED-STRIXA...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP image parameter file (example: yyyymmdd.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CEOS_data",
                    {
                        "desc": "(input) STRIX-alpha CEOS format SLC (IMG-pp-STRIXA...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) reformatted STRIX SLC (example: yyyymmdd.slc, enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_STRIX",
    },
    "par_TX_GRD": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "annotation_XML",
                    {
                        "desc": "(input) Terrasar-X product annotation XML file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "COSAR",
                    {
                        "desc": "(input) image data file in geotiff format\n"
                        "NOTE: make sure the data set contains the selected polarisation)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_par",
                    {
                        "desc": "ISP ground range image parameter file (example: yyyymmdd.grd.par\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) calibrated ground range data file (example: yyyymmdd.grd)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pol",
                    {
                        "desc": "polarisation: HH, HV, VH, VV (default: first polarisation found in "
                        "the annotation_XML)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_TX_GRD",
    },
    "par_TX_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "annotation_XML",
                    {
                        "desc": "(input) TerraSAR-X product annotation XML file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "COSAR",
                    {
                        "desc": "(input) COSAR SSC stripmap or spotlight mode SLC data file\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC data file, example: yyyymmdd.slc (enter - for none, SLC "
                        "output will not be produced)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pol",
                    {
                        "desc": "polarisation HH, HV, VH, VV (enter - for default: first polarisation "
                        "found in the annotation_XML)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data type (enter - for default)\n"
                        "0: same as input (default)\n"
                        "1: FCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_TX_SLC",
    },
    "par_TX_ScanSAR": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "annot_XML",
                    {
                        "desc": "(input) TerraSAR-X ScanSAR product annotation XML file including "
                        "path\n"
                        "NOTE: The path to the image products is determined from the path "
                        "to the XML annotation\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "swath",
                    {
                        "desc": "number specifying the desired ScanSAR swath (1 -> maximum number "
                        "of swaths (4 or 6))\n"
                        "NOTE: The image product name is specified in the XML file\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(output) ISP SLC parameter file (example: yyyymmdd.slc.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(output) SLC ScanSAR data file, example: yyyymmdd.slc (enter - "
                        "for none, SLC output will not be produced)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "TOPS_par",
                    {
                        "desc": "(output) SLC ScanSAR burst annotation file (example: " "yyyymmdd_s1.slc.tops_par\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "bwflg",
                    {
                        "desc": "burst window flag (enter - for default)\n"
                        "0: use first and last annotation line values specified in the "
                        "annot_XML\n"
                        "1: extend first and last valid line to include all data lines "
                        "(default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "output data type (enter - for default)\n"
                        "0: same as input (default)\n"
                        "1: FCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "par_TX_ScanSAR",
    },
    "par_TX_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "annotation_XML",
                    {
                        "desc": "(input) Terrasar-X product annotation XML file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GeoTIFF",
                    {
                        "desc": "(input) image data file in GeoTIFF format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI_par",
                    {
                        "desc": "(output) ISP image parameter file (example: yyyymmdd.mli.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(output) DIFF/GEO DEM parameter file (example: yyyymmdd.dem_par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GEO",
                    {
                        "desc": "(output) geocoded and calibrated image data file (example: " "yyyymmdd.geo)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pol",
                    {
                        "desc": "polarisation HH, HV, VH, VV (default: first polarisation found in "
                        "the annotation_XML)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "par_TX_geo",
    },
    "par_UAVSAR_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "ann",
                    {
                        "desc": "(input) UAVSAR annotation file (*ann.txt or *.ann)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC/MLC_in",
                    {
                        "desc": "(input) UAVSAR binary data file (required for annotation file "
                        "version 1.2) (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC/MLI_par",
                    {
                        "desc": "(output) ISP image parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC/MLI_out",
                    {
                        "desc": "(output) SLC data file (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "image_type",
                    {
                        "desc": "image type flag (enter - for default)\n"
                        "0: SLC (slc) in slant range coordinates (default)\n"
                        "1: MLC (mlc) in slant range coordinates\n"
                        "HHHH*, VVVV*, HVHV* are FLOAT format\n"
                        "HHHV*, HHVV*, HVVV* are FCOMPLEX format\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "image_format",
                    {
                        "desc": "image data format flag (enter - for default)\n"
                        "0: FCOMPLEX (pairs of 4-byte float (re,im)) (default)\n"
                        "2: FLOAT  (4-bytes/value)\n",
                        "enum": [0, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "DOP",
                    {
                        "desc": "(input) UAVSAR Doppler look-up table (if not zero-Doppler) " "(enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_UAVSAR_SLC",
    },
    "par_UAVSAR_geo": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "ann",
                    {
                        "desc": "(input) UAVSAR annotation file (*ann.txt)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC/MLI_par",
                    {
                        "desc": "(output) ISP image parameter file for FLOAT format MLC " "products\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(output) DIFF/GEO DEM parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "par_UAVSAR_geo",
    },
    "pauli": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "SLC_HH",
                    {
                        "desc": "(input) HH single-look complex image (scomplex or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_VV",
                    {
                        "desc": "(input) VV single-look complex image coregistered with SLC_HH (scomplex "
                        "or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_HV",
                    {
                        "desc": "(input) HV single-look complex image coregistered with SLC_HH (scomplex "
                        "or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_HH_par",
                    {
                        "desc": "(input) SLC_HH image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_VV_par",
                    {
                        "desc": "(input) SLC_VV image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_HV_par",
                    {
                        "desc": "(input) SLC_HV image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "P",
                    {
                        "desc": "(output) root file name of Pauli decomposition images: P_alpha.slc, "
                        "P_beta.slc, P_gamma.slc (fcomplex format)\n"
                        "alpha: (S_HH + S_VV)/sqrt(2.0)\n"
                        "beta:  (S_HH - S_VV)/sqrt(2.0)\n"
                        "gamma: sqrt(2.0)*S_HV\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "pauli",
    },
    "ph_slope_base": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "int_in",
                    {
                        "desc": "(input) interferogram (FCOMPLEX) or unwrapped phase (FLOAT) " "(unflattened)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP parameter file for the reference SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "base",
                    {
                        "desc": "(input) baseline file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "int_out",
                    {
                        "desc": "(output) interferogram (FCOMPLEX) or unwrapped phase (FLOAT) with "
                        "phase trend subtracted/added\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "int_type",
                    {
                        "desc": "interferogram type: 0=unwrapped phase, 1=complex interf. " "(default=1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "inverse",
                    {
                        "desc": "subtract/add inversion flag (0=subtract phase ramp, 1=add phase " "ramp (default=0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ph_slope_base",
    },
    "phase_sim": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC1_par",
                    {
                        "desc": "(input) parameter file of reference SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "baseline",
                    {
                        "desc": "(input) baseline parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(input) height relative to the WGS-84 elliposid in the same geometry "
                        "as the mosaic (m) (FLOAT, enter - for none)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "sim_unw",
                    {
                        "desc": "(output) simulated interferometric phase (FLOAT, unwrapped)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ph_flag",
                    {
                        "desc": "range phase trend selection:\n"
                        "0: unflattened interferogram (default)\n"
                        "1: flattened interferogram\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "bflag",
                    {
                        "desc": "baseline selection:\n" "0: initial baseline (default)\n" "1: precision baseline\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "def",
                    {
                        "desc": "(input) LOS deformation rate map (meters/yr, float, enter - for " "none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "delta_t",
                    {
                        "desc": "(input) interferogram time interval (days, required for deformation "
                        "modeling, enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "int_mode",
                    {
                        "desc": "(input) interferometric acquisition mode  (enter - for default):\n"
                        "0: single-pass mode (Tandem-X)\n"
                        "1: repeat-pass mode (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) parameter file of resampled SLC, required if SLC-2 frequency "
                        "differs from SLC-1, (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "ph_mode",
                    {
                        "desc": "phase offset mode:\n"
                        "0: absolute phase (default)\n"
                        "1: subtract phase at image center (height = 0.0) rounded to the "
                        "nearest multiple of 2PI\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "phase_sim",
    },
    "phase_sim_orb": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC parameter file of reference SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) SLC parameter file of resampled SLC-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(input) height relative to the WGS-84 elliposid in the same "
                        "geometry as the mosaic (m) (FLOAT, enter - for none)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "sim_orb",
                    {
                        "desc": "(output) simulated interferometric phase (FLOAT, unwrapped)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_ref_par",
                    {
                        "desc": "(input) SLC parameter file of the image used for geometric "
                        "coregistration (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "def",
                    {
                        "desc": "(input) LOS deformation rate map (meters/yr, float, enter - for " "none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "delta_t",
                    {
                        "desc": "(input) interferogram time interval (days, required for "
                        "deformation modeling, enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "int_mode",
                    {
                        "desc": "interferometric acquisition mode (enter - for default)\n"
                        "0: single-pass mode (Tandem-X)\n"
                        "1: repeat-pass mode (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "ph_mode",
                    {
                        "desc": "phase offset mode (enter - for default)\n"
                        "0: absolute phase (default)\n"
                        "1: subtract phase offset that is a multiple of 2PI to improve "
                        "precision\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "phase_sim_orb",
    },
    "phase_slope": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "interf",
                    {
                        "desc": "(input) interferogram (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "slopes",
                    {
                        "desc": "(output) range and azimuth phase slopes (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "win_sz",
                    {
                        "desc": "size of region used for slopes determination (default = 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thres",
                    {
                        "desc": "correlation threshold for accepting slope estimates 0.0 -> 1.0 " "(default=.4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("xmin", {"desc": "starting range pixel offset (default = 0)\n", "optional": True, "type": "unknown"}),
                (
                    "xmax",
                    {"desc": "last range pixel offset (default = width-1)\n", "optional": True, "type": "unknown"},
                ),
                ("ymin", {"desc": "starting azimuth row offset (default = 0)\n", "optional": True, "type": "unknown"}),
                (
                    "ymax",
                    {"desc": "last azimuth row offset (default = nlines-1)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "phase_slope",
    },
    "phase_sum": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "im_list",
                    {
                        "desc": "(input) list of coregistered images (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "sum",
                    {
                        "desc": "(output) sum of input image data files (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("start", {"desc": "starting line (enter - for default: 1)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter -  for default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixav_x",
                    {
                        "desc": "number of pixels to average in width (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixav_y",
                    {
                        "desc": "number of pixels to average in height (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflag",
                    {
                        "desc": "zero flag (enter - for default)\n"
                        "0: interpret 0.0 as missing data value (default)\n"
                        "NOTE: output pixels are set to 0.0 if any of the corresponding input "
                        "pixels has 0.0\n"
                        "1: interpret 0.0 as valid data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "phase_sum",
    },
    "pixel_area": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI_par",
                    {
                        "desc": "(input) ISP MLI or SLC image parameter file (slant-range geometry)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM",
                    {
                        "desc": "(input) DEM data file (or constant height value)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lookup_table",
                    {
                        "desc": "(input) geocoding lookup table (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ls_map",
                    {
                        "desc": "(input) layover and shadow map in map geometry\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "inc_map",
                    {
                        "desc": "(input) local incidence angle map in map geometry (enter - for "
                        "none)\n"
                        "NOTE: required for calculation of pix_gamma0, gamma0_ratio, and "
                        "sig2gam_ratio\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pix_sigma0",
                    {
                        "desc": "(output) sigma0 normalization area in RDC geometry (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pix_gamma0",
                    {
                        "desc": "(output) gamma0 normalization area in RDC geometry (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "nstep",
                    {
                        "desc": "number of steps to divide each dimension of the map pixels (enter - "
                        "for default: 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "area_fact",
                    {
                        "desc": "area factor that is multiplied with the rg/az pixel size to set a "
                        "lower\n"
                        "threshold for the minimal pixel area that is accepted (enter - for "
                        "default: 1.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sigma0_ratio",
                    {
                        "desc": "(output) ratio between ellipsoid and DEM-based sigma0 normalization "
                        "areas (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "gamma0_ratio",
                    {
                        "desc": "(output) ratio between ellipsoid and DEM-based gamma0 normalization "
                        "areas (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "sig2gam_ratio",
                    {
                        "desc": "(output) ratio of ellipsoid sigma0 and DEM-based gamma0 "
                        "normalization areas (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "hgt",
                    {
                        "desc": "(output) height map in RDC geometry (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "pixel_area",
    },
    "pol2rec": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "data1",
                    {
                        "desc": "(input) GPRI data in polar format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par1",
                    {
                        "desc": "(input) SLC/MLI image parameter file describing the GPRI image " "geometry\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(output) GPRI image in rectangular format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_par2",
                    {
                        "desc": "(output) SLC/MLI image parameter file for the output image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pix_size",
                    {
                        "desc": "(output) output pixel size (meters)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type:\n0: FLOAT\n1: FCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "imode",
                    {
                        "desc": "interpolation algorithm (enter - for default)\n"
                        "0: nearest-neighbor\n"
                        "1: bicubic spline (default for FCOMPLEX data)\n"
                        "2: bicubic-log spline \n"
                        "3: bicubic-sqrt spline (default for FLOAT data)\n"
                        "4: B-spline interpolation (default B-spline degree: 5)\n"
                        "5: B-spline interpolation sqrt(x) (default B-spline degree: 5)\n"
                        "6: Lanczos interpolation (default Lanczos function order: 5)\n"
                        "7: Lanczos interpolation sqrt(x) (default Lanczos function order: 5)\n"
                        "NOTE: log and sqrt interpolation modes should only be used with "
                        "non-negative FLOAT data!\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xmin",
                    {
                        "desc": "starting x coordinate (enter - for default: calculated from image)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nx",
                    {
                        "desc": "number of x samples in the output image (enter - for default: "
                        "calculated from image\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ymin",
                    {
                        "desc": "starting y coordinate (enter - for default: calculated from image)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ny",
                    {
                        "desc": "number of y samples in the output image (enter - for default: "
                        "calculated from image\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rmax",
                    {
                        "desc": "maximum slant range in the GPRI image to resample (enter - for default: "
                        "maximum slant range of the input image)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos function order or B-spline degree (2->9) (enter - for default: "
                        "5)\n"
                        "NOTE: center image line of the scan defines the direction of the X "
                        "axis\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "pol2rec",
    },
    "polcoh": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) alpha single-look complex image (scomplex or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) beta single-look complex image coregistered with SLC-1 (scomplex "
                        "or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-3",
                    {
                        "desc": "(input) gamma single-look complex image coregistered with SLC-1 "
                        "(scomplex or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC image parameter file of SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC image parameter file of SLC-2 coregistered with SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC3_par",
                    {
                        "desc": "(input) SLC image parameter file of SLC-3 coregistered with SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "T",
                    {
                        "desc": "(output) root file name of coherence matrix elements (e.g. scene_id): "
                        ".t11, .t22, .t33 (float), .t12, .t13, .t23 (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "T_par",
                    {
                        "desc": "(output) MLI image parameter file associated with the coherence matrix "
                        "element data files\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of range looks used to calculate coherences\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number of azimuth looks used to calculate coherence\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("loff", {"desc": "offset to starting line (default: 0)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of SLC lines to process (enter - for default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "polcoh",
    },
    "polcovar": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) HH single-look complex image (scomplex or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) HV single-look complex image coregistered with SLC-1 (scomplex "
                        "or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-3",
                    {
                        "desc": "(input) VV single-look complex image coregistered with SLC-1 (scomplex "
                        "or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) HH SLC image parameter file of SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) HV SLC image parameter file of SLC-2 coregistered with SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC3_par",
                    {
                        "desc": "(input) VV SLC image parameter file of SLC-3 coregistered with SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "C",
                    {
                        "desc": "(output) root file name of covariance matrix C_3 elements (e.g. "
                        "scene_id): .c11, .c22, .c33 (float), .c12, .c13, .c23 (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "C_par",
                    {
                        "desc": "(output) MLI image parameter file associated with the covariance "
                        "matrix element data files\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of range looks used to calculate covariances\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number of azimuth looks used to calculate covariance\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("loff", {"desc": "offset to starting line (default: 0)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of SLC lines to process (enter - for default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "polcovar",
    },
    "poly2kml": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM/MAP parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras",
                    {
                        "desc": "(input) raster image (SUN/BMP/TIFF format, enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "poly_in",
                    {
                        "desc": "(input) file containing polygon corner coordinates (enter - for " "none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "kml",
                    {
                        "desc": "(output) KML file containing georeferenced polygon corner " "coordinates\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "poly_out",
                    {
                        "desc": "(output) file containing polygon corner coordinates (enter - for " "none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "1.",
                    {
                        "desc": "An existing polygon file <poly_in> is used as input to directly "
                        "generate the KML file using the information\n"
                        "in the <DEM_par> file. No raster image is used in that case (<ras> is "
                        "ignored if specified in the command).\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "poly2kml",
    },
    "poly_mask": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                ("polygon", {"desc": "text file containing polygon vertices\n", "optional": False, "type": "unknown"}),
                (
                    "mode",
                    {
                        "desc": "data masking mode (enter - for default)\n"
                        "0: copy data within polygons, set areas outside polygons to 0 "
                        "(default)\n"
                        "1: copy data outside polygons, set areas within polygons to 0\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input and output data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "2: Sun/BMP/TIFF 8 or 24-bit raster image\n"
                        "3: UNSIGNED CHAR\n"
                        "4: SHORT\n"
                        "5: SCOMPLEX\n"
                        "6: DOUBLE\n"
                        "7: INTEGER\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "poly_mask",
    },
    "poly_math": {"module": "LAT", "params": OrderedDict(), "program": "poly_math"},
    "polyras": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "ras",
                    {
                        "desc": "(input) raster image, SUN raster: *.ras, BMP: *.bmp, TIFF: *.tif\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mag",
                    {
                        "desc": "zoom magnification factor (enter - for default: 2)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win_sz",
                    {
                        "desc": "zoom window size before magnification (enter - for default: 160)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "poly_file",
                    {
                        "desc": "(output) file containing polygon corner coordinates\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "polyras",
    },
    "polyx": {"module": "LAT", "params": OrderedDict(), "program": "polyx"},
    "polyx_phase": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) input data file (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width in pixels\n", "optional": False, "type": "unknown"}),
                (
                    "polygon",
                    {
                        "desc": "(input) polygon data file \n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "report",
                    {
                        "desc": "(output) report on region statistics (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "polyx_phase",
    },
    "pre_rc": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw IQ SAR signal data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rc_data",
                    {
                        "desc": "(output) range compressed data filename\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "prefilt_dec",
                    {
                        "desc": "prefilter decimation factor (enter - for default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset from start of file (enter - for default from " "PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to range compress (enter - for default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr_samp",
                    {
                        "desc": "number of range samples (enter - for default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "kaiser",
                    {
                        "desc": "range chirp Kaiser window parameter beta (enter - for default: 2.120)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "filt_lm",
                    {
                        "desc": "filter length multiplier, FIR length = FIR_lm * prefilt_dec + 1 (enter - "
                        "for default: 8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr_ext",
                    {
                        "desc": "near-range swath extension in samples (enter - for default from " "PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "fr_ext",
                    {
                        "desc": "far-range swath extension in samples  (enter - for default from " "PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pre_ext",
                    {
                        "desc": "pre-azimuth data extension in echoes  (enter - for default from " "PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "post_ext",
                    {
                        "desc": "post-azimuth data extension in echoes (enter - for default from " "PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "RFI_filt",
                    {
                        "desc": "RFI suppression filtering (enter - for default):\n" "0:OFF (default)\n" "1:ON\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "RFI_thres",
                    {
                        "desc": "RFI detection threshold, nominal range 1.1-->1.6 (enter - for default= " "1.500)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "fc_offset",
                    {
                        "desc": "offset of the center of the chirp window as a fraction of the chirp "
                        "bandwidth, range -0.5 to 0.5 (enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win_bw",
                    {
                        "desc": "chirp window bandwidth as a fraction of chirp bandwidth, range: 0.0 to "
                        "1.0 (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "pre_rc",
    },
    "pre_rc_JERS": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rspec",
                    {
                        "desc": "(input) range spectra data file for RFI suppression\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rc_data",
                    {
                        "desc": "(output) range compressed data filename\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "prefilt_dec",
                    {
                        "desc": "prefilter decimation factor (enter - for default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "kaiser",
                    {
                        "desc": "range chirp Kaiser window parameter beta (enter - for default: "
                        "2.120, -30 dB sidelobes)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "filt_lm",
                    {
                        "desc": "filter length multiplier, FIR length = FIR_lm * prefilt_dec + 1 "
                        "(enter - for default: 8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "pre_rc_JERS",
    },
    "pre_rc_RSAT": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rc_data",
                    {
                        "desc": "(output) range compressed data filename\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "prefilt_dec",
                    {
                        "desc": "prefilter decimation factor (default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset (enter - for default=parameter file value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines filter/range compress (enter - for " "default=parameter file value)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr_samp",
                    {
                        "desc": "number of range samples (enter - for default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "kaiser",
                    {
                        "desc": "range chirp Kaiser window parameter beta (default=2.120, -30 dB " "sidelobes)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "filt_lm",
                    {
                        "desc": "filter length multiplier, FIR length = FIR_lm * prefilt_dec + 1 " "(default=8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr_ext",
                    {
                        "desc": "near range swath extension in samples (default from " "PROC_par)pixels\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "fr_ext",
                    {
                        "desc": "far range swath extension in samples (default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "pre_rc_RSAT",
    },
    "prefilt": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rc_data",
                    {
                        "desc": "(input) range compressed SAR data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "prefilt_out",
                    {
                        "desc": "(output) output prefiltered data filename\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "prefilt_dec",
                    {
                        "desc": "prefilter decimation factor (enter - for default from PROC_par)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "filt_lm",
                    {
                        "desc": "filter length multiplier, FIR length = FIR_lm * prefilt_dec + 1 (enter "
                        "- for default: 8)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "prefilt",
    },
    "product": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("data_1", {"desc": "(input) data file 1 (float)\n", "optional": False, "type": "unknown"}),
                ("data_2", {"desc": "(input) data file 2 (float)\n", "optional": False, "type": "unknown"}),
                (
                    "product",
                    {
                        "desc": "(output) product data_1 * data_2 (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "bx",
                    {
                        "desc": "box size in range for averaging (before multiplication, default = 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "by",
                    {
                        "desc": "box size in azimuth for averaging (before multiplication, default = " "bx\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wgt_flag",
                    {
                        "desc": "weighting mode\n"
                        "0: no weighting (default)\n"
                        "1: linear weighting\n"
                        "2: gaussian weighting\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "product",
    },
    "product_cpx": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "f1",
                    {
                        "desc": "(input) data file 1 (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "f2",
                    {
                        "desc": "(input) data file 2 (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "f_out",
                    {
                        "desc": "(output) output file f1 * f2 (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of data samples/line\n", "optional": False, "type": "unknown"}),
                ("start", {"desc": "starting line (default: 1)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - for default, all lines)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "conjg_flg",
                    {
                        "desc": "conjugation flag\n" "0: none (default)\n" "1: conjugate f2 before multiply\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "product_cpx",
    },
    "ptarg": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) SLC in fcomplex or scomplex format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {
                        "desc": "(input) SLC complex samples per line\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "r_samp",
                    {
                        "desc": "(input) point target range sample number\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "az_samp",
                    {
                        "desc": "(input) point target azimuth line number\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ptr_image",
                    {
                        "desc": "(output) oversampled point target image (fcomplex, 1024x1024 samples), "
                        "with and without phase gradient\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "r_plot",
                    {
                        "desc": "(output) range point target response plot data (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "az_plot",
                    {
                        "desc": "(output) azimuth point target response plot data (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_format",
                    {
                        "desc": "input data format flag (default:from MSP processing parameter file)\n"
                        "0: FCOMPLEX (pairs of 4-byte float)\n"
                        "1: SCOMPLEX (pairs of 2-byte short integer)\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "win",
                    {
                        "desc": "maximum search window offset (samples) (integer, default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "azimuth spectrum plotting flag:\n"
                        "0: none (default)\n"
                        "1: output plots in PNG format\n"
                        "2: screen output and PNG format plots\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ptarg",
    },
    "ptarg_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(input) SLC image in FCOMPLEX or SCOMPLEX format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("r_samp", {"desc": "point target range sample number\n", "optional": False, "type": "unknown"}),
                ("az_samp", {"desc": "point target azimuth line number\n", "optional": False, "type": "unknown"}),
                (
                    "ptr_image",
                    {
                        "desc": "(output) oversampled point target image (fcomplex, 1024x1024 "
                        "samples), with and without phase gradient\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "r_plot",
                    {
                        "desc": "(output) range point target response plot data (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "az_plot",
                    {
                        "desc": "(output) azimuth point target response plot data (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ptr_par",
                    {
                        "desc": "(output) measured point target parameters (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "osf",
                    {
                        "desc": "image over-sampling factor, 2, 4, 8, 16, 32, 64 (enter - for default: " "16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win",
                    {
                        "desc": "maximum search window offset (samples) (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting mode flag:\n"
                        "0: none\n"
                        "1: output plots in PNG format (default)\n"
                        "2: screen output\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ptarg_SLC",
    },
    "ptarg_cal_MLI": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "MLI_par",
                    {
                        "desc": "(input) slant-range or ground-range image parameter file for "
                        "detected intensity data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MLI",
                    {
                        "desc": "(input) ground-range or slant range detected image in FLOAT " "format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "r_samp",
                    {
                        "desc": "point target range sample number, target region size is 16x16\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "az_samp",
                    {
                        "desc": "point target azimuth line number, target region size is 16x16\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "psigma",
                    {
                        "desc": "radar cross-section of the calibration target in m**2\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "c_r_samp",
                    {
                        "desc": "clutter region center range sample number, clutter region size is " "16x16\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "c_az_samp",
                    {
                        "desc": "clutter region center azimuth line number, clutter region size is " "16x16\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "ptr_image",
                    {
                        "desc": "(output) oversampled point target image, with and without phase "
                        "gradient, nominal width: 256\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "r_plot",
                    {
                        "desc": "(output) range point target response plot data (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "az_plot",
                    {
                        "desc": "(output) azimuth point target response plot data (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pcal",
                    {
                        "desc": "(output) measured point target parameters and radiometric "
                        "calibration factor (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "osf",
                    {
                        "desc": "image over-sampling factor, 2, 4, 8, 16, 32, 64 (enter - for " "default: 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win",
                    {
                        "desc": "maximum search window offset (samples) (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting mode flag:\n"
                        "0: none\n"
                        "1: output plots in PNG format (default)\n"
                        "2: screen output\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "psz",
                    {
                        "desc": "point target region size (samples) (enter - for default: 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "csz",
                    {
                        "desc": "clutter region size (samples) (enter - for default: 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "theta_inc",
                    {
                        "desc": "incidence angle required for calibration of terrain corrrected " "RISAT-1 images\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ptarg_cal_MLI",
    },
    "ptarg_cal_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC",
                    {
                        "desc": "(input) SLC image in FCOMPLEX or SCOMPLEX format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "r_samp",
                    {
                        "desc": "point target range sample number, target region size is 16x16\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "az_samp",
                    {
                        "desc": "point target azimuth line number, target region size is 16x16\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "psigma",
                    {
                        "desc": "radar cross-section of the calibration target in m**2\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "c_r_samp",
                    {
                        "desc": "clutter region center range sample number, clutter region size is " "16x16\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "c_az_samp",
                    {
                        "desc": "clutter region center azimuth line number, clutter region size is " "16x16\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "ptr_image",
                    {
                        "desc": "(output) oversampled point target image, with and without phase "
                        "gradient, nominal width: 256\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "r_plot",
                    {
                        "desc": "(output) range point target response plot data (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "az_plot",
                    {
                        "desc": "(output) azimuth point target response plot data (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pcal",
                    {
                        "desc": "(output) measured point target parameters and radiometric "
                        "calibration factor (text format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "osf",
                    {
                        "desc": "image over-sampling factor, 2, 4, 8, 16, 32, 64 (enter - for " "default: 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "win",
                    {
                        "desc": "maximum search window offset (samples) (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "plotting mode flag:\n"
                        "0: none\n"
                        "1: output plots in PNG format (default)\n"
                        "2: screen output\n"
                        "3: output plots in PDF format\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "psz",
                    {
                        "desc": "point target region size (samples) (enter - for default: 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "csz",
                    {
                        "desc": "clutter region size (samples) (enter - for default: 16)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "c_image",
                    {
                        "desc": "(output) clutter region image (FCOMPLEX format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ptarg_cal_SLC",
    },
    "quad2cp": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "SLC_HH",
                    {
                        "desc": "(input) HH single-look complex image (scomplex or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_HV",
                    {
                        "desc": "(input) HV single-look complex image (coregistered with "
                        "SLC_HH)(scomplex or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_VH",
                    {
                        "desc": "(input) VH single-look complex image (coregistered with "
                        "SLC_HH)(scomplex or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_VV",
                    {
                        "desc": "(input) VV single-look complex image (coregistered with "
                        "SLC_HH)(scomplex or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_HH_par",
                    {
                        "desc": "(input) SLC_HH image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_HV_par",
                    {
                        "desc": "(input) SLC_HV image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_VH_par",
                    {
                        "desc": "(input) SLC_VH image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_VV_par",
                    {
                        "desc": "(input) SLC_VV image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CP",
                    {
                        "desc": "(output) root file name of the 2 linearly polarized images (H,V): "
                        "(fcomplex format)\n"
                        "RCP transmit: *_RH: 1/(sqrt(2) (S_HH - iS_HV)\n"
                        "*_RV: 1/(sqrt(2) (S_VH - iS_VV)\n"
                        "LCP transmit: *_LH: 1/(sqrt(2) (S_HH + iS_HV)\n"
                        "*_LV: 1/(sqrt(2) (S_VH + iS_VV)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "TX_pol",
                    {
                        "desc": "transmit polarization of synthesized compact mode data:\n"
                        "0: RCP Right Circular Polarziation\n"
                        "1: LCP Left  Circular Polarziation\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "quad2cp",
    },
    "quad_fit": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "unw",
                    {
                        "desc": "(input) unwrapped differential interferogram (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "DIFF_par",
                    {"desc": "(input) differential interferogram parameters\n", "optional": False, "type": "unknown"},
                ),
                (
                    "dr",
                    {
                        "desc": "range spacing in pixels between phase samples (enter - for default: " "4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "daz",
                    {
                        "desc": "azimuth spacing in lines between phase samples (enter - for default: " "4)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "mask",
                    {
                        "desc": "mask (SUN/BMP/TIFF raster format), 0 valued pixels are excluded from "
                        "being included in the model fit (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "plot_data",
                    {
                        "desc": "(output) plot data file (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "model",
                    {
                        "desc": "polynomial phase model (x->range, y->azimuth):\n"
                        "0: a0 + a1*y + a2*x + a3*x*y + a4*x^2 + a5*y^2 (default)\n"
                        "1: a0 + a4*x^2 + a5*y^2\n"
                        "2: a0 + a1*y + a2*x + a3*x*y\n"
                        "3: a0 + a1*y + a2*x\n"
                        "4: a0 + a2*x + a4*x^2\n"
                        "5: a0 + a2*x\n"
                        "6: a0 + a1*y + a5*y^2\n"
                        "7: a0 + a1*y\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "pmodel",
                    {
                        "desc": "(output) 2D phase calculated using the model (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "quad_fit",
    },
    "quad_sub": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "int-1",
                    {
                        "desc": "(input) differential interferogram (float or fcomplex)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "int-2",
                    {
                        "desc": "(output) output interferogram\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "int_type",
                    {
                        "desc": "interferogam type:\n"
                        "0: unwrapped interferometric phase (float)\n"
                        "1: fcomplex interferogram\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "add or subtract phase model:\n"
                        "0: subtract phase model (default)\n"
                        "1: add phase model\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "quad_sub",
    },
    "radcal_MLI": {
        "module": "ISP",
        "params": OrderedDict(
            [
                ("MLI", {"desc": "(input) MLI image (float)\n", "optional": False, "type": "unknown"}),
                (
                    "MLI_PAR",
                    {
                        "desc": "(input) SLC parameter file of input MLI image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file (enter - for images "
                        "in MLI geometry)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CMLI",
                    {
                        "desc": "(output) radiometrically calibrated output MLI (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "antenna",
                    {
                        "desc": "(input) 1-way antenna gain pattern file or - if not provided\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rloss_flag",
                    {
                        "desc": "range spreading loss correction:\n"
                        "0: no correction (default)\n"
                        "1: apply r^3 correction  (all modes except ASAR APS)\n"
                        "2: apply r^4 correction (used only for ASAR APS mode)\n"
                        "-1: undo r^3 correction\n"
                        "-2: undo r^4 correction)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ant_flag",
                    {
                        "desc": "antenna pattern correction:\n"
                        "0: no correction (default)\n"
                        "1: apply antenna pattern correction\n"
                        "-1: undo antenna pattern correction)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "refarea_flag",
                    {
                        "desc": "reference pixel area correction:\n"
                        "0: no pixel area correction (default)\n"
                        "1: calculate sigma0, scale area by sin(inc_ang)/sin(ref_inc_ang)\n"
                        "2: calculate gamma0, scale area by "
                        "sin(inc_ang)/(cos(inc_ang)*sin(ref_inc_ang)\n"
                        "-1: undo sigma0 area scaling factor\n"
                        "-2: undo gamma0 area scaling factor\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("sc_dB", {"desc": "scale factor in dB (default: 0.0)\n", "optional": True, "type": "unknown"}),
                (
                    "K_dB",
                    {
                        "desc": "calibration factor in dB (default: -(value from MLI_PAR))\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pix_area",
                    {
                        "desc": "(output) ellipsoid-based ground range sigma0 or gamma0 pixel "
                        "reference area (float)\n"
                        "refarea_flag 1 or -1: sigma0 ref. area\n"
                        "refarea_flag 2 or -2: gamma0 ref. area\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "radcal_MLI",
    },
    "radcal_PRI": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "PRI",
                    {
                        "desc": "(input) PRI ground-range image (short integer, sqrt(backscat. " "intensity)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PRI_PAR",
                    {
                        "desc": "(input) SLC parameter file of input PRI ground-range image " "(yyyymmdd.pri.par)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD",
                    {
                        "desc": "(output) calibrated ground-range image (float, backscat. " "intensity)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "GRD_PAR",
                    {
                        "desc": "(output) ISP image parameter file of output calibrated ground-range "
                        "image (yyyymmdd.grd.par)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "K_dB",
                    {
                        "desc": "calibration factor in decibels (default: 59.75 dB)\n"
                        "ERS1 (D-Paf,ESRIN): 58.24 dB, ERS2 (D-Paf,ESRIN,I-Paf,UK-Paf after "
                        "1997): 59.75 dB\n"
                        "ENVISAT ASAR: 55.0 dB (all modes)\n"
                        "for details see product specifications and ESA publications.\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "inc_ref",
                    {
                        "desc": "reference incidence angle in deg. (default: 23.0 deg.)\n"
                        "ENVISAT ASAR: 90.0 deg. (all modes)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "roff",
                    {"desc": "offset to starting range sample (default: 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nr",
                    {
                        "desc": "number of range samples (default: 0, to end of line)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to starting line (default: 0, 1 header line in the input file "
                        "is assumed for ERS)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to copy (default: 0, to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "radcal_PRI",
    },
    "radcal_SLC": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC",
                    {
                        "desc": "(input) SLC (fcomplex or scomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_PAR",
                    {
                        "desc": "(input) SLC parameter file of input SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CSLC",
                    {
                        "desc": "(output) radiometrically calibrated SLC (fcomplex or scomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "CSLC_PAR",
                    {
                        "desc": "(output) SLC parameter file of output calibrated SLC\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "fcase",
                    {
                        "desc": "format case (default = 1)\n"
                        "1: fcomplex --> fcomplex (pairs of float)\n"
                        "2: fcomplex --> scomplex (pairs of short integer)\n"
                        "3: scomplex --> fcomplex\n"
                        "4: scomplex --> scomplex\n",
                        "enum": [1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "antenna",
                    {
                        "desc": "1-way antenna gain pattern file or - (if not provided)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rloss_flag",
                    {
                        "desc": "range spreading loss correction:\n"
                        "0: no correction (default)\n"
                        "1: apply r^3 correction  (all modes except ASAR APS)\n"
                        "2: apply r^4 correction (used only for ASAR APS mode)\n"
                        "-1: undo r^3 correction\n"
                        "-2: undo r^4 correction)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ant_flag",
                    {
                        "desc": "antenna pattern correction:\n"
                        "0: no correction (default)\n"
                        "1: apply antenna pattern correction\n"
                        "-1: undo antenna pattern correction)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "refarea_flag",
                    {
                        "desc": "reference pixel area correction:\n"
                        "0: no pixel area correction (default)\n"
                        "1: calculate sigma0, scale area by sin(inc_ang)/sin(ref_inc_ang)\n"
                        "2: calculate gamma0, scale area by "
                        "sin(inc_ang)/(cos(inc_ang)*sin(ref_inc_ang)\n"
                        "-1: undo sigma0 area scaling factor\n"
                        "-2: undo gamma0 area scaling factor\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("sc_dB", {"desc": "scale factor in dB (default: 0.0)\n", "optional": True, "type": "unknown"}),
                (
                    "K_dB",
                    {
                        "desc": "calibration factor in dB (default: -(value from SLC_PAR) )\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pix_area",
                    {
                        "desc": "(output) ellipsoid-based ground range sigma0 or gamma0 pixel "
                        "reference area (float)\n"
                        "refarea_flag 1 or -1: sigma0 ref. area\n"
                        "refarea_flag 2 or -2: gamma0 ref. area\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "radcal_SLC",
    },
    "radcal_pwr_stat": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_tab",
                    {
                        "desc": "(input) two column list of the SLC filenames and SLC parameter "
                        "filenames of the uncalibrated SLC images\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC_tab_cal",
                    {
                        "desc": "(input) two column list of the SLC filenames and SLC parameter "
                        "filenames of the calibrated SLC images (enter - for none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "plist",
                    {
                        "desc": "(input) point list for the point to use for calibraton (int, "
                        "enter - to use the data to determine the calibration points)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MSR_cal",
                    {
                        "desc": "mean/sigma ratio for point target selection for relative "
                        "calibration between scenes:    1.500\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "PWR_cal",
                    {
                        "desc": "intensity threshold ratio for point target selection for "
                        "relative calibration between scenes:    1.000\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "roff",
                    {
                        "desc": "offset to starting range of section to analyze (default -: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to starting line of section to analyze (default -: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range pixels to analyze (default -: to end of line)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {
                        "desc": "number of azimuth lines to analyze (default -: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "plist_out",
                    {
                        "desc": "point list of points used to determine calibration using "
                        "MSR_cal and PWR_cal thresholds\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "radcal_pwr_stat",
    },
    "ras24_float": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "f1",
                    {
                        "desc": "(input) file 1 (float, red/hue           enter - if not " "available)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "f2",
                    {
                        "desc": "(input) file 2 (float, green/brightness, enter - if not " "available)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "f3",
                    {
                        "desc": "(input) file 3 (float, blue/saturation,  enter - if not " "available)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("width", {"desc": "samples per row of f1, f2, and f3\n", "optional": False, "type": "unknown"}),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines format:\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "color_model",
                    {
                        "desc": "color model selection flag: (enter - for default)\n"
                        "0: RGB color model (default)\n"
                        "1: HLS (double hexagon color model)\n"
                        "2: HSV (single hexagon color model)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "h0",
                    {
                        "desc": "starting hue (color for starting value, enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "hrange",
                    {
                        "desc": "range of hue values in degrees (-360. ... 360., enter - for " "default: 360.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "imin",
                    {
                        "desc": "minimum brightness value (0.0 ... 1.0, enter - for default: 0.15)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "imax",
                    {
                        "desc": "maximum brightness value (0.0 ... 1.0, enter - for default: 0.85)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sat_min",
                    {
                        "desc": "minimum color saturation value (0.0 ... 1.0, enter - for default: " "0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sat_max",
                    {
                        "desc": "maximum color saturation value (0.0 ... 1.0, enter - for default: " "1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("sc1", {"desc": "mage f1 scaling parameters:\n", "optional": True, "type": "unknown"}),
                (
                    "A1",
                    {
                        "desc": "Scaling model flag (enter - for default: 0; 0: lin, 1: log, 2: " "power-law)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "B1",
                    {
                        "desc": "Scaling parameter A (minimum or scale; enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cyclic1",
                    {
                        "desc": "Scaling parameter B (maximum or exponent; enter - for default: " "6.2832)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sc2",
                    {
                        "desc": "Cyclic scaling model (enter - for default: 1; 0: no 1: yes)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("A2", {"desc": "mage f2 scaling parameters:\n", "optional": True, "type": "unknown"}),
                (
                    "B2",
                    {
                        "desc": "Scaling model flag (enter - for default: 2; 0: lin, 1: log, 2: " "power-law)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "start_f1",
                    {
                        "desc": "Scaling parameter A (minimum or scale; enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "start_f2",
                    {
                        "desc": "Scaling parameter B (maximum or exponent; enter - for default: " "0.35)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("nlines", {"desc": "mage f3 scaling parameters:\n", "optional": True, "type": "unknown"}),
                (
                    "pixavr",
                    {
                        "desc": "Scaling model flag (enter - for default: 0; 0: lin, 1: log, 2: " "power-law)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavaz",
                    {
                        "desc": "Scaling parameter A (minimum or scale; enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "B3",
                    {
                        "desc": "Scaling parameter B (maximum or exponent; enter - for default: " "1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ras24_float",
    },
    "ras2float": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "ras",
                    {
                        "desc": "(input) 8 or 24-bit raster image\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "chan",
                    {
                        "desc": "RGB channel to convert to FLOAT (enter - for default)\n"
                        "1: red (default)\n"
                        "2: green\n"
                        "3: blue\n",
                        "enum": [1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "data scaling (enter - for default: linear scaling)\n"
                        "0: linear scaling: min -> max, (default)\n"
                        "1: logarithmic scaling: min_dB -> max_dB\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "min",
                    {
                        "desc": "minimum value to rescale raster data (enter - for default)\n"
                        "linear:        0.0\n"
                        "logarithmic: -40.0 dB\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "max",
                    {
                        "desc": "maximum value to rescale raster data (enter - for default)\n"
                        "linear:        2.0\n"
                        "logarithmic:  10.0 dB\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "dout",
                    {
                        "desc": "(output) data file (FLOAT format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("NOTES", {"desc": "\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "ras2float",
    },
    "ras2ras": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "ras_in",
                    {
                        "desc": "(input) SUN/BMP/TIFF format raster image (8 or 24 bits/sample)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras_out",
                    {
                        "desc": "(output) SUN/BMP/TIFF format raster image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "new colormap for 8-bit input image (enter - for default, retain "
                        "original colormap)\n"
                        "NOTE: colormaps are located by default in $DISP_HOME/cmaps, examples: "
                        "gray.cm, hls.cm, rmg.cm...\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "force24",
                    {
                        "desc": "convert 8 to 24 bits: (enter - for default)\n"
                        "0: bits/sample remains unchanged (default)\n"
                        "1: output is 24 bits/sample\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ras2ras",
    },
    "ras3pwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "d1",
                    {
                        "desc": "(input) data channel 1 (used for image scaling) (float) (red)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("d2", {"desc": "(input) data channel 2 (float)(green)\n", "optional": False, "type": "unknown"}),
                ("d3", {"desc": "(input) data channel 3 (float)(blue)\n", "optional": False, "type": "unknown"}),
                (
                    "width",
                    {"desc": "number of samples/row in the input data files\n", "optional": False, "type": "unknown"},
                ),
                ("start", {"desc": "starting line (enter - for default: 1)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average across (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average down (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale1",
                    {
                        "desc": "relative display scale factor for channel 1 red   (enter - for default: " "1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale2",
                    {
                        "desc": "relative display scale factor for channel 2 green (enter - for default: " "1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale3",
                    {
                        "desc": "relative display scale factor for channel 3 blue  (enter - for default: " "1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {"desc": "display exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - for "
                        "default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ras3pwr",
    },
    "ras8_color_scale": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "color_model",
                    {
                        "desc": "color model selection flag: (enter - for default)\n"
                        "0: CMY color model used in Gamma Software (default)\n"
                        "1: HLS (double hexagon color model)\n"
                        "2: HSV (single hexagon color model)\n"
                        "3: SIN (sinusoidal color model)\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "h0",
                    {
                        "desc": "starting hue (color for starting value, enter - for default: " "0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "hrange",
                    {
                        "desc": "range of hue values in degrees (-360. ... 360., enter - for " "default: 360.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ival",
                    {
                        "desc": "relative brightness value (0.0 ... 1.0, enter - for default: " "0.80)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sat",
                    {
                        "desc": "color saturation value (0.0 ... 1.0, enter - for default: " "0.75)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "chip_width",
                    {"desc": "width of color chips (enter - for default: 8)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "gap",
                    {
                        "desc": "number of pixels between color chips (enter - for default: " "1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "chip_height",
                    {
                        "desc": "height of color chips (enter - for default: chip_width)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nval",
                    {"desc": "number of color chips (enter - for default: 16)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "ras8_color_scale",
    },
    "ras8_colormap": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "model",
                    {
                        "desc": "color model selection flag:\n"
                        "0: CMY color model used in Gamma Software (default)\n"
                        "1: HLS (double hexagon color model)\n"
                        "2: HSV (single hexagon color model)\n"
                        "3: SIN (sinusoidal color model)\n",
                        "enum": [0, 1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                ("h0", {"desc": "starting hue (color for starting value)\n", "optional": False, "type": "unknown"}),
                (
                    "hrange",
                    {"desc": "range of hue values in degrees (-360. ... 360)\n", "optional": False, "type": "unknown"},
                ),
                ("ival", {"desc": "relative brightness value (0.0 ... 1.0)\n", "optional": False, "type": "unknown"}),
                ("sat", {"desc": "color saturation value (0.0 ... 1.0)\n", "optional": False, "type": "unknown"}),
                (
                    "cm",
                    {
                        "desc": "(output) text format colormap with 256 entries, triplets of R,G,B " "0->255\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "cm_ras",
                    {
                        "desc": "(output) raster image of the colormap, 512 samples wide x 32 "
                        "lines (enter - for none, extension determines the format)\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {
                        "desc": "colorbar raster image width in pixels (enter - for default: " "512)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "colorbar raster image height in lines (enter - for default: 32)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ras8_colormap",
    },
    "ras8_float": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "f1",
                    {
                        "desc": "(input) file 1 (float, enter - if not available --> greyscale image " "for f2)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "f2",
                    {
                        "desc": "(input) file 2 (float, enter - if not available --> 8-bit color " "image for f1)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("width", {"desc": "samples per row of f1 and f2\n", "optional": False, "type": "unknown"}),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines format:\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "color_model",
                    {
                        "desc": "color model selection flag: (enter - for default)\n"
                        "0: CMY color model used in Gamma Software (default)\n"
                        "1: HLS (double hexagon color model)\n"
                        "2: HSV (single hexagon color model)\n"
                        "3: SIN (sinus color model)\n"
                        "4: GREY (greyscale model for f1)\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "h0",
                    {
                        "desc": "starting hue (color for starting value, enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "hrange",
                    {
                        "desc": "range of hue values in degrees (-360. ... 360., enter - for default: " "360.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "imin",
                    {
                        "desc": "minimum brightness value (0.0 ... 1.0, enter - for default: 0.15)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "imax",
                    {
                        "desc": "maximum brightness value (0.0 ... 1.0, enter - for default: 0.85)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sat",
                    {
                        "desc": "color saturation value (0.0 ... 1.0, enter - for default: 0.75)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("sc1", {"desc": "1 scaling parameters:\n", "optional": True, "type": "unknown"}),
                (
                    "A1",
                    {
                        "desc": "Scaling model flag (enter - for default: 0; 0: lin, 1: log, 2: " "power-law)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "B1",
                    {
                        "desc": "Scaling parameter A (minimum or scale; enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cyclic1",
                    {
                        "desc": "Scaling parameter B (maximum or exponent; enter - for default: " "6.2832)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "sc2",
                    {
                        "desc": "Cyclic scaling model (enter - for default: 1; 0: no 1: yes)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("A2", {"desc": "2 scaling parameters:\n", "optional": True, "type": "unknown"}),
                (
                    "B2",
                    {
                        "desc": "Scaling model flag (enter - for default: 2; 0: lin, 1: log, 2: " "power-law)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "start_f1",
                    {
                        "desc": "Scaling parameter A (minimum or scale; enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "start_f2",
                    {
                        "desc": "Scaling parameter B (maximum or exponent; enter - for default: " "0.35)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavr",
                    {"desc": "starting line of f1 (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "pixavaz",
                    {"desc": "starting line of f2 (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "ras8_float",
    },
    "rasSLC": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) input data (FCOMPLEX, SCOMPLEX SLC)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average across (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average down   (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law scale factor, (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {"desc": "power-law exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - for "
                        "default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n0: FCOMPLEX\n1: SCOMPLEX (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "rasSLC",
    },
    "ras_clist": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "clist",
                    {
                        "desc": "(input) list of x,y pixel coordinates (text format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras_in",
                    {
                        "desc": "(input) raster image (SUN/BMP/TIFF format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras_out",
                    {
                        "desc": "(output) raster image with crosses drawn at points (SUN/BMP/TIFF " "format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "xsf",
                    {
                        "desc": "number of range looks for the raster image relative to the SLC "
                        "geometry (default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ysf",
                    {
                        "desc": "number azimuth looks for the raster image relative to the SLC "
                        "geometry (default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "r",
                    {"desc": "line color value red   (0 --> 255) default: 255\n", "optional": True, "type": "unknown"},
                ),
                (
                    "g",
                    {"desc": "line color value green (0 --> 255) default: 255\n", "optional": True, "type": "unknown"},
                ),
                ("b", {"desc": "line color value blue  (0 --> 255) default: 0\n", "optional": True, "type": "unknown"}),
                (
                    "xs",
                    {
                        "desc": "size of cross in pixels, set to 1 for single points (default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "zflg",
                    {
                        "desc": "zero image flag (default=0:retain image values  1:set all image "
                        "values to 0 except crosses)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ras_clist",
    },
    "ras_dB": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FLOAT or UNSIGNED SHORT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average across (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average down   (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min",
                    {
                        "desc": "minimum data value (enter - for default: -10.00 dB)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max",
                    {
                        "desc": "maximum data value (enter - for default: 10.00 dB)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: gray.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - for "
                        "default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type (enter - for default)\n" "0: FLOAT (default)\n" "1: UNSIGNED SHORT\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_abs",
                    {
                        "desc": "absolute scaling flag:\n"
                        "0: scaling relative to average (min_dB + av_dB) -> (max_dB + av_dB) "
                        "(default)\n"
                        "NOTE: av_dB is the average image intensity dB\n"
                        "1: absolute image scaling range: min_dB -> max_dB\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ras_dB",
    },
    "ras_linear": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FLOAT, UNSIGNED SHORT, or UNSIGNED BYTE)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average across (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average down   (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min",
                    {"desc": "minimum data value (enter - for default: 0.000)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "max",
                    {"desc": "maximum data value (enter - for default: 1.000)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "cflg",
                    {
                        "desc": "cyclic data display flag:\n"
                        "0: display min <= data < max (default)\n"
                        "1: display (data - min) modulo (max - min)\n"
                        "2: autoscale between min and max value found in data\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: hls.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - "
                        "for default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: UNSIGNED SHORT (2-byte integer)\n"
                        "2: SIGNED SHORT (2-byte integer)\n"
                        "3: UNSIGNED BYTE\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ras_linear",
    },
    "ras_m-chi": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "s1",
                    {
                        "desc": "(input) Stokes parameter for the total power in the H and V "
                        "polarizations <|E_h|**2 + |E_v|**2>\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "c1",
                    {
                        "desc": "(input) CRTLR double-bounce scattering fraction component: "
                        "m*(1+sin(2*chi))/2) (red channel)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "c2",
                    {
                        "desc": "(input) random polarized fraction component: (1.0-m) (green " "channel)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "c3",
                    {
                        "desc": "(input) CRTLR single-bounce scattering fraction component: "
                        "m*(1-sin(2*chi))/2 (blue channel)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {"desc": "number of samples/row in the input data files\n", "optional": False, "type": "unknown"},
                ),
                ("start", {"desc": "starting line (enter - for default: 1\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines (enter - for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavr",
                    {
                        "desc": "number of pixels to average in range (default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavaz",
                    {
                        "desc": "number of pixels to average in azimuth (default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("scale", {"desc": "pwr display scale factor (default: 1.)\n", "optional": True, "type": "unknown"}),
                ("exp", {"desc": "pwr display exponent (default: 0.5)\n", "optional": True, "type": "unknown"}),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, enter - for default, extension determines "
                        "format:\n"
                        "*.ras Sun raster format\n"
                        "*.bmp BMP format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ras_m-chi",
    },
    "ras_majority": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "ras_in",
                    {
                        "desc": "(input) raster classification image, SUN, BMP, or TIFF format, 8 " "bits/pixel\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras_out",
                    {
                        "desc": "(output) raster classification image, SUN, BMP, or TIFF format, 8 " "bits/pixel\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "filter_width",
                    {
                        "desc": "filter width (select from 3, 5, or 7, enter - for default: 3)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "LR",
                    {
                        "desc": "left/right mirror image flag (enter - for default: 1: normal "
                        "(default), -1: mirror image)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "ras_majority",
    },
    "ras_ras": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "ras_in",
                    {
                        "desc": "(input)  SUN/BMP/TIFF format raster image (8 or 24 bits/sample)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras_out",
                    {
                        "desc": "(output) SUN/BMP/TIFF format raster image\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "col_looks",
                    {
                        "desc": "number of column looks (across) (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "row_looks",
                    {
                        "desc": "number of row looks (down) (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "LR",
                    {
                        "desc": "flip image left/right (1: normal (default), -1: mirror image) (enter - "
                        "for default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "force24",
                    {
                        "desc": "convert to 24 bits (enter - for default)\n"
                        "0: bits/sample remains unchanged (default)\n"
                        "1: output is 24 bits/sample\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ras_ras",
    },
    "ras_ratio_dB": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "pwr1",
                    {
                        "desc": "(input) intensity image 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr2",
                    {
                        "desc": "(input)intensity image 2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "start_pwr1",
                    {
                        "desc": "starting line of intensity 1  image file (default=1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "start_pwr2",
                    {
                        "desc": "starting line of intensity 2  image file (default=1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (default=0: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavr",
                    {"desc": "number of pixels to average in range (default=1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "pixavaz",
                    {
                        "desc": "number of pixels to average in azimuth (default=1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("min_cc", {"desc": "min dB value displayed (default=-3.0)\n", "optional": True, "type": "unknown"}),
                ("max_cc", {"desc": "max dB value displayed (default= 3.0)\n", "optional": True, "type": "unknown"}),
                (
                    "scale",
                    {"desc": "dB value subtracted from ratio (default=0.0)\n", "optional": True, "type": "unknown"},
                ),
                ("exp", {"desc": "L=1 normal, LR= -1 mirror image (default=1)\n", "optional": True, "type": "unknown"}),
                (
                    "LR",
                    {
                        "desc": "abs_flag=0 normal, abs_flag=1 absolute value(ratio) (default=0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) ratio raster file: *.ras SUN raster format, *.bmp BMP "
                        "format, *.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "ras_ratio_dB",
    },
    "ras_to_hsi": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "HUE",
                    {
                        "desc": "(input) HUE channel 8-bit raster image (SUN, BMP, or TIFF format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SATURATION",
                    {
                        "desc": "(input) SATURATION channel 8-bit raster image (SUN, BMP, or TIFF " "format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "INTENSITY",
                    {
                        "desc": "(input) INTENSITY channel 8-bit raster image (SUN, BMP, or TIFF " "format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras_out",
                    {
                        "desc": "(output) HUE/SATURATION/INTENSITY 24-bit composite raster image "
                        "(SUN, BMP, or TIFF format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "LR",
                    {
                        "desc": "image mirror flag (enter - for default)\n"
                        "1: normal (default)\n"
                        "-1: mirror image\n",
                        "enum": [1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cflg",
                    {
                        "desc": "color table flag (enter - for default)\n"
                        "0: use (red+green+blue)/3 as value (default)\n"
                        "1: scale input values linearly to 255\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ras_to_hsi",
    },
    "ras_to_rgb": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "red_channel",
                    {
                        "desc": "channel     (input) red channel 8-bit raster image (SUN, BMP, or " "TIFF format)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "green_channel",
                    {
                        "desc": "channel   (input) green channel 8-bit raster image (SUN, BMP, or " "TIFF format)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "blue_channel",
                    {
                        "desc": "channel    (input) blue channel 8-bit raster image (SUN, BMP, or " "TIFF format)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "ras_out",
                    {
                        "desc": "(output) RGB 24-bit composite raster image (SUN, BMP, or TIFF " "format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "LR",
                    {
                        "desc": "image mirror flag (enter - for default)\n"
                        "1: normal (default)\n"
                        "-1: mirror image\n",
                        "enum": [1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "null_flag",
                    {
                        "desc": "zero value flag (enter - for default)\n"
                        "0: same as other data (default)\n"
                        "1: if one channel is 0, set to (0,0,0)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ras_to_rgb",
    },
    "rascc_mask": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "cc",
                    {
                        "desc": "(input)interferometric correlation image (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "pwr",
                    {
                        "desc": "(input)intensity image (float, enter - if not available)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "start_cc",
                    {"desc": "starting line of coherence image (default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "start_pwr",
                    {"desc": "starting line of intensity image (default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (default=0: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavr",
                    {
                        "desc": "number of pixels to average in range (default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavaz",
                    {
                        "desc": "number of pixels to average in azimuth (default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cc_thres",
                    {
                        "desc": "coherence threshold for masking, pixels with cc < cc_thres are set "
                        "to 0 (default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pwr_thres",
                    {
                        "desc": "relative intensity threshold for masking, pixels with intensity < "
                        "pwr_thres * average intensity are set to 0 (default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cc_min",
                    {
                        "desc": "minimum coherence value used for color display (default: 0.1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cc_max",
                    {
                        "desc": "maximum coherence value used for color display (default: 0.9)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {"desc": "intensity display scale factor (default: 1.)\n", "optional": True, "type": "unknown"},
                ),
                ("exp", {"desc": "intensity display exponent (default: .35)\n", "optional": True, "type": "unknown"}),
                (
                    "LR",
                    {
                        "desc": "left/right mirror image flag, (1: normal (default), -1: mirror " "image)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - "
                        "for default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "rascc_mask",
    },
    "rascc_mask_thinning": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "ras_in",
                    {
                        "desc": "(input) validity mask (SUN/BMP/TIFF raster format 8-bit " "image)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "in_file",
                    {
                        "desc": "(input) file used for adaptive sampling reduction, e.g. "
                        "correlation coefficient (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("width", {"desc": "number of samples/row of in_file\n", "optional": False, "type": "unknown"}),
                (
                    "ras_out",
                    {
                        "desc": "(output) validity mask with reduced sampling (8-bit SUN "
                        "rasterfile or BMP format image)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nmax",
                    {"desc": "number of sampling reduction runs (default: 3)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "thresh_1",
                    {
                        "desc": "first threshold (used for smallest scale sampling " "reduction)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thresh_nmax",
                    {
                        "desc": "threshold nmax (used for largest scale sampling " "reduction)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "rascc_mask_thinning",
    },
    "rascpx": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) input data (FCOMPLEX, SCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "mode",
                    {
                        "desc": "display mode (enter - for default: power-law scaling)\n"
                        "0: intensity with power-law scaling (scale and exp), default colormap: "
                        "gray.cm, (default)\n"
                        "1: intensity with logarithmic scaling min -> max (dB), default colormap: "
                        "gray.cm\n"
                        "2: real component, scaling min -> max, default colormap: hls.cm\n"
                        "3: imaginary component, scaling min -> max, default colormap: hls.cm\n"
                        "4: phase, scaling min -> max, default colormap: default colormap "
                        "rmg.cm\n",
                        "enum": [0, 1, 2, 3, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average across (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average down   (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min",
                    {
                        "desc": "data display minimum (enter - for default mode 0: not used, mode 1: -10 "
                        "dB, modes 2,3: -1.0, mode 4: -PI)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max",
                    {
                        "desc": "data display maximum (enter - for default mode 0: not used, mode 1: +16 "
                        "dB, modes 2,3: +1.0, mode 4: +PI)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - for "
                        "default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law scale factor, (enter - for default: 1.0) (mode 0 only)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "power-law exponent (enter - for default: 0.35) (mode 0 only)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type (enter - for default)\n" "0: FCOMPLEX (default)\n" "1: SCOMPLEX\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_ave",
                    {
                        "desc": "intensity to use to calculate image scaling (modes 0 and 1)\n"
                        "(enter- for default: determined from the input data file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "rascpx",
    },
    "rasdt_pwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data in FLOAT format (deformation, height, unwrapped phase, "
                        "correlation...)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr",
                    {
                        "desc": "(input) intensity image coregistered with data (enter - for none, "
                        "FLOAT or raster image)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data and pwr\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {
                        "desc": "starting line of data and pwr (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average across (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average down   (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "min",
                    {
                        "desc": "minimum data value (enter - for default:  0.0000e+00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "max",
                    {
                        "desc": "maximum data value (enter - for default:  1.0000e+00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cflg",
                    {
                        "desc": "cyclic data display flag:\n"
                        "0: display min <= data < max (default)\n"
                        "1: display (data - min) modulo (max - min)\n"
                        "2: autoscale between min and max value found in data\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: hls.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - for "
                        "default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "intensity display scale factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "intensity display exponent (enter - for default: 0.35)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bits",
                    {
                        "desc": "bits/pixel:\n" "8:  8-bit indexed color map (default)\n" "24: RGB 8-bits/color\n",
                        "enum": [8, 24],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "rasdt_pwr",
    },
    "rasmph": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FCOMPLEX, SCOMPLEX, BCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average across (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average down   (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law scale factor, (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {"desc": "power-law exponent (enter - for default: 0.35)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: rmg.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - for "
                        "default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type (enter - for default)\n"
                        "0: FCOMPLEX (default)\n"
                        "1: SCOMPLEX\n"
                        "2: BCOMPLEX\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "bits",
                    {
                        "desc": "bits/pixel:\n" "8:  8-bit indexed color map (default)\n" "24: RGB 8-bits/color\n",
                        "enum": [8, 24],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_ave",
                    {
                        "desc": "average intensity used to scale image\n"
                        "(enter - for default: determined from data)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "rasmph",
    },
    "rasmph_pwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) input data FCOMPLEX format\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "pwr",
                    {
                        "desc": "(input) intensity image coregistered with data (enter - for none, "
                        "FLOAT or raster image)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data and pwr\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {
                        "desc": "starting line of data and pwr (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average across (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average down   (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: rmg.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - "
                        "for default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "intensity display scale factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "intensity display exponent (enter - for default: 0.35)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "bits",
                    {
                        "desc": "bits/pixel:\n" "8:  8-bit indexed color map (default)\n" "24: RGB 8-bits/color\n",
                        "enum": [8, 24],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "rasmph_pwr",
    },
    "raspwr": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data",
                    {
                        "desc": "(input) data (FLOAT, UNSIGNED SHORT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of data\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {"desc": "starting line of data (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average across (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average down   (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law display scale factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "power-law display exponent (enter - for default: 0.35)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "cmap",
                    {
                        "desc": "colormap file (enter - for default: gray.cm)\n"
                        "NOTE: colormaps are text files in $DISP_HOME/cmaps, examples: cc.cm, "
                        "rmg.cm, hls.cm, gray.cm, turbo.cm, BuYlRd.cm\n"
                        "colormap swatches: $DISP_HOME/cmaps/*.png, "
                        "$DISP_HOME/cmaps/cmocean/*.png, $DISP_HOME/colorcet/*.png\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - for "
                        "default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input data type (enter - for default)\n" "0: FLOAT (default)\n" "1: UNSIGNED SHORT\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sc_ave",
                    {
                        "desc": "average intensity used to scale image\n"
                        "(enter - for default: determined from the data file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "raspwr",
    },
    "rasshd": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "DEM",
                    {
                        "desc": "(input) digital elevation model (FLOAT or SHORT integer)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("width", {"desc": "samples per row of DEM\n", "optional": False, "type": "unknown"}),
                ("col_post", {"desc": "posting between cols (in meters)\n", "optional": False, "type": "unknown"}),
                (
                    "row_post",
                    {
                        "desc": "posting between rows (in meters, enter - for default: col_post)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "start",
                    {"desc": "starting line of DEM (enter - for default: 1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavx",
                    {
                        "desc": "number of pixels to average (and decimate) in horizontal direction "
                        "(enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pixavy",
                    {
                        "desc": "number of pixels to average (and decimate) in vertical direction (enter "
                        "- for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "theta0",
                    {
                        "desc": "illumination elevation angle in deg. (enter - for default: 45.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "phi0",
                    {
                        "desc": "illumination orientation angle in deg. (enter - default: 135.0)\n"
                        "(0.: right, 90: top, 180: left, 270: bottom)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - for "
                        "default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras SUN raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "DEM data type (enter - for default):\n" "0: FLOAT (default)\n" "1: SHORT integer\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "zflg",
                    {
                        "desc": "zero data handling (enter - for default):\n"
                        "0: 0.0 interpreted at missing value (default)\n"
                        "1: 0.0 interpreted as valid data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "scale",
                    {
                        "desc": "power-law display scale factor (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "exp",
                    {
                        "desc": "power-law display exponent (enter - for default: 1.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "illum_mode",
                    {
                        "desc": "illumination mode (enter - for default)\n"
                        "0: single angle (default)\n"
                        "1: multiple angle\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "sharpness",
                    {
                        "desc": "shaded relief sharpness (scale from 0 to 9, enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "edge",
                    {
                        "desc": "edge protection (reduce artifacts at the edges and near no-data values, "
                        "enter - for default)\n"
                        "0: no (default)\n"
                        "1: yes\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "shade",
                    {
                        "desc": "(output) shaded relief intensity image (FLOAT) (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "rasshd",
    },
    "rastree": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "flag",
                    {
                        "desc": "(input) phase unwrapping flag file (unsigned char)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "unw",
                    {
                        "desc": "(input) unwrapped phase image (enter - for None) (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "int",
                    {
                        "desc": "(input) complex interferogram (wrapped) (enter - for None) (FCOMPLEX)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "samples per row of flag, unw, and int\n", "optional": False, "type": "unknown"}),
                (
                    "start",
                    {
                        "desc": "starting line of flag, unw, and int (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to display (enter - or 0 for default: to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ph_scale",
                    {
                        "desc": "unwrapped phase display scale factor (enter - for default: 0.33333)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rasf",
                    {
                        "desc": "(output) image filename, extension determines the format, enter - for "
                        "default: *.bmp\n"
                        "*.bmp BMP format\n"
                        "*.ras Sun raster format\n"
                        "*.tif TIFF format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "rastree",
    },
    "ratio": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("d1", {"desc": "(input) data file 1 (float)\n", "optional": False, "type": "unknown"}),
                ("d2", {"desc": "(input) data file 2 (float)\n", "optional": False, "type": "unknown"}),
                (
                    "ratio",
                    {
                        "desc": "(output) ratio: d1/d2  (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row of the input image\n", "optional": False, "type": "unknown"}),
                (
                    "bx",
                    {
                        "desc": "number of range samples to average before evaluating ratio (odd number, "
                        "enter - for default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "by",
                    {
                        "desc": "number of azimuth lines to average before evaluating ratio (odd number, "
                        "enter - for default: bx)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wgt_flag",
                    {
                        "desc": "weighting flag (enter - for default)\n"
                        "0: no weighting function applied (default)\n"
                        "1: linear weighting function\n"
                        "2: Gaussian weighting function\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "ratio",
    },
    "rc_fmcw": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rc_data",
                    {
                        "desc": "(output) output range compressed data filename\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nrc_off",
                    {
                        "desc": "offset to the first sample of the output range-compressed data " "(samples)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nrc_samp",
                    {
                        "desc": "number of samples in the output range-compressed data (enter - for " "default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {"desc": "number of lines offset (enter - for default)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to range compress (enter - for default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "kaiser",
                    {
                        "desc": "range chirp Kaiser window parameter beta (enter - for default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "rc_fmcw",
    },
    "rc_real": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rc_data",
                    {
                        "desc": "(output) output range compressed data filename\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {"desc": "number of lines offset (enter - for default)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nl",
                    {
                        "desc": "number of lines to range compress (enter - for default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "kaiser",
                    {
                        "desc": "range chirp Kaiser window parameter beta (enter - for default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr_ext",
                    {
                        "desc": "near range swath extension in raw data samples (enter - for default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "fr_ext",
                    {
                        "desc": "far range swath extension in raw data samples (enter - for default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "r_chirp",
                    {
                        "desc": "(input) file containing user supplied range chirp samples (enter - for " "none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "rfi_filt",
                    {
                        "desc": "RFI suppression filtering (0:OFF (default)  1:ON)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "rfi_thres",
                    {
                        "desc": "RFI detection threshold, nominal range 1.0 --> 1.5 (default= 1.100)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "rc_real",
    },
    "rdc_trans": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "MLI1_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of the reference scene "
                        "(lookup table and DEM_RDC dimensions)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_RDC",
                    {
                        "desc": "(input) height map in RDC of MLI-1 (float, or constant height value)\n"
                        "NOTE: The terrain heights must be referenced to the WGS84 datum\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "MLI2_par",
                    {
                        "desc": "(input) SLC/MLI ISP image parameter file of MLI-2\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "lt",
                    {
                        "desc": "(output) lookup table to resample MLI-2 to the geometry of MLI-1 " "(FCOMPLEX)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "rdc_trans",
    },
    "real_to_cpx": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data1",
                    {
                        "desc": "(input) input data file data1 (enter - for none, FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(input) input data file data2 (enter - for none, FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "real_to_cpx",
    },
    "real_to_vec": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "cmp1",
                    {
                        "desc": "(input) vector component 1 (float, enter - for none)\n"
                        "NOTE: if the input is specified as -, then the component data value "
                        "is set to 0.0\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "cmp2",
                    {
                        "desc": "(input) vector component 2 (float, enter - for none)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "cmp3",
                    {
                        "desc": "(input) vector component 3 (float, enter - for none)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "width",
                    {"desc": "number of vectors per line of the input data\n", "optional": False, "type": "unknown"},
                ),
                (
                    "vec",
                    {
                        "desc": "(output) vector data (float)\n"
                        "NOTE: vector data are triplets of 4-byte single-precision floating "
                        "point numbers (cmp1, cmp2, cmp3)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "real_to_vec",
    },
    "reallks": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("image", {"desc": "(input) 4-byte/value float input file\n", "optional": False, "type": "unknown"}),
                (
                    "ML_image",
                    {
                        "desc": "(output) 4-byte/value float output file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "width of image\n", "optional": False, "type": "unknown"}),
                ("rlks", {"desc": "number of range looks (default=1)\n", "optional": True, "type": "unknown"}),
                ("azlks", {"desc": "number of azimuth looks (default=1)\n", "optional": True, "type": "unknown"}),
                ("start", {"desc": "starting line (default=1)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of lines (default=entire file, 0 for entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("r_start", {"desc": "starting range (default=1)\n", "optional": True, "type": "unknown"}),
                (
                    "nsamp",
                    {
                        "desc": "number of range samples to extract (default = to end of line)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "reallks",
    },
    "replace_values": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("value", {"desc": "threshold value or nan\n", "optional": False, "type": "unknown"}),
                (
                    "new_value",
                    {
                        "desc": "new value to use or a second input data file that is used to "
                        "replace values in the output\n"
                        "NOTE: if this is a second input data file, it must be the same "
                        "data type as data_in\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file\n" "NOTE: data_in and data_out can be the same file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "rpl_flg",
                    {
                        "desc": "replacement option flag (enter - for default)\n"
                        "0: replace all points == value with new_value (default)\n"
                        "1: replace all points >= value with new_value\n"
                        "2: replace all points <= value with new_value\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n" "2: FLOAT (default)\n" "4: SHORT integer\n",
                        "enum": [2, 4],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "zflg",
                    {
                        "desc": "interpretation of 0.0 values (enter - for default)\n"
                        "0: zero is interpreted as NO_DATA and is not changed (default)\n"
                        "1: zero is a valid data value\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "replace_values",
    },
    "res_map": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "hgt",
                    {
                        "desc": "(input) height file in slant range geometry\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "gr",
                    {
                        "desc": "(input) ground range file in slant range geometry\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data",
                    {
                        "desc": "(input) data file in slant range geometry (float) (intensity *.pwr or "
                        "correlation *.cc)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP parameter file of reference SLC\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) offset/interferogram processing parameters\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "res_hgt",
                    {
                        "desc": "(output) resampled height file in ground range geometry\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "res_data",
                    {
                        "desc": "(output) resampled data file in ground range geometry\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nr",
                    {
                        "desc": "number of range samples for L.S. estimate (default=7, must be odd)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "naz",
                    {
                        "desc": "number of azimuth samples for L.S. extimate (default=7, must be odd)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "azps_res",
                    {
                        "desc": "azimuth output map sample spacing in meters (default=azimuth spacing)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset to starting line for height calculations (default=0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to calculate (default=to end of file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "res_map",
    },
    "resamp_image": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input data file (format as specified by dtype parameter)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width_in", {"desc": "width of input data\n", "optional": False, "type": "unknown"}),
                (
                    "xscale",
                    {
                        "desc": "x coordinate (across) scaling factor (0 < xscale <= 100)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "yscale",
                    {
                        "desc": "y coordinate (down) scaling factor (0 < yscale <= 100)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width_out",
                    {"desc": "output image width, (enter - for default)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "nlines_out",
                    {
                        "desc": "number of lines in the output image, (enter - for default)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode:\n"
                        "0: nearest-neighbor\n"
                        "1: bicubic spline (default)\n"
                        "2: bicubic spline log(x)\n"
                        "3: bicubic spline sqrt(x)\n"
                        "4: B-spline interpolation (default B-spline degree: 5)\n"
                        "5: B-spline interpolation sqrt(x) (default B-spline degree: 5)\n"
                        "6: Lanczos interpolation (default Lanczos function order: 5)\n"
                        "7: Lanczos interpolation sqrt(x) (default Lanczos function order: "
                        "5)\n"
                        "NOTE: log and sqrt interpolation modes should only be used with "
                        "non-negative data!\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input and output data format\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "2: SUN/BMP/TIFF format raster image\n"
                        "3: UNSIGNED CHAR\n"
                        "4: SHORT\n"
                        "5: DOUBLE\n"
                        "6: SCOMPLEX\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos function order or B-spline degree (2->9) (enter - default: " "5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "x coordinate (across) offset samples (enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "y coordinate (down) offset lines (enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "e_flag",
                    {
                        "desc": "extrapolation flag (enter - for default)\n"
                        "0: do not extrapolate (default)\n"
                        "1: extrapolate up to 0.5 pixels beyond input edges\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "lpf",
                    {
                        "desc": "low-pass filter amount when downsampling data (0.0 -> no filter, "
                        "1.0 -> ensure output is not aliased, enter - for default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "NOTES:",
                    {
                        "desc": "\n"
                        "1. See documentation for information on recommended interpolation "
                        "modes for different data types\n"
                        "2. When resampling complex data, the data should either have been "
                        "deramped, or have their spectrum centered around 0\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "resamp_image",
    },
    "resamp_image_par": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input data file (format as specified by dtype " "parameter)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PAR-1",
                    {
                        "desc": "(input) SLC/MLI, DEM, DIFF/GEO or ISP offset/interferogram "
                        "parameter file for data_in\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PAR-2",
                    {
                        "desc": "(input) SLC/MLI, DEM, DIFF/GEO or ISP offset/interferogram "
                        "parameter file for data_out\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) resampled output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode (enter - for default)\n"
                        "0: nearest-neighbor\n"
                        "1: bicubic spline (default)\n"
                        "2: bicubic spline log(x)\n"
                        "3: bicubic spline sqrt(x)\n"
                        "4: B-spline interpolation (default B-spline degree: 5)\n"
                        "5: B-spline interpolation sqrt(x) (default B-spline degree: "
                        "5)\n"
                        "6: Lanczos interpolation (default Lanczos function order: 5)\n"
                        "7: Lanczos interpolation sqrt(x) (default Lanczos function "
                        "order: 5)\n"
                        "NOTE: log and sqrt interpolation modes should only be used "
                        "with non-negative data!\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input and output data format (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "2: SUN/BMP/TIFF format raster image\n"
                        "3: UNSIGNED CHAR\n"
                        "4: SHORT\n"
                        "5: DOUBLE\n"
                        "6: SCOMPLEX\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos function order or B-spline degree (2->9) (enter - for " "default: 5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "e_flag",
                    {
                        "desc": "extrapolation flag (enter - for default)\n"
                        "0: do not extrapolate (default)\n"
                        "1: extrapolate up to 0.5 pixels beyond input edges\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "off_flag",
                    {
                        "desc": "offset flag when using OFF_par or DIFF_par files (enter - for "
                        "default)\n"
                        "0: image mode (resample image (e.g. interferogram / SLC / MLI) "
                        "to a different multi-looking geometry) (default)\n"
                        "1: offsets mode 1 (resample input offsets to image frame)\n"
                        "2: offsets mode 2 (resample input image to offsets frame)\n"
                        "3: offsets mode 3 (resample input offsets to different offsets "
                        "frame)\n",
                        "enum": [0, 1, 2, 3],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "lpf",
                    {
                        "desc": "low-pass filter amount when downsampling data (0.0 -> no "
                        "filter, 1.0 -> ensure output is not aliased, enter - for "
                        "default: 0.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "NOTES:",
                    {
                        "desc": "\n"
                        "1. The parameter files PAR-1 and PAR-2 must be from the same "
                        "scene or DEM and must be the same type\n"
                        "2. See documentation for information on recommended "
                        "interpolation modes for different data types\n"
                        "3. When resampling complex data, the data should either have "
                        "been deramped, or have their spectrum centered around 0\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "resamp_image_par",
    },
    "residue": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "int",
                    {
                        "desc": "(input) interferogram (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "flag",
                    {
                        "desc": "(input) flag file (unsigned char)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "xmin",
                    {"desc": "offset to starting range pixel(default = 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "xmax",
                    {"desc": "offset last range pixel (default = width-1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ymin",
                    {"desc": "offset to starting azimuth row (default = 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ymax",
                    {"desc": "offset to last azimuth row (default = nlines-1)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "residue",
    },
    "residue_cc": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "int",
                    {
                        "desc": "(input) interferogram (fcomplex)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "flag",
                    {
                        "desc": "(input) flag file (unsigned char)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "xmin",
                    {"desc": "offset to starting range pixel(default = 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "xmax",
                    {"desc": "offset last range pixel (default = width-1)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ymin",
                    {"desc": "offset to starting azimuth row (default = 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "ymax",
                    {"desc": "offset to last azimuth row (default = nlines-1)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "residue_cc",
    },
    "restore_float": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "input",
                    {
                        "desc": "file    (input) data containing 0.0 values (float) \n",
                        "optional": True,
                        "type": "unknown",
                    },
                )
            ]
        ),
        "program": "restore_float",
    },
    "rotate_image": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input data file (format as specified by format_flag " "parameter)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width_in", {"desc": "width of input data\n", "optional": False, "type": "unknown"}),
                (
                    "angle",
                    {
                        "desc": "rotation angle, angle > 0: counter-clockwise rotation (deg.)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width_out",
                    {"desc": "output image width, (enter - for default)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "nlines_out",
                    {
                        "desc": "number of lines in the output image, (enter - for default)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "interp_mode",
                    {
                        "desc": "interpolation mode (enter - for default):\n"
                        "0: nearest-neighbor\n"
                        "1: bicubic spline (default)\n"
                        "2: bicubic spline log(x)\n"
                        "3: bicubic spline sqrt(x)\n"
                        "4: B-spline interpolation (default B-spline degree: 5)\n"
                        "5: B-spline interpolation sqrt(x) (default B-spline degree: 5)\n"
                        "6: Lanczos interpolation (default Lanczos function order: 5)\n"
                        "7: Lanczos interpolation sqrt(x) (default Lanczos function order: "
                        "5)\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "input and output data format (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "2: SUN/BMP/TIFF format\n"
                        "3: UNSIGNED CHAR\n"
                        "4: SHORT\n"
                        "5: DOUBLE\n",
                        "enum": [0, 1, 2, 3, 4, 5],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "order",
                    {
                        "desc": "Lanczos function order or B-spline degree (2->9) (enter - default: " "5)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "rotate_image",
    },
    "rspec_IQ": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "range_spec",
                    {
                        "desc": "(output) range spectrum plot file (text)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset echoes from start of raw data file (enter - for default: " "PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlspec",
                    {
                        "desc": "number of lines to estimate spectrum (enter - for default: 4096)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nrfft",
                    {"desc": "range FFT size (enter - for default: 4096)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "roff",
                    {
                        "desc": "range offset in samples (enter - for default: PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pltflg",
                    {
                        "desc": "range spectrum plotting flag:\n"
                        "0: none (default)\n"
                        "1: output plot in PNG format\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "rspec_IQ",
    },
    "rspec_JERS": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "range_spec",
                    {
                        "desc": "(output) range spectra data file for RFI suppression\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "nr_samp",
                    {
                        "desc": "number of range samples to process (enter - for default from " "PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl_spec",
                    {
                        "desc": "number of lines to use to estimate spectrum (enter - for " "default=1024)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset echoes for first line to process (enter - default from " "PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - for default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nr_ext",
                    {
                        "desc": "near range swath extension in samples (default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "fr_ext",
                    {
                        "desc": "far range swath extension in samples (default from PROC_par)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "rspec_JERS",
    },
    "rspec_real": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PROC_par",
                    {
                        "desc": "(input) MSP processing parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "signal_data",
                    {
                        "desc": "(input) uncompressed raw SAR signal data filename\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "range_spec",
                    {
                        "desc": "(output) range spectrum\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "offset echoes from start of raw data file (enter - for default from "
                        "PROC_par file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlspec",
                    {
                        "desc": "number of lines to estimate spectrum (enter - for default: 1024)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nrfft",
                    {"desc": "range FFT size (enter - for default: 4096)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "pltflg",
                    {
                        "desc": "range spectrum plotting flag:\n"
                        "0: none (default)\n"
                        "1: output plot in PNG format\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "rspec_real",
    },
    "sarpix_coord": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC/MLI parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file, enter - for SLC " "or MLI data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file, enter - for WGS84 lat/lon\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": True,
                        "type": "path",
                    },
                ),
                ("azlin", {"desc": "SAR image azimuth line\n", "optional": True, "type": "unknown"}),
                ("rpix", {"desc": "SAR image slant range pixel number\n", "optional": True, "type": "unknown"}),
                ("ref_hgt", {"desc": "reference height (m) in map datum\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "sarpix_coord",
    },
    "sarpix_coord_list": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) ISP SLC/MLI parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) ISP offset/interferogram parameter file, enter - for " "SLC or MLI data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DEM_par",
                    {
                        "desc": "(input) DEM parameter file, enter - for WGS84 lat/lon\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SAR_coord",
                    {
                        "desc": "(input) list of pixel and line coordinates in the geometry "
                        "defined by the SLC_par:\n"
                        "azimuth_line  range_pixel   height (m) in the desired datum "
                        "defined in the DEM_par\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "MAP_coord",
                    {
                        "desc": "(output) list of map coordinates and heights with 5 columns:\n"
                        "north/lat/S   east/lon/C   height (m)   map_line   "
                        "map_pixel\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "sarpix_coord_list",
    },
    "sbi_filt": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) SLC image (SCOMPLEX or FCOMPLEX format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2R_par",
                    {
                        "desc": "(input) SLC2 ISP image parameter file for the co-registered image of "
                        "the interferometric pair,\n"
                        "used to determine azimuth common-band for each output SLC (enter - for "
                        "none)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLCf",
                    {
                        "desc": "(output) SLC image (forward-looking, FCOMPLEX format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLCf_par",
                    {
                        "desc": "(output) SLC parameter file (forward-looking)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLCb",
                    {
                        "desc": "(output) SLC image (backward-looking, FCOMPLEX format)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLCb_par",
                    {
                        "desc": "(output) SLC parameter file (backward-looking)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "norm_sq",
                    {
                        "desc": "squint between beams as a fraction of the azimuth spectrum width " "(default: 0.5)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "iwflg",
                    {
                        "desc": "inverse weighting flag:\n"
                        "0: no compensation for azimuth spectrum weighting\n"
                        "1: compensate for the azimuth spectrum weighting (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "sbi_filt",
    },
    "sbi_offset": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "sbi_unw",
                    {
                        "desc": "(input) unwrapped phase of split-beam interferogram (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "SLCf_par",
                    {
                        "desc": "(input) reference SLC parameter file (forward-looking)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLCb_par",
                    {
                        "desc": "(input) reference SLC parameter file (backward-looking)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par",
                    {
                        "desc": "(input) offset parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "az_offset",
                    {
                        "desc": "(output) azimuth offsets (m)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "sbi_offset",
    },
    "scale_base": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "unw-2",
                    {
                        "desc": "(input) unwrapped interferogram file (to be scaled)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "scaled_unw-2",
                    {
                        "desc": "(output) scaled unwrapped interferogram 2\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "baseline-1",
                    {
                        "desc": "(input) baseline file of interferogram 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par-1",
                    {
                        "desc": "(input) parameter file of SLC-1 in interferogram 1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par-1",
                    {
                        "desc": "(input) ISP interferogram/offset parameters of interferogram 1\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "baseline-2",
                    {
                        "desc": "(input) baseline file of interferogram 2 (to be scaled)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-1_par-2",
                    {
                        "desc": "(input) parameter file of SLC-1 in interferogram 2 (to be scaled)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "OFF_par-2",
                    {
                        "desc": "(input) ISP interferogram/offset parameters of interferogram 2 (to " "be scaled)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "int_type",
                    {
                        "desc": "interferogram type 0: unflattened (default)  1: flattened (*.flt)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "scale_base",
    },
    "set_value": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "PAR_in",
                    {
                        "desc": "(input) keyword:value based parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PAR_out",
                    {
                        "desc": "(output) keyword:value based parameter file (can be the same file as " "PAR_in)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("keyword", {"desc": "search keyword of keyword:value pair\n", "optional": False, "type": "unknown"}),
                (
                    "value",
                    {
                        "desc": "new value (note: delimit value with double quotes if it contains "
                        "spaces or punctuation)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "new_key",
                    {
                        "desc": "options for new keyword_value pair\n"
                        "0: update value of existing keyword:value pair (default)\n"
                        "1: append new keyword:value pair to PAR_out\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "set_value",
    },
    "short2float": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) input data file (SHORT integers, 2 bytes/sample)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) output data file (FLOAT, 4 bytes/sample)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("scale", {"desc": "scale factor (enter - for default: 1.0)\n", "optional": True, "type": "unknown"}),
                ("exp", {"desc": "exponent (enter - for default: 1.0)\n", "optional": True, "type": "unknown"}),
                (
                    "dtype",
                    {
                        "desc": "input data type (enter - for default)\n"
                        "0: SHORT (int16, default)\n"
                        "1: UNSIGNED SHORT (uint16)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "short2float",
    },
    "sigma2gamma": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "sigma0",
                    {
                        "desc": "(input)  normalized radar cross-section sigma0\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "inc",
                    {
                        "desc": "(input)  local incidence angles (radians)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "gamma0",
                    {
                        "desc": "(output) normalized radar cross-section gamma0 = sigma0 / " "cos(inc)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
            ]
        ),
        "program": "sigma2gamma",
    },
    "single_class_mapping": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("nfiles", {"desc": "number of input data files\n", "optional": False, "type": "unknown"}),
                ("f1", {"desc": "(input) 1. input data file (float) \n", "optional": False, "type": "unknown"}),
                ("lt1", {"desc": "lower threshold for file 1\n", "optional": False, "type": "unknown"}),
                ("ut1", {"desc": "upper threshold for file 1\n", "optional": False, "type": "unknown"}),
                ("fn", {"desc": "(input) last input data file (float) \n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "single_class_mapping",
    },
    "slant_range": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "SLC_par",
                    {
                        "desc": "(input) SLC or MLI image parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "slr",
                    {
                        "desc": "(output) slant range for every sample in the image (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "slant_range",
    },
    "split_WB": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) input mosaicked data in slant-range geometry (e.g. DEM data)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_par_in",
                    {
                        "desc": "(input) ISP image parameter file for data in the input mosaic\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "data_tab",
                    {
                        "desc": "(input) 2 column list of output data filenames and ISP image parameter "
                        "files for each beam in the mosaic (text)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype",
                    {
                        "desc": "(input) input data type:\n0: FLOAT\n1: FCOMPLEX\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "split_WB",
    },
    "stacking": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "DIFF_tab",
                    {
                        "desc": "(input) 2 column list of unwrapped differential interferograms and "
                        "delta_T values in days (text)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "width",
                    {
                        "desc": "number of sample/line for the unwrapped interferograms in the stack\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "ph_rate",
                    {
                        "desc": "(output) average phase rate determined from a weighted sum of phases "
                        "(radians/year, float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sig_ph_rate",
                    {
                        "desc": "(output) standard deviation of the estimated phase rate (radians/year, " "float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "sig_ph",
                    {
                        "desc": "(output) standard deviation of the residual phases (enter - for none, "
                        "radians, float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "xoff",
                    {
                        "desc": "x-offset (across) samples to the center of the phase reference " "region\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "yoff",
                    {
                        "desc": "y-offset (down) lines to the center of the phase reference region\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "nx",
                    {
                        "desc": "width (samples) of the phase reference region (enter - for default: " "15)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ny",
                    {
                        "desc": "height (lines) of the phase reference region (enter - for default: " "15)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "np_min",
                    {
                        "desc": "min. number of phase values required to accept phase rate estimate "
                        "(enter - for default: all files)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "tscale",
                    {
                        "desc": "time scale used for calculation of the phase rate: \n"
                        "0: radians/day\n"
                        "1: radians/year (default)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "stacking",
    },
    "stokes": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) HH, VV, RH, LH single-look complex image (SCOMPLEX or FCOMPLEX " "format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) HV, VH, RV, LV single-look complex image coregistered with SLC-1 "
                        "(SCOMPLEX or FCOMPLEX format)\n"
                        "NOTE: 1. SLC images must be a co-pol and cross-pol pair with the same "
                        "transmit polarization\n"
                        "and linear receive polarization (HH, HV), (VV, VH), (RH, RV), or (LH, "
                        "LV)\n"
                        "2. SCOMPLEX SLC data are scaled according to the calibration gains "
                        "indicated in the SLC parameter files\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC image parameter file of SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC image parameter file of SLC-2 coregistered with SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "S",
                    {
                        "desc": "(output) root file name of 4 Stokes parameter files with extensions .s0, "
                        ".s1, .s2, .s3 (FLOAT)\n"
                        "NOTE: expressed in the H,V polarization basis, BSA convention, the "
                        "Stokes parameters are given by:\n"
                        "s0: <|E_H|**2 + |E_V|**2>\n"
                        "s1: <|E_H|**2 - |E_V|**2>\n"
                        "s2: 2Re<E_H E_V*>\n"
                        "s3: 2Im<E_H E_V*>\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "S_par",
                    {
                        "desc": "(output) MLI image parameter file associated with the Stokes parameter "
                        "data files (enter - for none)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of range looks used to calculate Stokes parameters\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number of azimuth looks used to calculate Stokes parameters\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "loff",
                    {"desc": "offset to starting line (enter - for default: 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of SLC lines to process (enter - for default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "stokes",
    },
    "stokes_qm": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "S",
                    {
                        "desc": "(input) root file name of 4 Stokes parameter files with extensions "
                        ".s0, .s1, .s2, .s3 (FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "S_par",
                    {
                        "desc": "(input) image parameter file associated with the Stokes parameter " "data files\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "m",
                    {
                        "desc": "(output) degree of polarization: sqrt(s1**2 + s2**2 + s3**2)/s0 "
                        "(enter - for none) (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "s2chi",
                    {
                        "desc": "(output) sine of the latitude of the Stokes vector on the Poincare "
                        "sphere: sin(2*chi) = s3/(m*s0)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "s2psi",
                    {
                        "desc": "(output) sine of the longitude of the Stokes vector on the Poincare "
                        "sphere: sin(2*psi) = s2/sqrt(s1**2 + s2**2))\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "m_l",
                    {
                        "desc": "(output) degree of linear polarization: sqrt(s1**2 + s2**2)/s0  "
                        "(enter - for none) (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "m_c",
                    {
                        "desc": "(output) degree of circular polarization: s3/s0 (enter - for none) " "(FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "lp_ratio",
                    {
                        "desc": "(output) linear polarization ratio: (s0 - s1)/(s0 + s1), 0 <= "
                        "lp_ratio (enter - for none) (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "cp_ratio",
                    {
                        "desc": "(output) circular polarization ratio: (s0 - s3)/(s0 + s3), 0 <= "
                        "cp_ratio (enter - for none) (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "mu",
                    {
                        "desc": "(output) coherency parameter |mu_xy|: sqrt(s2**2 + s3**2)/sqrt(s0**2 "
                        "- s1**2) (enter - for none) (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "delta",
                    {
                        "desc": "(output) relative H and V phase difference atan(s3/s2) (enter - for "
                        "none) (radians, FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "alpha",
                    {
                        "desc": "(output) alpha parameter in the compact H/alpha decomposition: "
                        "0.5*atan(sqrt(s1**2 + s2**2)/s3) (enter - for none) (radians, "
                        "FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
                (
                    "phi",
                    {
                        "desc": "(output) longitude of Stokes vector 2*psi: atan(s2/s1) (enter - for "
                        "none) (radians, FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": True,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "stokes_qm",
    },
    "sub_phase": {
        "module": "DIFF",
        "params": OrderedDict(
            [
                (
                    "d1",
                    {
                        "desc": "(input) SLC, interferogram, or unwrapped phase (SCOMPLEX, FCOMPLEX, "
                        "FLOAT format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "d2",
                    {
                        "desc": "(input) SLC, interferogram, or unwrapped phase (SCOMPLEX, FCOMPLEX, "
                        "FLOAT format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "DIFF_par",
                    {
                        "desc": "(input) DIFF/GEO parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "diff",
                    {
                        "desc": "(output) output data file, with the same data format as d1\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dtype1",
                    {
                        "desc": "d1 data type:\n"
                        "0: unwrapped phase (FLOAT)\n"
                        "1: interferogram or SLC (FCOMPLEX)\n"
                        "2: SLC (SCOMPLEX)\n",
                        "enum": [0, 1, 2],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "subtract or add phase of d2 (enter - for default)\n"
                        "0: subtract d2 phase from d1 data (default)\n"
                        "1: add d2 phase to d1 data\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "dtype2",
                    {
                        "desc": "d2 data type (enter - for default)\n"
                        "0: unwrapped phase (FLOAT) (default)\n"
                        "1: interferogram or SLC (FCOMPLEX)\n"
                        "2: SLC (SCOMPLEX)\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                ("NOTES:", {"desc": "\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "sub_phase",
    },
    "subtract_phase": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "interf_in",
                    {
                        "desc": "(input) input interferogram (fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "phase_file",
                    {"desc": "(input) unwrapped interferometric phase (float)\n", "optional": False, "type": "unknown"},
                ),
                (
                    "interf_out",
                    {
                        "desc": "(output) output interferogram (input interferogram - scaled " "phase) (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
                (
                    "factor",
                    {
                        "desc": "constant scale factor for input phase data [default=1.0]\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "subtract_phase",
    },
    "svg_arrow": {
        "module": "DISP",
        "params": OrderedDict(
            [
                ("dv_norm", {"desc": "(input) arrow length file (float)\n", "optional": False, "type": "unknown"}),
                ("dv_phi", {"desc": "(input) arrow direction file (float)\n", "optional": False, "type": "unknown"}),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "svg",
                    {
                        "desc": "(output) arrow file in SVG format\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "image",
                    {
                        "desc": "URL of background image in png or jpg format (- for no background " "image)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "norm",
                    {
                        "desc": "arrow length normalisation factor (default = 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "gridx",
                    {
                        "desc": "step size for arrow grid in x direction (default = 10)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "gridy",
                    {
                        "desc": "step size for arrow grid in y direction (default = gridx)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("color", {"desc": "black, white, blue etc (default = black)\n", "optional": True, "type": "unknown"}),
                ("thick", {"desc": "line thickness in pixels (default = 1)\n", "optional": True, "type": "unknown"}),
                ("head", {"desc": "arrow head size (default = 3)\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "svg_arrow",
    },
    "svg_map": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "image",
                    {
                        "desc": "(input) URL of background image in png or jpg format (- for no " "background image)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dem_par",
                    {
                        "desc": "(input) corresponding dem_par file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "svg",
                    {
                        "desc": "(output) SVG output file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "font",
                    {"desc": "name of labelling font (default = sans-serif)\n", "optional": True, "type": "unknown"},
                ),
                ("fsize", {"desc": "font size (default = 14)\n", "optional": True, "type": "unknown"}),
                (
                    "color",
                    {"desc": "color of ticks and labels (default = black)\n", "optional": True, "type": "unknown"},
                ),
                ("gcolor", {"desc": "color of grid (default = black)\n", "optional": True, "type": "unknown"}),
                (
                    "majorx",
                    {
                        "desc": "major x-ticks in dem_par coordinates (default = 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "majory",
                    {
                        "desc": "major y-ticks in dem_par coordinates (default = 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "minorx",
                    {
                        "desc": "minor x-ticks in dem_par coordinates (default = 0.1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "minory",
                    {
                        "desc": "minor y-ticks in dem_par coordinates (default = 0.1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thick",
                    {
                        "desc": "tick and gridline thickness in pixels (default = 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("grid", {"desc": "1 = draw grid, 0 = no grid (default = 0)\n", "optional": True, "type": "unknown"}),
                (
                    "gopac",
                    {
                        "desc": "grid opacity, 0.0 (fully transparent) to 1.0 (fully opaque), " "default=1.0\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "svg_map",
    },
    "svg_poly": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "image",
                    {
                        "desc": "(input) URL of background image in png or jpg format (- for no " "background image)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "dem_par",
                    {
                        "desc": "(input) corresponding dem_par file (- for no dem_par file)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "poly",
                    {
                        "desc": "(input) polygon point file, format: x-coord y-coord index text\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "svg",
                    {
                        "desc": "(output) SVG output file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {
                        "desc": "image width (overruled by dem_par width if applicable)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of image lines (overruled by dem_par nlines if applicable)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "thick",
                    {
                        "desc": "drawing mode (default = 0)\n"
                        "0: draw a solid polygon connecting points\n"
                        "1: draw a solid arc connecting points\n"
                        "2: draw a dashed polygon connecting points\n"
                        "3: draw a dashed arc connecting points\n"
                        "4: draw a solid polygon that respects insideness specified by the "
                        "points\n"
                        "5: draw a dashed polygon that respects insideness specified by the "
                        "points\n"
                        "6: draw crosses\n"
                        "7: draw triangles\n"
                        "8: draw circles\n"
                        "9: draw boxes\n"
                        "10: only text\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                ("lcolor", {"desc": "line thickness in pixels (default = 1.0)\n", "optional": True, "type": "unknown"}),
                (
                    "lopac",
                    {
                        "desc": "line/symbol color (default = black), use none for no stroke lines\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "pcolor",
                    {
                        "desc": "line/text opacity 0.0 (fully transparent) to 1.0 (fully opaque), " "default=1.0\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "popac",
                    {
                        "desc": "polygon fill color (default = black), use none for no fill\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "tcolor",
                    {
                        "desc": "polygon fill opacity 0.0 (fully transparent) to 1.0 (fully opaque), " "default=1.0\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "font",
                    {
                        "desc": "text color (default = black), use none for no text\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                ("fsize", {"desc": "font size (default = 14)\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "svg_poly",
    },
    "swap_IQ": {
        "module": "MSP",
        "params": OrderedDict(
            [
                (
                    "SAR_par",
                    {
                        "desc": "(input) MSP SAR sensor parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw_IQ",
                    {
                        "desc": "(input) input uncompressed SAR data\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "raw_IQ_swap",
                    {
                        "desc": "(output) output raw data with IQ swapped\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "swap_IQ",
    },
    "swap_bytes": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) input data file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "outfile",
                    {
                        "desc": "(output) output data file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "swap_type",
                    {
                        "desc": "data type (bytes/value)\n"
                        "2: (1,2,3,4,5,6,7,8...) --> (2,1,4,3,6,5,8,7...) (SHORT, SCOMPLEX)\n"
                        "4: (1,2,3,4,5,6,7,8...) --> (4,3,2,1,8,7,6,5...) (INT, FLOAT, "
                        "FCOMPLEX)\n"
                        "8: (1,2,3,4,5,6,7,8...) --> (8,7,6,5,4,3,2,1...) (DOUBLE)\n",
                        "enum": [2, 4, 8],
                        "optional": False,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "swap_bytes",
    },
    "takecut": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("data_in", {"desc": "(input) input data file (float)\n", "optional": False, "type": "unknown"}),
                ("width", {"desc": "samples per row of data_in\n", "optional": False, "type": "unknown"}),
                (
                    "report",
                    {
                        "desc": "(output) text file containing extracted values\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mode",
                    {
                        "desc": "data extraction mode (enter - for default)\n"
                        "0: extract values along a line (default)\n"
                        "1: extract values along a vertical cut\n",
                        "enum": [0, 1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "pos",
                    {
                        "desc": "line or across-track sample number (starting with 0)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "pr_flag",
                    {
                        "desc": "print option (enter - for default)\n"
                        "0: print values at all positions (default)\n"
                        "1: print only positions with valid data (data != 0.0)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "takecut",
    },
    "temp_filt": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data_tab",
                    {
                        "desc": "(input) two column list of the names of input and output data files "
                        "(FLOAT)\n"
                        "input file 1   output file 1\n"
                        "input file 2   output file 2\n"
                        "...            ...\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "wy",
                    {
                        "desc": "spatial averaging filter height (enter - for default:  5.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wx",
                    {
                        "desc": "spatial averaging filter width (enter - for default:  5.00)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wt_flag",
                    {
                        "desc": "weighting function flag (enter - for default)\n"
                        "0: uniform (default)\n"
                        "1: linear\n"
                        "2: Gaussian\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "zflag",
                    {
                        "desc": "zero data flag (enter - for default)\n"
                        "0: 0.0 interpreted as missing value (default)\n"
                        "1: 0.0 interpreted as valid data value\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "loff",
                    {
                        "desc": "number of lines offset to starting line (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - or 0 for default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "temp_filt",
    },
    "temp_filt_ad": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data_tab",
                    {
                        "desc": "(input) three column list of the names of input and output data "
                        "files (FLOAT)\n"
                        "input file 1  spatially filtered file 1  output file 1\n"
                        "input file 2  spatially filtered file 2  output file 2\n"
                        "...              ...                   ...\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "zflag",
                    {
                        "desc": "zero data flag (enter - for default)\n"
                        "0: 0.0 interpreted as missing value (default)\n"
                        "1: 0.0 interpreted as valid data value\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "loffset",
                    {
                        "desc": "number of lines offset to starting line (enter - for default: 0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - or 0 for default: entire " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "temp_filt_ad",
    },
    "temp_lin_var": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data_tab",
                    {
                        "desc": "(input) single column list of the names of input data files " "(FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mean",
                    {
                        "desc": "(output) temporal mean (linear scale) (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "stdev",
                    {
                        "desc": "(output) temporal variability (stdev/pow(mean,norm_pow))(FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "wy",
                    {
                        "desc": "spatial averaging filter height (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wx",
                    {
                        "desc": "spatial averaging filter width (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wt_flag",
                    {
                        "desc": "weighting function (enter - for default)\n"
                        "0: uniform (default)\n"
                        "1: linear\n"
                        "2: Gaussian\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "zflag",
                    {
                        "desc": "zero data flag (enter - for default)\n"
                        "0: 0.0 interpreted as missing value (default)\n"
                        "1: 0.0 interpreted as valid data value\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "loff",
                    {"desc": "offset to starting line (enter - for default: 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - or 0 for default: entire " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "norm_pow",
                    {
                        "desc": "temporal stdev is normalized with POW(mean,norm_pow) (enter - for "
                        "default)\n"
                        "0.0: normalized with 1.0\n"
                        "1.0: normalized with backscatter intensity (default)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "temp_lin_var",
    },
    "temp_log_var": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data_tab",
                    {
                        "desc": "(input) single column list of the names of input data files " "(FLOAT)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mean",
                    {
                        "desc": "(output) temporal mean in dB (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "stdev",
                    {
                        "desc": "(output) temporal variability, standard deviation in dB (FLOAT)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "wy",
                    {
                        "desc": "spatial averaging filter height (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wx",
                    {
                        "desc": "spatial averaging filter width (enter - for default: 1.0)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "wt_flag",
                    {
                        "desc": "weighting function (enter - for default)\n"
                        "0: uniform (default)\n"
                        "1: linear\n"
                        "2: Gaussian\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "zflag",
                    {
                        "desc": "zero data flag (enter - for default)\n"
                        "0: 0.0 interpreted as missing value (default)\n"
                        "1: 0.0 interpreted as valid data value\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "loff",
                    {"desc": "offset to starting line (enter - for default: 0)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "nlines",
                    {
                        "desc": "number of lines to process (enter - or 0 for default: entire " "file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "temp_log_var",
    },
    "texture": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) data file (float, fcomplex, or scomplex)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "format_flag",
                    {
                        "desc": "format of data_in: 0: float, 1: fcomplex, 2: scomplex)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "texture",
                    {
                        "desc": "(output) image texture (float) defined as normalized second moment\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "type",
                    {
                        "desc": "texture measure flag (enter - for default)\n"
                        "0: texture defined as stdev/mean (default)\n"
                        "1: log<I>-<logI>\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "bx",
                    {
                        "desc": "estimation window size in input image range pixels (enter - for " "default: 15)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "by",
                    {
                        "desc": "estimation window size in input image azimuth pixels (default - for " "default: bx)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "r_looks",
                    {
                        "desc": "range multilooking (in range pixels) (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "az_looks",
                    {
                        "desc": "azimuth multilooking (in azimuth pixels) (enter - for default: 1)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "weights_flag",
                    {
                        "desc": "weighting function: (enter - for default) \n"
                        "0: no weighting function applied (default)\n"
                        "1: linear weighting function\n"
                        "2: Gaussian weighting function\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
                (
                    "data_in_mean",
                    {
                        "desc": "(input) first moment of input data file (float) (enter - for none)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "texture",
    },
    "thres_data": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "data_in",
                    {
                        "desc": "(input) data file (FLOAT, FCOMPLEX, or SUN/BMP/TIFF raster format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {
                        "desc": "width of input data file and threshold data file\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "data_out",
                    {
                        "desc": "(output) data file, same data format as input data \n"
                        "all points in data_in are set to 0.0 where thres_data < tmin or "
                        "thres_data > t_max\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "t_data",
                    {
                        "desc": "(input) data used for threshold test (FLOAT format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("t_min", {"desc": "minimum threshold data value (FLOAT)\n", "optional": False, "type": "unknown"}),
                ("t_max", {"desc": "maximum threshold data value (FLOAT)\n", "optional": False, "type": "unknown"}),
                (
                    "dtype",
                    {
                        "desc": "data type (enter - for default)\n"
                        "0: FLOAT (default)\n"
                        "1: FCOMPLEX\n"
                        "2: SUN/BMP/TIFF raster image\n",
                        "enum": [0, 1, 2],
                        "optional": True,
                        "type": "enum",
                    },
                ),
            ]
        ),
        "program": "thres_data",
    },
    "tree_cc": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "flag",
                    {
                        "desc": "(input) phase unwrapping flag file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                (
                    "mbl",
                    {"desc": "maximum branch length (default=32, maximum=64) \n", "optional": True, "type": "unknown"},
                ),
                ("xmin", {"desc": "starting range pixel offset (default = 0)\n", "optional": True, "type": "unknown"}),
                (
                    "xmax",
                    {"desc": "last range pixel offset (default = width-1)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "tree_cc",
    },
    "tree_edit": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "flag",
                    {
                        "desc": "(input) phase unwrapping flag file with same dimensions as the raster "
                        "overlay image\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "ras",
                    {
                        "desc": "(input) 8-bit raster overlay image (Sun raster: *.ras, BMP: *.bmp, or "
                        "TIFF: *.tif)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "mag",
                    {"desc": "magnification factor (enter - for default: 5)\n", "optional": True, "type": "unknown"},
                ),
                (
                    "win_sz",
                    {
                        "desc": "size of input data region to be magnified (enter - for default: 80)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "tree_edit",
    },
    "tree_gzw": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "flag",
                    {
                        "desc": "(input) phase unwrapping flag file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/row\n", "optional": False, "type": "unknown"}),
                ("mbl", {"desc": "maximum branch length (default=32)\n", "optional": True, "type": "unknown"}),
                ("xmin", {"desc": "starting range pixel offset (default = 0)\n", "optional": True, "type": "unknown"}),
                (
                    "xmax",
                    {"desc": "last range pixel offset (default = width-1)\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "tree_gzw",
    },
    "trigo": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("data1", {"desc": "(input) angle data in radians (float)\n", "optional": False, "type": "unknown"}),
                (
                    "func",
                    {
                        "desc": "1: sin, 2: cos, 3: tan, 4: asin, 5: acos, 6:atan\n",
                        "enum": [1],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "data2",
                    {
                        "desc": "(output) data calculated as func(data1) (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of samples/line\n", "optional": False, "type": "unknown"}),
            ]
        ),
        "program": "trigo",
    },
    "uchar2float": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "infile",
                    {
                        "desc": "(input) input data file (unsigned char, 1 byte/sample)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("outfile", {"desc": "(output output file (float)\n", "optional": False, "type": "unknown"}),
                ("scale", {"desc": "scale factor (default: 1.0)\n", "optional": False, "type": "unknown"}),
                ("exp", {"desc": "exponent (default: 1.0)\n", "optional": False, "type": "unknown"}),
                ("offset", {"desc": "offset (default: 0.0)\n", "optional": True, "type": "unknown"}),
            ]
        ),
        "program": "uchar2float",
    },
    "unw_model": {
        "module": "ISP",
        "params": OrderedDict(
            [
                (
                    "interf",
                    {
                        "desc": "(input) complex interferogram\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "unw_model",
                    {
                        "desc": "(input) approximate unwrapped phase model (float)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "unw",
                    {
                        "desc": "(output) unwrapped phase (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "width",
                    {"desc": "number of samples/row of the interferogram\n", "optional": False, "type": "unknown"},
                ),
                (
                    "xinit",
                    {
                        "desc": "offset to phase reference location in range (col)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "yinit",
                    {
                        "desc": "offset to phase reference location in azimuth (row)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "ref_ph",
                    {
                        "desc": "reference point phase (radians) (enter - for phase at the reference " "point )\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "width_model",
                    {
                        "desc": "number of samples/row of the unwrapped phase model (default: "
                        "interferogram width)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "unw_model",
    },
    "unw_to_cpx": {
        "module": "LAT",
        "params": OrderedDict(
            [
                ("unw", {"desc": "(input) unwrapped phase (float)\n", "optional": False, "type": "unknown"}),
                (
                    "cpx",
                    {
                        "desc": "(output) interferogram file (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "samples per row\n", "optional": False, "type": "unknown"}),
            ]
        ),
        "program": "unw_to_cpx",
    },
    "update_par": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "PAR-1",
                    {
                        "desc": "(input) input SLC/MLI, TOPS, DEM, DIFF/GEO, ISP offset/interferogram "
                        "or GPRI parameter file\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "PAR-2",
                    {
                        "desc": "(output) updated SLC/MLI, TOPS, DEM, DIFF/GEO, ISP "
                        "offset/interferogram or GPRI parameter file\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "update_par",
    },
    "vec_math": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "d1",
                    {
                        "desc": "(input) vector float data 1 (XYZ, ENU..., enter - for none)\n"
                        "NOTE: if no input file is provided, then d1 values are set to "
                        "(0,0,0)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "d2",
                    {
                        "desc": "(input) vector float data 2 (XYZ, ENU..., enter - for none)\n"
                        "NOTE: if no input file is provided for modes 0->3, d2 values are set "
                        "to (c1, c2, c3)\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "d_out",
                    {
                        "desc": "(output) vector or scalar result (XYZ, ENU..., or scalar for modes "
                        "2,4: dot product and norm(d1))\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                ("width", {"desc": "number of 3D vectors/line\n", "optional": False, "type": "unknown"}),
                (
                    "mode",
                    {
                        "desc": "math operations:\n"
                        "0: vector addition: d1 + d2\n"
                        "1: vector subtraction: d1 - d2\n"
                        "2: dot product: d1 . d2, scalar float output\n"
                        "3: cross product: d1 x d2\n"
                        "4: norm(d1), scalar float output\n"
                        "5: scalar multiply d1 * d2, where d2 is a scalar array\n"
                        "6: scalar divide d1/d2 where d2 is a scalar array\n",
                        "enum": [0, 1, 2, 3, 4, 5, 6],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "c1",
                    {
                        "desc": "constant value for first vector component, when d2 set to - (float)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "c2",
                    {
                        "desc": "constant value for second vector component, when d2 set to - (float)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "c3",
                    {
                        "desc": "constant value for third vector component, when d2 set to - (float)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nflg",
                    {
                        "desc": "normalize vector flag (enter - for default: 0):\n"
                        "0: do not normalize output vector data (default)\n"
                        "1: normalize output vector data, dividing by |d_out| for modes 0,1,3\n"
                        "NOTE: if the vector is (0,0,0) then the normalized output is set to "
                        "(0,0,0)\n",
                        "enum": [0, 1],
                        "optional": True,
                        "type": "unknown",
                    },
                ),
                (
                    "nl",
                    {"desc": "number of lines, required only if d1 is set to -\n", "optional": True, "type": "unknown"},
                ),
            ]
        ),
        "program": "vec_math",
    },
    "vec_to_real": {
        "module": "DISP",
        "params": OrderedDict(
            [
                (
                    "vec",
                    {
                        "desc": "(input) vector input data (float)\n"
                        "NOTE: vector data are triplets of 4-byte single-precision floating "
                        "point numbers\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "width",
                    {"desc": "number of vectors per line of the input data\n", "optional": False, "type": "unknown"},
                ),
                (
                    "index",
                    {
                        "desc": "index of vector component to extract:\n"
                        "1: component 1\n"
                        "2: component 2\n"
                        "3: component 3\n",
                        "enum": [1, 2, 3],
                        "optional": False,
                        "type": "enum",
                    },
                ),
                (
                    "cmp",
                    {
                        "desc": "(output) selected vector component (float)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
            ]
        ),
        "program": "vec_to_real",
    },
    "wolf": {
        "module": "LAT",
        "params": OrderedDict(
            [
                (
                    "SLC-1",
                    {
                        "desc": "(input) H polarized (HH or VH) single-look complex image (scomplex or "
                        "fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC-2",
                    {
                        "desc": "(input) V polarized (VV or HV) single-look complex image coregistered with "
                        "SLC-1 (scomplex or fcomplex format)\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC1_par",
                    {
                        "desc": "(input) SLC image parameter file of SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "SLC2_par",
                    {
                        "desc": "(input) SLC image parameter file of SLC-2 coregistered with SLC-1\n",
                        "is_infile": True,
                        "is_outfile": False,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "J",
                    {
                        "desc": "(output) root file name of Wolf coherence matrix elements (e.g. scene_id): "
                        ".j11, .j22, (float), .j12 (fcomplex)\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "J_par",
                    {
                        "desc": "(output) MLI image parameter file associated with the Wolf coherence "
                        "matrix element data files\n",
                        "is_infile": False,
                        "is_outfile": True,
                        "optional": False,
                        "type": "path",
                    },
                ),
                (
                    "rlks",
                    {
                        "desc": "number of range looks used to calculate coherence\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                (
                    "azlks",
                    {
                        "desc": "number of azimuth looks used to calculate coherence\n",
                        "optional": False,
                        "type": "unknown",
                    },
                ),
                ("loff", {"desc": "offset to starting line (default: 0)\n", "optional": True, "type": "unknown"}),
                (
                    "nlines",
                    {
                        "desc": "number of SLC lines to process (enter - for default: entire file)\n",
                        "optional": True,
                        "type": "unknown",
                    },
                ),
            ]
        ),
        "program": "wolf",
    },
}
