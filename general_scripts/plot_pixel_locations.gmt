#!/bin/bash

display_usage() {
    echo ""
    echo "*******************************************************************************"
    echo "* plot_pixel_locations:  Plot locations of pixel point analyses on a ratemap. *"
    echo "*                        Requires *.dat and *_header.txt files of the         *"
    echo "*                        background image to be created in Pirate.            *"
    echo "*                                                                             *"
    echo "*  NOTE: script will only work if run on the NCI. The Pirate files will need  *"
    echo "*        to be transferred from GA to NCI                                     *"
    echo "*                                                                             *"
    echo "* input:  [proc_file]    name of GAMMA proc file (eg. gamma.proc)             *"
    echo "*         [image]        pirate background file (*.dat)                       *"
    echo "*         [pixel_values] name of pixel values file                            *"
    echo "*         [image_flag]   1 for ratemap, 2 for timeseries                      *"
    echo "*         [pixel_flag]   1 for single pixel, 2 for pixel sq avg               *"
    echo "*         <inc>          scale bar increment (default 5)                      *"
    echo "*         <scale>        min/max scale bar value (default 15)                 *"
    echo "*         <scale_title>  LOS or vertical (default LOS)                        *"
    echo "*         <az>           azimuth illumination for DEM (default 315)           *"
    echo "*                                                                             *"
    echo "*         Padding around image to fit scale bar and LOS arrows:               *" 
    echo "*         <top_pad>      top padding (default 0.03)                           *"
    echo "*         <bot_pad>      bottom padding (default 0.2)                         *"
    echo "*         <side_pad>     side padding (default 0.05)                          *"
    echo "*                                                                             *"
    echo "* author: Sarah Lawrie @ GA       24/09/2015, v1.0                            *"
    echo "*******************************************************************************"
    echo -e "Usage: plot_pixel_locations.bash [proc_file] [image] [pixel_values] [image_flag] [pixel_flag] <inc> <scale> <scale_title> <az> <top_pad> <bot_pad> <side_pad>"
    }

if [ $# -lt 5 ]
then 
    display_usage
    exit 1
fi

proc_file=$1
image=$2
values_file=$3
image_flag=$4
pixel_flag=$5

if [ $# -gt 5 ]; then
    int=$6
else
    int=5
fi
if [ $# -gt 6 ]; then
    scale=$7
else
    scale=15
fi
if [ $# -gt 7 ]; then
    title_type=$8
else
    title_type=LOS
fi
if [ $# -gt 8 ]; then
    az=$9
else
    az=315
fi
if [ $# -gt 9 ]; then
    top_pad={$10}
else
    top_pad=0.03
fi
if [ $# -gt 10 ]; then
    bot_pad={$11} # need curly bracket to get 10th variable onwards to be recognised
else
    bot_pad=0.2
fi
if [ $# -gt 11 ]; then
    side_pad={$12}
else
    side_pad=0.05
fi


#'LOS Phase (mm) or 'Phase (mm)' for vertical
if [ $title_type == LOS ]; then
    if [ $image_flag -eq 1 ]; then
	scale_title="LOS Phase (mm/yr)"
    else
	scale_title="LOS Phase (mm)"
    fi
elif [ $title_type == vertical ]; then
    if [ $image_flag -eq 1]; then
	scale_title="Phase (mm/yr)"
    else
	scale_title="Phase (mm)"
    fi
else
    echo "scale title not recognised, must be LOS or vertical"
fi

## Variables from parameter file (*.proc)
nci_path=`grep NCI_PATH= $proc_file | cut -d "=" -f 2`
platform=`grep Platform= $proc_file | cut -d "=" -f 2`
project=`grep Project= $proc_file | cut -d "=" -f 2`
sensor=`grep Sensor= $proc_file | cut -d "=" -f 2`
track=`grep Track= $proc_file | cut -d "=" -f 2`
orient=`grep Orientation= $proc_file | cut -d "=" -f 2`


## Identify project directory based on platform
if [ $platform == NCI ]; then
    proj_dir=$nci_path/INSAR_ANALYSIS/$project/$sensor/GAMMA
    pir_dir=$nci_path/INSAR_ANALYSIS/$project/$sensor/PIRATE
else
    proj_dir=/nas/gemd/insar/INSAR_ANALYSIS/$project/$sensor/GAMMA
    pir_dir=/nas/gemd/insar/INSAR_ANALYSIS/$project/$sensor/PIRATE
fi


## Insert scene details top of NCI .e file
echo "" 1>&2 # adds spaces at top so scene details are clear
echo "" 1>&2
echo "PROCESSING_PROJECT: "$project 1>&2

## Load GAMMA based on platform
if [ $platform == NCI ]; then
    GAMMA=`grep GAMMA_NCI= $proc_file | cut -d "=" -f 2`
    source $GAMMA
else
    GAMMA=`grep GAMMA_GA= $proc_file | cut -d "=" -f 2`
    source $GAMMA
fi

## Identify dem project directory based on platform
if [ $platform == NCI ]; then
    dem_name_nci=`grep DEM_name_NCI= $proc_file | cut -d "=" -f 2`
    dem_name=`echo $dem_name_nci | cut -f 1 -d '.'`
    dem=$proj_dir/gamma_dem/$dem_name.grd
else
    :
fi

dir=`pwd`
cd $dir

col=`awk 'NR == 2 {print $1}' $values_file | cut -f 1 -d ','`
row=`awk 'NR == 2 {print $1}' $values_file | cut -f 2 -d ','`
grid=`awk 'NR == 2 {print $1}' $values_file | cut -f 3 -d ','`

if [ $pixel_flag -eq 1 ]; then
    title="Pixel Point ("$col"c, "$row"r)"
    psfile="pixel_point_location_"$col"c"$row"r.ps"
else
    box=$(echo $grid \* 2 | bc)
    pix_box=$(echo $box + 1 | bc)
    psfile="pixel_sq_avg_location_"$grid"_"$col"c"$row"r.ps"
fi

cpt=/g/data/dg9/repo/general_scripts/bcgyr.cpt
pos_cpt=/g/data/dg9/repo/general_scripts/gr.cpt
neg_cpt=/g/data/dg9/repo/general_scripts/bg.cpt

name=`echo $image | cut -f 1 -d '.'`
image_hdr=$name"_header.txt"


gmtset MAP_FRAME_TYPE plain
gmtset MAP_TICK_LENGTH_PRIMARY 5p/2.5p
gmtset PROJ_LENGTH_UNIT c
gmtset FORMAT_GEO_MAP ddd:mm
gmtset FONT_ANNOT_PRIMARY 10p
proj=-JM8

## Image coordinates (from matlab)
lon_min3=`grep x_min: $image_hdr | awk '{print $2}'`
lon_max3=`grep x_max: $image_hdr | awk '{print $2}'`
lat_min3=`grep y_min: $image_hdr | awk '{print $2}'`
lat_max3=`grep y_max: $image_hdr | awk '{print $2}'`

# force dem intensity image to be the same size as the input image by using row and column values, not increment
width=`grep width: $image_hdr | awk '{print $2}'`
length=`grep length: $image_hdr | awk '{print $2}'`
img_inc=-I$width+/$length+

#flip lat min and max if negative
if (( $(bc <<< "$lat_min3 < 0") == 1 )); then
    lat_min4=$lat_max3
    lat_max4=$lat_min3
else
    lat_min4=$lat_min3
    lat_max4=$lat_min3
fi

range=-R$lon_min3/$lon_max3/$lat_min4/$lat_max4


## Determine plot coordinates (add padding around image coordinates)
if (( $(bc <<< "$lat_min3 < 0") == 1 )); then
    lat_min5=$(echo $lat_min4 - $bot_pad | bc)
    lat_max5=$(echo $lat_max4 + $top_pad | bc)

    lon_min5=$(echo $lon_min3 - $side_pad | bc)
    lon_max5=$(echo $lon_max3 + $side_pad | bc)
else
    lat_min5=$(echo $lat_min4 - $top_pad | bc)
    lat_max5=$(echo $lat_max4 + $bot_pad | bc)

    lon_min5=$(echo $lon_min3 - $side_pad | bc)
    lon_max5=$(echo $lon_max3 + $side_pad | bc)
fi

# round values to 2 decimal places (so plot will work)
lat_min6=`echo $lat_min5 | awk '{printf "%0.2f",$1}'`
lat_max6=`echo $lat_max5 | awk '{printf "%0.2f",$1}'`
lon_min6=`echo $lon_min5 | awk '{printf "%0.2f",$1}'`
lon_max6=`echo $lon_max5 | awk '{printf "%0.2f",$1}'`

plotrange=-R$lon_min6/$lon_max6/$lat_min6/$lat_max6

## Resize, filter and create intensity grid for dem 
grdcut $dem -Gtemp.grd $plotrange -V
grdfilter temp.grd -Gdem.grd -D1 -Fg0.35 -V 
grdgradient dem.grd -A$az -Nt -Gdem_int.grd -V
makecpt -Cgray -T20/200/10 -N -Z -V > dem.cpt

# Intensity grid for image
#grdsample dem.grd -Gimg_dem.grd $range $img_inc -V # resample to image resolution
#grdgradient img_dem.grd -A$az -Nt -Gimg_int.grd -V

# Convert image to grid
xyz2grd $image -N0 $range -ZTLf $img_inc -Gphs.grd -V 

# Make cpt file 
if [ $image_flag -eq 1 ]; then
    makecpt -C$cpt -T-$scale/$scale/1 -Do -Fr -Z -V > phs.cpt
else
    grdinfo phs.grd > grd_info
    z_min=`grep z_min: grd_info | awk '{print $3}'`
    z_max=`grep z_max: grd_info | awk '{print $5}'`
    z_min2=`printf %0.f $z_min` #round floating point numbers
    z_max2=`printf %0.f $z_max`
    
    z_min2=-50
    z_max2=60

    if [ $z_max2 -le 0 ]; then # all negative values
	makecpt -C$cpt -T$z_min2/$z_max2/1 -Do -Z -Fr > phs.cpt
    elif [ $z_min2 -gt 0 ]; then # all positive values
	makecpt -C$cpt -T$z_min2/$z_max2/1 -Do -Z -Fr > phs.cpt
    else 
	makecpt -C$neg_cpt -T$z_min2/0/1 -Do -Z -Fr > neg.cpt
	makecpt -C$pos_cpt -T0/$z_max2/1 -Do -Z -Fr > pos.cpt
	head -n -3 pos.cpt > pos_head
	tail -n3 pos.cpt > pos_tail
	head -n -3 neg.cpt > neg_head
	tail -n3 neg.cpt > neg_tail
	cp neg_head phs.cpt
	cat pos_head >> phs.cpt
	tail -n2 pos_tail > pos_tail2
	head -n -2 neg_tail > neg_tail2
	cat neg_tail2 >> phs.cpt
	cat pos_tail2 >> phs.cpt
    fi
fi

# Plot shaded relief of dem
grdimage dem.grd -Cdem.cpt $proj $plotrange -Idem_int.grd -Qs -K -P -V > $psfile

# Plot image over dem
grdimage phs.grd -Cphs.cpt $proj $plotrange -Qs -K -O -P -V >> $psfile
#grdimage phs.grd -Cphs.cpt $proj $plotrange -Iimg_int.grd -Qs -K -O -P -V >> $psfile

# Plot coast and colour scale
pscoast -R -JM -W1 -Dh -Swhite -K -O -P -V >> $psfile
psscale -D4/1/6/0.3h -S -Al -B$int -Cphs.cpt -K -O -P -V >> $psfile

# Plot basemap
psbasemap $proj $plotrange -Ba0.5f0.25/a0.5f0.25WSen -K -O -P -V >> $psfile

# Position of scale bar
temp1=$(echo $lon_max6 - $lon_min6 | bc -l)
temp2=$(echo $temp1/2 | bc -l)
scale_lon=$(echo $lon_min6 + $temp2 | bc -l)

if (( $(bc <<< "$lat_min6 < 0") == 1 )); then
    scale_lat=$(echo $lat_min6 + 0.155 | bc -l)
else
    scale_lat=$(echo $lat_max6 - 0.155 | bc -l)
fi

# Plot colour scale label
pstext $proj $plotrange -F+f10p,Helvetica-Bold -N -K -O -P -V <<EOF >> $psfile
$scale_lon $scale_lat $scale_title
EOF

if [ $pixel_flag -eq 1 ]; then
# Plot pixel point location 
    lon=`awk 'NR==4 {print $1}' $values_file | cut -f 1 -d ','`
    lat=`awk 'NR==4 {print $1}' $values_file | cut -f 2 -d ','`

    psxy $proj $plotrange -Sx0.15c -W0.3p,black -K -O -P -V <<EOF >> $psfile
$lon $lat
EOF
else
# Plot pixel centre location 
    cen_lon=`awk 'NR==4 {print $1}' $values_file | cut -f 1 -d ','`
    cen_lat=`awk 'NR==4 {print $1}' $values_file | cut -f 2 -d ','`

    psxy $proj $plotrange -Sx0.15c -W0.3p,black -K -O -P -V <<EOF >> $psfile
$cen_lon $cen_lat
EOF

# Plot square location
    ul_lon=`awk 'NR==11 {print $2}' $values_file | cut -f 1 -d ','`
    ul_lat=`awk 'NR==11 {print $2}' $values_file | cut -f 2 -d ','`
    ur_lon=`awk 'NR==12 {print $2}' $values_file | cut -f 1 -d ','`
    ur_lat=`awk 'NR==12 {print $2}' $values_file | cut -f 2 -d ','`
    lr_lon=`awk 'NR==13 {print $2}' $values_file | cut -f 1 -d ','`
    lr_lat=`awk 'NR==13 {print $2}' $values_file | cut -f 2 -d ','`
    ll_lon=`awk 'NR==14 {print $2}' $values_file | cut -f 1 -d ','`
    ll_lat=`awk 'NR==14 {print $2}' $values_file | cut -f 2 -d ','`

    psxy $proj $plotrange -W0.5p,black -Z -K -O -P -V <<EOF >> $psfile
$ul_lon $ul_lat 
$ur_lon $ur_lat 
$lr_lon $lr_lat 
$ll_lon $ll_lat 
$ul_lon $ul_lat 
EOF
fi

# Plot LOS arrow
if [ $orient == ascending ]; then
    t1=$(echo $lon_min6 + 0.895 | bc -l)
    if (( $(bc <<< "$lat_min6 < 0") == 1 )); then
	t2=$(echo $lat_min6 + 1.202 | bc -l)
    else
	t2=$(echo $lat_max6 - 1.202 | bc -l)
    fi
    t3=$(echo $lon_min6 + 0.878 | bc -l)
    if (( $(bc <<< "$lat_min6 < 0") == 1 )); then
	t4=$(echo $lat_min6 + 1.26 | bc -l)
    else
	t4=$(echo $lat_max6 - 1.26 | bc -l)
    fi
    t5=$(echo $lon_min6 + 0.828 | bc -l)
    if (( $(bc <<< "$lat_min6 < 0") == 1 )); then
	t6=$(echo $lat_min6 + 1.38 | bc -l)
    else
	t6=$(echo $lat_max6 - 1.38 | bc -l)
    fi
    t7=$(echo $lon_min6 + 1.05 | bc -l)
    if (( $(bc <<< "$lat_min6 < 0") == 1 )); then
	t8=$(echo $lat_min6 + 1.27 | bc -l)
    else
	t8=$(echo $lat_max6 - 1.27 | bc -l)
    fi
psxy $proj $plotrange -W0.8 -Sv0.25+e -Gblack -O -K -P -V <<EOF >> $psfile
$t1 $t2 105 1.2
EOF
psxy $proj $plotrange -W0.8 -Sv0.25+e -Gblack -O -K -P -V <<EOF >> $psfile
$t3 $t4 17 0.6
EOF
pstext $proj $plotrange -F+f8p,Helvetica-Bold,+j -Gwhite -O -K -P -V <<EOF >> $psfile
$t5 $t6 TL Az
EOF
pstext $proj $plotrange -F+f8p,Helvetica-Bold,+j -Gwhite -O -P -V <<EOF >> $psfile
$t7 $t8 BR LOS
EOF
else
    t1=$(echo $lon_min6 + 0.213 | bc -l)
    if (( $(bc <<< "$lat_min6 < 0") == 1 )); then
	t2=$(echo $lat_min6 + 1.32 | bc -l)
    else
	t2=$(echo $lat_max6 - 1.32 | bc -l)
    fi
    t3=$(echo $lon_min6 + 0.197 | bc -l)
    if (( $(bc <<< "$lat_min6 < 0") == 1 )); then
	t4=$(echo $lat_min6 + 1.26 | bc -l)
    else
	t4=$(echo $lat_max6 - 1.26 | bc -l)
    fi
    t5=$(echo $lon_min6 + 0.145 | bc -l)
    if (( $(bc <<< "$lat_min6 < 0") == 1 )); then
	t6=$(echo $lat_min6 + 1.165 | bc -l)
    else
	t6=$(echo $lat_max6 - 1.165 | bc -l)
    fi
    t7=$(echo $lon_min6 + 0.025 | bc -l)
    if (( $(bc <<< "$lat_min6 < 0") == 1 )); then
	t8=$(echo $lat_min6 + 1.27 | bc -l)
    else
	t8=$(echo $lat_max6 - 1.27 | bc -l)
    fi
psxy $proj $plotrange -W0.8 -Sv0.25+e -Gblack -O -K -P -V <<EOF >> $psfile
$t1 $t2 255 1.2
EOF
psxy $proj $plotrange -W0.8 -Sv0.25+e -Gblack -O -K -P -V <<EOF >> $psfile
$t3 $t4 167 0.6
EOF
pstext $proj $plotrange -F+f8p,Helvetica-Bold,+j -Gwhite -O -K -P -V <<EOF >> $psfile
$t5 $t6 TL Az
EOF
pstext $proj $plotrange -F+f8p,Helvetica-Bold,+j -Gwhite -O -P -V <<EOF >> $psfile
$t7 $t8 BL LOS
EOF
fi


# Export to .tif
ps2raster $psfile -A -E300 -Tt -V

# Clean up files
rm -f *.ps temp.grd dem.grd phs.grd dem_int.grd phs.cpt dem.cpt img_int.grd grd_info pos_tail* pos_head pos.cpt neg_tail* neg_head neg.cpt


# script end 
####################
