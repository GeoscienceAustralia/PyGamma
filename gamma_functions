#!/bin/bash


### Functions for GAMMA script variables


## Input variables from proc file (*.proc)
function proc_variables {
    local proc_file=$1

    # Generic paths
    config_file=`grep ^GAMMA_CONFIG= $proc_file | cut -d "=" -f 2`
    nci_path=`grep ^NCI_PATH= $proc_file | cut -d "=" -f 2`
    envisat_orbits=`grep ^ENVISAT_ORBITS= $proc_file | cut -d "=" -f 2`
    ers_orbits=`grep ^ERS_ORBITS= $proc_file | cut -d "=" -f 2`
    s1_path=`grep ^S1_PATH= $proc_file | cut -d "=" -f 2`
    s1_orbits=`grep ^S1_ORBITS= $proc_file | cut -d "=" -f 2`
    master_dem_image=`grep ^MASTER_DEM_IMAGE= $proc_file | cut -d "=" -f 2`
    dem_img=$master_dem_image/GAMMA_DEM_SRTM_1as_mosaic.img
    
    # Project details
    project=`grep ^PROJECT= $proc_file | cut -d "=" -f 2`
    track=`grep ^TRACK= $proc_file | cut -d "=" -f 2`

    # Sensor details
    sensor=`grep ^SENSOR= $proc_file | cut -d "=" -f 2`
    polar=`grep ^POLARISATION= $proc_file | cut -d "=" -f 2`
    mode=`grep ^SENSOR_MODE= $proc_file | cut -d "=" -f 2`
    ers_sensor=`grep ^ERS_SENSOR= $proc_file | cut -d "=" -f 2`
    palsar2_type=`grep ^PALSAR2_TYPE= $proc_file | cut -d "=" -f 2`

    # Directories
    proj_dir=$nci_path/INSAR_ANALYSIS/$project/$sensor/GAMMA
    slc_dir=$proj_dir/$track/`grep ^SLC_DIR= $proc_file | cut -d "=" -f 2`
    dem_dir=$proj_dir/$track/`grep ^DEM_DIR= $proc_file | cut -d "=" -f 2`
    int_dir=$proj_dir/$track/`grep ^INT_DIR= $proc_file | cut -d "=" -f 2`
    base_dir=$proj_dir/$track/`grep ^BASE_DIR= $proc_file | cut -d "=" -f 2`
    list_dir=$proj_dir/$track/`grep ^LIST_DIR= $proc_file | cut -d "=" -f 2`
    error_dir=$proj_dir/$track/`grep ^ERROR_DIR= $proc_file | cut -d "=" -f 2`
    pdf_dir=$proj_dir/$track/`grep ^PDF_DIR= $proc_file | cut -d "=" -f 2`
    raw_data_dir=$proj_dir/`grep ^RAW_DATA_DIR= $proc_file | cut -d "=" -f 2`
    raw_data_track_dir=$raw_data_dir/$track
    batch_dir=$proj_dir/$track/`grep ^BATCH_JOB_DIR= $proc_file | cut -d "=" -f 2`
    manual_dir=$proj_dir/$track/`grep ^MANUAL_JOB_DIR= $proc_file | cut -d "=" -f 2`
    pre_proc_dir=$proj_dir/`grep ^PRE_PROC_DIR= $proc_file | cut -d "=" -f 2` # for storing previous versions of proc_files
    mdss_data_dir=`grep ^MDSS_DATA_DIR= $proc_file | cut -d "=" -f 2`
    gamma_dem_dir=$proj_dir/gamma_dem
    results_dir=$proj_dir/$track/results
    
    # DEM details
    dem_area=`grep ^DEM_AREA= $proc_file | cut -d "=" -f 2`
    mdss_dem=`grep ^MDSS_DEM_TAR= $proc_file | cut -d "=" -f 2`
    dem_name=`grep ^DEM_NAME= $proc_file | cut -d "=" -f 2`
    ext_image=`grep ^EXT_IMAGE= $proc_file | cut -d "=" -f 2`
    use_ext_image=`grep ^USE_EXT_IMAGE= $proc_file | cut -d "=" -f 2`

    # Initial lists
    frame_list=`grep ^FRAME_LIST= $proc_file | cut -d "=" -f 2`
    scene_list=`grep ^SCENE_LIST= $proc_file | cut -d "=" -f 2`
    s1_burst_list=`grep ^S1_BURST_LIST= $proc_file | cut -d "=" -f 2`
    s1_download_list=`grep ^S1_DOWNLOAD_LIST= $proc_file | cut -d "=" -f 2`

    # Multi-look details
    looks=`grep ^MULTI-LOOK= $proc_file | cut -d "=" -f 2`
    rlks=`grep ^RANGE_LOOKS= $proc_file | cut -d "=" -f 2`
    alks=`grep ^AZIMUTH_LOOKS= $proc_file | cut -d "=" -f 2`

    # Interferogram processing method
    process_method=`grep ^PROCESS_METHOD= $proc_file | cut -d "=" -f 2`
    master_scene=`grep ^REF_MASTER_SCENE= $proc_file | cut -d "=" -f 2`

    # Post processing method
    post_method=`grep ^POST_PROCESS_METHOD= $proc_file | cut -d "=" -f 2`

    # Processing steps (yes/no)
    do_raw=`grep ^EXTRACT_RAW_DATA= $proc_file | cut -d "=" -f 2`
    do_slc=`grep ^DO_SLC= $proc_file | cut -d "=" -f 2`
    coreg_dem=`grep ^COREGISTER_DEM= $proc_file | cut -d "=" -f 2`
    coregister=`grep ^COREGISTER_SLAVES= $proc_file | cut -d "=" -f 2`
    do_ifgs=`grep ^PROCESS_IFGS= $proc_file | cut -d "=" -f 2`

    # Sentinel-1 specific steps
    do_s1_resize=`grep ^DO_S1_RESIZE= $proc_file | cut -d "=" -f 2`
    s1_resize_ref=`grep ^S1_RESIZE_REF_SLC= $proc_file | cut -d "=" -f 2`
    do_s1_subset=`grep ^DO_S1_BURST_SUBSET= $proc_file | cut -d "=" -f 2`

    # DEM coregistration details
    dem_rpos=`grep ^DEM_RPOS= $proc_file | cut -d "=" -f 2`
    dem_azpos=`grep ^DEM_AZPOS= $proc_file | cut -d "=" -f 2`
    dem_noffset=`grep ^DEM_OFFSET= $proc_file | cut -d "=" -f 2`
    dem_noff1=`echo $dem_noffset | awk '{print $1}'`
    dem_noff2=`echo $dem_noffset | awk '{print $2}'`
    dem_offset_measure=`grep ^DEM_OFFSET_MEASURE= $proc_file | cut -d "=" -f 2`
    dem_patch_win1a=`grep ^DEM_PATCH_WINDOW= $proc_file | cut -d "=" -f 2`
    dem_win1a=`grep ^DEM_WIN= $proc_file | cut -d "=" -f 2 | awk '{print $1}'`
    dem_win2a=`grep ^DEM_WIN= $proc_file | cut -d "=" -f 2 | awk '{print $2}'`
    dem_snr=`grep ^DEM_SNR= $proc_file | cut -d "=" -f 2`
    dem_rad_max=`grep ^DEM_RAD_MAX= $proc_file | cut -d "=" -f 2`

    # Slave coregistration details
    slave_niter=`grep ^COREG_NUM_ITERATIONS= $proc_file | cut -d "=" -f 2`
    slave_cct=`grep ^COREG_CC_THRESH= $proc_file | cut -d "=" -f 2`
    slave_npoly=`grep ^COREG_MODEL_PARAMS= $proc_file | cut -d "=" -f 2`
    slave_win=`grep ^COREG_WINDOW_SIZE= $proc_file | cut -d "=" -f 2`
    slave_nwin=`grep ^COREG_NUM_WINDOWS= $proc_file | cut -d "=" -f 2`
    slave_ovr=`grep ^COREG_OVERSAMPLING= $proc_file | cut -d "=" -f 2`
    slave_offset_measure=`grep ^SLAVE_OFFSET_MEASURE= $proc_file | cut -d "=" -f 2`
    slave_win2=`grep ^SLAVE_WIN= $proc_file | cut -d "=" -f 2`
    slave_cct2=`grep ^SLAVE_CC_THRESH= $proc_file | cut -d "=" -f 2`

    # Sentinel-1 slave coregistration specific details
    slave_s1_cct=`grep ^COREG_S1_CC_THRESH= $proc_file | cut -d "=" -f 2`
    slave_s1_frac=`grep ^COREG_S1_FRAC_THRESH= $proc_file | cut -d "=" -f 2`
    slave_s1_stdev=`grep ^COREG_S1_STDEV_THRESH= $proc_file | cut -d "=" -f 2`

    # Interferogram details
    ifg_begin=`grep ^IFG_BEGIN= $proc_file | cut -d "=" -f 2`
    ifg_finish=`grep ^IFG_END= $proc_file | cut -d "=" -f 2`
    ifg_rpos=$dem_rpos
    ifg_azpos=$dem_azpos
    ifg_int_thres=`grep ^IFG_THRES= $proc_file | cut -d "=" -f 2`
    ifg_init_win=`grep ^IFG_INIT_WIN= $proc_file | cut -d "=" -f 2`
    ifg_offset_win=`grep ^IFG_OFFSET_WIN= $proc_file | cut -d "=" -f 2`
    ifg_base_iter_flag=`grep ^IFG_ITERATIVE= $proc_file | cut -d "=" -f 2`
    ifg_expon=`grep ^IFG_EXPONENT= $proc_file | cut -d "=" -f 2`
    ifg_filtwin=`grep ^IFG_FILTERING_WINDOW= $proc_file | cut -d "=" -f 2`
    ifg_ccwin=`grep ^IFG_COHERENCE_WINDOW= $proc_file | cut -d "=" -f 2`
    ifg_coh_thres=`grep ^IFG_COHERENCE_THRESHOLD= $proc_file | cut -d "=" -f 2`
    ifg_patch_r=`grep ^IFG_PATCHES_RANGE= $proc_file | cut -d "=" -f 2`
    ifg_patch_az=`grep ^IFG_PATCHES_AZIMUTH= $proc_file | cut -d "=" -f 2`
    ifg_refrg=`grep ^IFG_REF_POINT_RANGE= $proc_file | cut -d "=" -f 2`
    ifg_refaz=`grep ^IFG_REF_POINT_AZIMUTH= $proc_file | cut -d "=" -f 2`
    ifg_geotiff=`grep ^IFG_GEOTIFF= $proc_file | cut -d "=" -f 2`

    # PBS job parameters
    nci_project=`grep ^NCI_PROJECT= $proc_file | cut -d "=" -f 2`
    minjobs=`grep ^MIN_JOBS= $proc_file | cut -d "=" -f 2`
    maxjobs=`grep ^MAX_JOBS= $proc_file | cut -d "=" -f 2`
    pbs_run_loc=`grep ^PBS_RUN_LOC= $proc_file | cut -d "=" -f 2`
    queue=`grep ^QUEUE= $proc_file | cut -d "=" -f 2`
    exp_queue=`grep ^EXP_QUEUE= $proc_file | cut -d "=" -f 2`
    mdss_queue=`grep ^MDSS_QUEUE= $proc_file | cut -d "=" -f 2`
    raw_walltime=`grep ^RAW_WALLTIME= $proc_file | cut -d "=" -f 2`
    raw_mem=`grep ^RAW_MEM= $proc_file | cut -d "=" -f 2`
    raw_ncpus=`grep ^RAW_NCPUS= $proc_file | cut -d "=" -f 2`
    create_dem_walltime=`grep ^CREATE_DEM_WALLTIME= $proc_file | cut -d "=" -f 2`
    create_dem_mem=`grep ^CREATE_DEM_MEM= $proc_file | cut -d "=" -f 2`
    create_dem_ncpus=`grep ^CREATE_DEM_NCPUS= $proc_file | cut -d "=" -f 2`
    slc_walltime=`grep ^SLC_WALLTIME= $proc_file | cut -d "=" -f 2`
    slc_mem=`grep ^SLC_MEM= $proc_file | cut -d "=" -f 2`
    slc_ncpus=`grep ^SLC_NCPUS= $proc_file | cut -d "=" -f 2`
    calc_walltime=`grep ^CALC_WALLTIME= $proc_file | cut -d "=" -f 2`
    calc_mem=`grep ^CALC_MEM= $proc_file | cut -d "=" -f 2`
    calc_ncpus=`grep ^CALC_NCPUS= $proc_file | cut -d "=" -f 2`
    ml_walltime=`grep ^ML_WALLTIME= $proc_file | cut -d "=" -f 2`
    ml_mem=`grep ^ML_MEM= $proc_file | cut -d "=" -f 2`
    ml_ncpus=`grep ^ML_NCPUS= $proc_file | cut -d "=" -f 2`
    base_walltime=`grep ^BASE_WALLTIME= $proc_file | cut -d "=" -f 2`
    base_mem=`grep ^BASE_MEM= $proc_file | cut -d "=" -f 2`
    base_ncpus=`grep ^BASE_NCPUS= $proc_file | cut -d "=" -f 2`
    resize_walltime=`grep ^RESIZE_WALLTIME= $proc_file | cut -d "=" -f 2`
    resize_mem=`grep ^RESIZE_MEM= $proc_file | cut -d "=" -f 2`
    resize_ncpus=`grep ^RESIZE_NCPUS= $proc_file | cut -d "=" -f 2`
    dem_walltime=`grep ^DEM_WALLTIME= $proc_file | cut -d "=" -f 2`
    dem_mem=`grep ^DEM_MEM= $proc_file | cut -d "=" -f 2`
    dem_ncpus=`grep ^DEM_NCPUS= $proc_file | cut -d "=" -f 2`
    pix_walltime=`grep ^PIX_WALLTIME= $proc_file | cut -d "=" -f 2`
    pix_mem=`grep ^PIX_MEM= $proc_file | cut -d "=" -f 2`
    pix_ncpus=`grep ^PIX_NCPUS= $proc_file | cut -d "=" -f 2`
    co_slc_walltime=`grep ^COREG_WALLTIME= $proc_file | cut -d "=" -f 2`
    co_slc_mem=`grep ^COREG_MEM= $proc_file | cut -d "=" -f 2`
    co_slc_ncpus=`grep ^COREG_NCPUS= $proc_file | cut -d "=" -f 2`
    ifg_walltime=`grep ^IFG_WALLTIME= $proc_file | cut -d "=" -f 2`
    ifg_mem=`grep ^IFG_MEM= $proc_file | cut -d "=" -f 2`
    ifg_ncpus=`grep ^IFG_NCPUS= $proc_file | cut -d "=" -f 2`
    post_walltime=`grep ^POST_WALLTIME= $proc_file | cut -d "=" -f 2`
    post_mem=`grep ^POST_MEM= $proc_file | cut -d "=" -f 2`
    post_ncpus=`grep ^POST_NCPUS= $proc_file | cut -d "=" -f 2`
    img_walltime=`grep ^IMAGE_WALLTIME= $proc_file | cut -d "=" -f 2`
    img_mem=`grep ^IMAGE_MEM= $proc_file | cut -d "=" -f 2`
    img_ncpus=`grep ^IMAGE_NCPUS= $proc_file | cut -d "=" -f 2`
    err_walltime=`grep ^ERROR_WALLTIME= $proc_file | cut -d "=" -f 2`
    err_mem=`grep ^ERROR_MEM= $proc_file | cut -d "=" -f 2`
    err_ncpus=`grep ^ERROR_NCPUS= $proc_file | cut -d "=" -f 2`
}

## Generic PBS job directories
function pbs_job_dirs {
    extract_raw_batch_dir=$batch_dir/extract_raw_jobs
    slc_batch_dir=$batch_dir/slc_jobs
    ml_batch_dir=$batch_dir/ml_slc_jobs
    base_batch_dir=$batch_dir/baseline_jobs
    dem_batch_dir=$batch_dir/dem_jobs
    co_slc_batch_dir=$batch_dir/coreg_slc_jobs
    ifg_batch_dir=$batch_dir/ifg_jobs
    extract_raw_manual_dir=$manual_dir/extract_raw_jobs
    slc_manual_dir=$manual_dir/slc_jobs
    ml_manual_dir=$manual_dir/ml_slc_jobs
    base_manual_dir=$manual_dir/baseline_jobs
    dem_manual_dir=$manual_dir/dem_jobs
    co_slc_manual_dir=$manual_dir/coreg_slc_jobs
    ifg_manual_dir=$manual_dir/ifg_jobs
}

## Sentinel-1 specific PBS job directories
function s1_pbs_job_dirs {
    resize_batch_dir=$batch_dir/resize_S1_slc_jobs
    resize_manual_dir=$manual_dir/resize_S1_slc_jobs
    subset_batch_dir=$batch_dir/subset_S1_slc_jobs
    subset_manual_dir=$manual_dir/subset_S1_slc_jobs
}

## Set final file locations for processing
function final_file_loc {
    frame_list=$list_dir/`grep ^FRAME_LIST= $proc_file | cut -d "=" -f 2`
    scene_list=$list_dir/`grep ^SCENE_LIST= $proc_file | cut -d "=" -f 2`
    slave_list=$list_dir/`grep ^SLAVE_LIST= $proc_file | cut -d "=" -f 2`
    ifg_list=$list_dir/`grep ^IFG_LIST= $proc_file | cut -d "=" -f 2`
    s1_burst_list=$list_dir/`grep ^S1_BURST_LIST= $proc_file | cut -d "=" -f 2`
    s1_download_list=$list_dir/`grep ^S1_DOWNLOAD_LIST= $proc_file | cut -d "=" -f 2`
    remove_list=$list_dir/`grep ^REMOVE_SCENE_LIST= $proc_file | cut -d "=" -f 2`
}

## Print processing details to screen (when running from head node)
function processing_details {
    local summary=$1
    local project=$2
    local track=$3
    echo ""
    echo $summary "for" $project $track "..."
    echo ""
}

## Insert scene details on top of NCI .e and .o files, can easily ID problem scene when errors are colsolidated
function PBS_processing_details {
    local project=$1
    local track=$2
    local scene=$3
    # .e file
    echo "" 1>&2 # adds spaces at top so scene details are clear
    echo "" 1>&2
    echo "PROCESSING_PROJECT: "$project $track $scene  1>&2
    echo "" 1>&2
    
    # .o file
    echo ""
    echo "PROCESSING PROJECT: "$project $track $scene 
    echo ""
}

## Copy output of Gamma programs to log files
GM()
{
    echo $* | tee -a command.log
    echo
    $* >> output.log 2> temp_log
    cat temp_log >> error.log
    #cat output.log (option to add output results to NCI .o file if required)
}

## SLC file names
function slc_file_names {
    scene_dir=$slc_dir/$scene
    slc_name=$scene_dir/$scene"_"$polar
    slc=$slc_name.slc
    slc_par=$slc.par
    slc_bmp=$slc_name"_lowres.bmp"
    slc_png=$slc_name"_lowres.png"
}

## MLI file names
function mli_file_names {
    mli_name=$scene_dir/$scene"_"$polar"_"$rlks"rlks"
    mli=$mli_name.mli
    mli_par=$mli.par
}

## ERS or JERS SLC file names
function asar_ers_jers_slc_file_names {
    msp_par=p$slc_name.slc.par
    raw=$slc_name.raw
    leader=$slc_name.ldr
}

## PALSAR SLC file names
function palsar_slc_file_names {
    raw_file_list=raw_file_list
    pol_list=$scene_dir/pol_list
    sensor_antpat=$MSP_HOME/sensors/palsar_ant_20061024.dat
    msp_antpat="PALSAR_antpat_MSP_"$polar.dat
    sensor_par="PALSAR_sensor_"$polar.par
    msp_par=p$slc_name.slc.par
    raw=$slc_name.raw
    fbd2fbs_slc=$slc_name"_FBS.slc"
    fbd2fbs_par=p$slc_name"_FBS.slc.par"
}

## RADARSAT-1 SLC file names
function radarsat_slc_file_names {
    msp_par=p$slc_name.slc.par
    raw=$slc_name.raw
    leader=$slc_name.ldr
    sensor_par=RSAT.par
    fr_slc_name=$scene"_"$polar"_F"$frame
    fr_slc=$fr_slc_name.slc
    fr_slc_par=$fr_slc.par
}

## Sentinel-1 SLC file names 
function s1_slc_file_names {
    slc1=$slc_name"_IW1.slc"
    slc_par1=$slc1.par
    tops_par1=$slc1.TOPS_par
    slc1_1=$slc_name"_IW1_1.slc"
    slc_par1_1=$slc1_1.par
    tops_par1_1=$slc1_1.TOPS_par
    slc_pre1=$slc_name"_IW1_pre_shift.slc"
    slc_pre_par1=$slc_pre1.par
    tops_pre_par1=$slc_pre1.TOPS_par
    slc1s=$slc_name"_IW1_s.slc"
    slc_par1s=$slc1s.par
    tops_par1s=$slc1s.TOPS_par
    slc2=$slc_name"_IW2.slc"
    slc_par2=$slc2.par
    tops_par2=$slc2.TOPS_par
    slc2_1=$slc_name"_IW2_1.slc"
    slc_par2_1=$slc2_1.par
    tops_par2_1=$slc2_1.TOPS_par
    slc3=$slc_name"_IW3.slc"
    slc_par3=$slc3.par
    tops_par3=$slc3.TOPS_par
    slc3_1=$slc_name"_IW3_1.slc"
    slc_par3_1=$slc3_1.par
    tops_par3_1=$slc3_1.TOPS_par
    slc_tab=$slc_name"_tab"
    slc_bmp1=$slc1.bmp
    slc_png1=$slc1.png
    slc_pre_bmp1=$slc_pre1.bmp
    slc_pre_png1=$slc_pre1.png
    slc_bmp2=$slc2.bmp
    slc_png2=$slc2.png
    slc_bmp3=$slc3.bmp
    slc_png3=$slc3.png

    # multi-frame file names
    fr_slc_name=$scene"_"$polar"_F"$i
    fr_slc1=$fr_slc_name"_IW1.slc"
    fr_slc_par1=$fr_slc1.par
    fr_tops_par1=$fr_slc1.TOPS_par
    fr_slc2=$fr_slc_name"_IW2.slc"
    fr_slc_par2=$fr_slc2.par
    fr_tops_par2=$fr_slc2.TOPS_par
    fr_slc3=$fr_slc_name"_IW3.slc"
    fr_slc_par3=$fr_slc3.par
    fr_tops_par3=$fr_slc3.TOPS_par

    # Subset specific file names
    slc_pre_sub=$slc_name"_pre-subset.slc"
    slc_pre_sub_par=$slc_pre_sub.par
    slc_pre_sub1=$slc_name"_IW1_pre-subset.slc"
    slc_pre_sub_par1=$slc_pre_sub1.par
    tops_pre_sub_par1=$slc_pre_sub1.TOPS_par
    slc_pre_sub2=$slc_name"_IW2_pre-subset.slc"
    slc_pre_sub_par2=$slc_pre_sub2.par
    tops_pre_sub_par2=$slc_pre_sub2.TOPS_par
    slc_pre_sub3=$slc_name"_IW3_pre-subset.slc"
    slc_pre_sub_par3=$slc_pre_sub3.par
    tops_pre_sub_par3=$slc_pre_sub3.TOPS_par
    slc_pre_sub_png=$slc_pre_sub"_lowres.png"
    slc_pre_sub_png1=$slc_pre_sub1.png
    slc_pre_sub_png2=$slc_pre_sub2.png
    slc_pre_sub_png3=$slc_pre_sub3.png
}

## Sentinel-1 resize scene file names
function s1_resize {
    resize_ref_results=$results_dir/$track"_S1_resize_ref_scene"
    min_bursts=$list_dir/min_bursts
    burst_file=$scene_dir/slc_burst_values.txt
    ref_slc_name=$s1_resize_ref"_"$polar
    ref_slc_tab=$slc_dir/$s1_resize_ref/$ref_slc_name"_tab"
    full_slc_tab=$slc_name"_full_tab"
    slc_resize_tab=$slc_name"_resize_tab"
    burst_tab=$slc_name"_resize_burst_tab"
    full_slc=$slc_name"_full.slc"
    full_slc_par=$full_slc.par
    full_slc_png=$slc_name"_full_lowres.png"
    full_slc1=$slc_name"_full_IW1.slc"
    full_slc_par1=$full_slc1.par
    full_tops_par1=$full_slc1.TOPS_par
    full_slc2=$slc_name"_full_IW2.slc"
    full_slc_par2=$full_slc2.par
    full_tops_par2=$full_slc2.TOPS_par
    full_slc3=$slc_name"_full_IW3.slc"
    full_slc_par3=$full_slc3.par
    full_tops_par3=$full_slc3.TOPS_par
    full_slc_png1=$full_slc1.png
    full_slc_png2=$full_slc2.png
    full_slc_png3=$full_slc3.png
}

## DEM reference master file names
function dem_ref_master {
    dem_ref_master_results=$proj_dir/$track/$track"_DEM_ref_master_results"
}

## Multi-look file names
function multilook {
    multi_results=$results_dir/$track"_multi-look_results"
}

## DEM reference master file names
function dem_master_names {
    dem_master_dir=$slc_dir/$master_scene
    dem_master_slc_name=$dem_master_dir/$master_scene"_"$polar
    dem_master_slc=$dem_master_slc_name.slc
    dem_master_slc_par=$dem_master_slc.par
    dem_master_mli_name=$dem_master_dir/$master_scene"_"$polar"_"$rlks"rlks"
    dem_master_mli=$dem_master_mli_name.mli
    dem_master_mli_par=$dem_master_mli.par
    r_dem_master_slc_name=$dem_master_dir/r$master_scene"_"$polar
    r_dem_master_slc=$r_dem_master_slc_name.slc
    r_dem_master_slc_par=$r_dem_master_slc.par
    r_dem_master_mli_name=$dem_master_dir/r$master_scene"_"$polar"_"$rlks"rlks"
    r_dem_master_mli=$r_dem_master_mli_name.mli
    r_dem_master_mli_par=$r_dem_master_mli.par
    r_dem_master_mli_bmp=$r_dem_master_mli.bmp
}

## Automatic GAMMa DEM creation
function auto_dem_creation {
    dem_scene_extent_results=$results_dir/$track"_scene_extents_for_DEM"
}

## DEM file names
function dem_file_names {
    dem=$gamma_dem_dir/$dem_name.dem
    dem_par=$dem.par
    dem_master_name=$dem_dir/$master_scene"_"$polar"_"$rlks"rlks"
    dem_diff=$dem_dir/"diff_"$master_scene"_"$polar"_"$rlks"rlks.par"
    rdc_dem=$dem_master_name"_rdc.dem"
    eqa_dem=$dem_master_name"_eqa.dem"
    eqa_dem_par=$eqa_dem.par
    dem_lt_rough=$dem_master_name"_rough_eqa_to_rdc.lt"
    dem_lt_fine=$dem_master_name"_fine_eqa_to_rdc.lt"
    dem_eqa_sim_sar=$dem_master_name"_eqa.sim"
    dem_rdc_sim_sar=$dem_master_name"_rdc.sim"
    dem_loc_inc=$dem_master_name"_local_inc.ang"
    dem_lsmap=$dem_master_name"_eqa.lsmap"
    dem_pix_sig=$dem_master_name"_pix_sigma0"
    dem_pix_gam=$dem_master_name"_pix_gamma0"
    dem_pix_gam_bmp=$dem_master_name"_pix_gamma0.bmp"
    dem_off=$dem_master_name.off
    dem_offs=$dem_master_name.offs
    dem_ccp=$dem_master_name.ccp
    dem_offsets=$dem_master_name.offsets
    dem_coffs=$dem_master_name.coffs
    dem_coffsets=$dem_master_name.coffsets
    dem_lv_theta=$dem_master_name"_eqa.lv_theta"
    dem_lv_phi=$dem_master_name"_eqa.lv_phi"
    ext_image_flt=$dem_master_name"_ext_img_sar.flt" 
    ext_image_init_sar=$dem_master_name"_ext_img_init.sar" 
    ext_image_sar=$dem_master_name"_ext_img.sar"
    dem_check_file=$results_dir/$track"_DEM_coreg_results"
    lat_lon_pix=$dem_dir/$track"_"$rlks"rlks_sar_latlon.txt"
}

## Slave coregistration file names
function slave_file_names {
    slave_dir=$slc_dir/$slave
    slave_slc_name=$slave"_"$polar
    slave_slc=$slave_dir/$slave_slc_name.slc
    slave_slc_par=$slave_slc.par
    slave_mli_name=$slave"_"$polar"_"$rlks"rlks"
    slave_mli=$slave_dir/$slave_mli_name.mli
    slave_mli_par=$slave_mli.par
    r_slave_slc_name=r$slave"_"$polar
    r_slave_slc=$slave_dir/$r_slave_slc_name.slc
    r_slave_slc_par=$r_slave_slc.par
    r_slave_mli_name=r$slave"_"$polar"_"$rlks"rlks"
    r_slave_mli=$slave_dir/$r_slave_mli_name.mli
    r_slave_mli_par=$r_slave_mli.par
    r_master_slave_name=$slave_dir/$master_scene-$slave_mli_name
    slave_az_ovr=$r_master_slave_name.az_ovr
    slave_az_ovr_poly=$r_master_slave_name.az_ovr.poly
    slave_az_ovr_ras=$r_master_slave_name.az_ovr.ras
    slave_ccp=$r_master_slave_name.ccp
    slave_coffs=$r_master_slave_name.coffs
    slave_coffsets=$r_master_slave_name.coffsets
    slave_diff=$r_master_slave_name.diff   
    slave_diff_par=$r_master_slave_name.diff_par   
    slave_doff=$r_master_slave_name.doff
    slave_lt=$r_master_slave_name.lt
    slave_lt_az_ovr=$r_master_slave_name.lt.az_ovr
    slave_lt_masked=$r_master_slave_name.lt.masked
    slave_off=$r_master_slave_name.off
    slave_off_start=$r_master_slave_name.off.start
    slave_offs=$r_master_slave_name.offs
    slave_offsets=$r_master_slave_name.offsets
    slave_ovr_res=$r_master_slave_name.ovr_results
    slave_ref_iter=$r_master_slave_name.ref_iter
    slave_sim_unw=$r_master_slave_name.sim_unw
    slave_snr=$r_master_slave_name.snr
    slave_stat=$slave_dir/$slave"_image_stat.txt"
    slave_check_file=$results_dir/$track"_slave_coreg_results"
}

## Sentinel-1 slave coregistration file names
function s1_slave_file_names {
    master_slc_tab=$dem_master_slc_name"_tab"
    slave_slc_tab=$slave_dir/$slave_slc_name"_tab"
    r_slave_slc_tab=$slave_dir/r$slave_slc_name"_tab"
    master_slc1=$dem_master_slc_name"_IW1.slc"
    master_slc_par1=$master_slc1.par
    master_tops_par1=$master_slc1.TOPS_par
    master_slc2=$dem_master_slc_name"_IW2.slc"
    master_slc_par2=$master_slc2.par
    master_tops_par2=$master_slc2.TOPS_par
    master_slc3=$dem_master_slc_name"_IW3.slc"
    master_slc_par3=$master_slc3.par
    master_tops_par3=$master_slc3.TOPS_par
    slave_slc1=$slave_dir/$slave_slc_name"_IW1.slc"
    slave_slc_par1=$slave_slc1.par
    slave_tops_par1=$slave_slc1.TOPS_par
    slave_slc2=$slave_dir/$slave_slc_name"_IW2.slc"
    slave_slc_par2=$slave_slc2.par
    slave_tops_par2=$slave_slc2.TOPS_par
    slave_slc3=$slave_dir/$slave_slc_name"_IW3.slc"
    slave_slc_par3=$slave_slc3.par
    slave_tops_par3=$slave_slc3.TOPS_par
    r_slave_slc1=$slave_dir/$r_slave_slc_name"_IW1.slc"
    r_slave_slc_par1=$r_slave_slc1.par
    r_slave_tops_par1=$r_slave_slc1.TOPS_par
    r_slave_slc2=$slave_dir/$r_slave_slc_name"_IW2.slc"
    r_slave_slc_par2=$r_slave_slc2.par
    r_slave_tops_par2=$r_slave_slc2.TOPS_par
    r_slave_slc3=$slave_dir/$r_slave_slc_name"_IW3.slc"
    r_slave_slc_par3=$r_slave_slc3.par
    r_slave_tops_par3=$r_slave_slc3.TOPS_par
}

## Inteferogram file names
function ifg_file_names {
    ifg_dir=$int_dir/$master-$slave
    master_dir=$slc_dir/$master
    slave_dir=$slc_dir/$slave
    r_master_slc_name=$master_dir/r$master"_"$polar
    r_master_slc=$r_master_slc_name.slc
    r_master_slc_par=$r_master_slc.par
    r_master_mli_name=$master_dir/r$master"_"$polar"_"$rlks"rlks"
    r_master_mli=$r_master_mli_name.mli
    r_master_mli_par=$r_master_mli.par
    r_slave_slc_name=$slave_dir/r$slave"_"$polar
    r_slave_slc=$r_slave_slc_name.slc
    r_slave_slc_par=$r_slave_slc.par
    r_slave_mli_name=$slave_dir/r$slave"_"$polar"_"$rlks"rlks"
    r_slave_mli=$r_slave_mli_name.mli
    r_slave_mli_par=$r_slave_mli.par
    master_slave_name=$ifg_dir/$master-$slave"_"$polar"_"$rlks"rlks"
    ifg_base=$master_slave_name"_base.par"
    ifg_base_init=$master_slave_name"_base_init.par"
    ifg_base_res=$master_slave_name"_base_res.par"
    ifg_base_temp=$master_slave_name"_base_temp.par"
    ifg_bperp=$master_slave_name"_bperp.par"
    ifg_ccp=$master_slave_name.ccp
    ifg_coffs=$master_slave_name.coffs
    ifg_coffsets=$master_slave_name.coffsets
    ifg_diff_par=$master_slave_name"_diff.par"
    ifg_filt=$master_slave_name"_filt.int"
    ifg_filt_float=$master_slave_name"_filt_int.flt"
    ifg_filt_geocode_bmp=$master_slave_name"_filt_eqa_int.bmp"  
    ifg_filt_geocode_out=$master_slave_name"_filt_eqa.int"
    ifg_filt_geocode_png=$master_slave_name"_filt_eqa_int.png" 
    ifg_filt_mask=$master_slave_name"_filt_mask.int"
    ifg_filt_cc=$master_slave_name"_filt.cc"
    ifg_filt_cc_geocode_bmp=$master_slave_name"_filt_eqa_cc.bmp"
    ifg_filt_cc_geocode_out=$master_slave_name"_filt_eqa.cc"
    ifg_filt_cc_geocode_png=$master_slave_name"_filt_eqa_cc.png"
    ifg_flat=$master_slave_name"_flat.int"
    ifg_flat_float=$master_slave_name"_flat_int.flt"
    ifg_flat_geocode_bmp=$master_slave_name"_flat_eqa_int.bmp"
    ifg_flat_geocode_out=$master_slave_name"_flat_eqa.int"
    ifg_flat_geocode_png=$master_slave_name"_flat_eqa_int.png"
    ifg_flat_temp=$master_slave_name"_flat_temp.int"
    ifg_flat0=$master_slave_name"_flat0.int"
    ifg_flat1=$master_slave_name"_flat1.int"
    ifg_flat10=$master_slave_name"_flat10.int"
    ifg_flat_cc=$master_slave_name"_flat.cc"
    ifg_flat_cc_geocode_bmp=$master_slave_name"_flat_eqa_cc.bmp"
    ifg_flat_cc_geocode_out=$master_slave_name"_flat_eqa.cc"
    ifg_flat_cc_geocode_png=$master_slave_name"_flat_eqa_cc.png"
    ifg_flat_cc0=$master_slave_name"_flat0.cc"
    ifg_flat_cc0_mask=$master_slave_name"_flat0_cc_mask.ras"
    ifg_flat_cc10=$master_slave_name"_flat10.cc"
    ifg_flat_cc10_mask=$master_slave_name"_flat10_cc_mask.ras"
    ifg_gcp=$master_slave_name.gcp
    ifg_gcp_ph=$master_slave_name.gcp_ph
    ifg_mask=$master_slave_name"_mask.ras"
    ifg_mask_thin=$master_slave_name"_mask_thin.ras"
    ifg_off=$master_slave_name"_off.par"
    ifg_off10=$master_slave_name"_off10.par"
    ifg_offs=$master_slave_name.offs
    ifg_sim_diff=$master_slave_name"_sim_diff.unw"
    ifg_sim_unw=$master_slave_name"_sim.unw"
    ifg_sim_unw0=$master_slave_name"_sim0.unw"
    ifg_sim_unw1=$master_slave_name"_sim1.unw"
    ifg_sim_unw_ph=$master_slave_name"_sim_ph.unw"
    ifg_unw=$master_slave_name.unw
    ifg_unw_geocode_bmp=$master_slave_name"_eqa_unw.bmp"
    ifg_unw_geocode_out=$master_slave_name"_eqa.unw"
    ifg_unw_geocode_png=$master_slave_name"_eqa_unw.png"
    ifg_unw_mask=$master_slave_name"_mask.unw"
    ifg_unw_model=$master_slave_name"_model.unw"
    ifg_unw_thin=$master_slave_name"_thin.unw"
}

## Post processing directories
function post_process {
    post_dir=$proj_dir/$track/$post_method
    post_dem_dir=$post_dir/dem_files
    post_flat_ifg_dir=$post_dir/flat_ifg_files
    post_filt_ifg_dir=$post_dir/filt_ifg_files
    post_unw_ifg_dir=$post_dir/unw_ifg_files
    post_flat_cc_dir=$post_dir/flat_cc_files
    post_filt_cc_dir=$post_dir/filt_cc_files
    geotiff_dir=$proj_dir/$track/geotiff_files
    geotiff_flat_ifg=$geotiff_dir/flat_ifg_geotiffs
    geotiff_filt_ifg=$geotiff_dir/filt_ifg_geotiffs
    geotiff_unw_ifg=$geotiff_dir/unw_ifg_geotiffs
    geotiff_flat_cc=$geotiff_dir/flat_cc_geotiffs
    geotiff_filt_cc=$geotiff_dir/filt_cc_geotiffs
    gamma_data_dir=$post_dir/gamma_data
    stamps_geo_dir=$gamma_data_dir/geo
    stamps_baselines_dir=$gamma_data_dir/SMALL_BASELINES
    stamps_diff_dir=$stamps_baselines_dir/diff0
    stamps_rslc_dir=$stamps_baselines_dir/rslc
}

## Track offsets file names
function track_offsets {
    master_dir=$slc_dir/$master
    slave_dir=$slc_dir/$slave
    ifg_dir=$int_dir/$master-$slave
    r_master_slc_name=$master_dir/r$master"_"$polar
    r_master_slc=$r_master_slc_name.slc
    r_master_slc_par=$r_master_slc.par
    r_slave_slc_name=$slave_dir/r$slave"_"$polar
    r_slave_slc=$r_slave_slc_name.slc
    r_slave_slc_par=$r_slave_slc.par
}


##########################   PBS JOB GENERATION FUNCTIONS USED BY process_gamma  ##########################

## Single PBS job function
function single_job {
    local pbs_run_loc=$1
    local pbs_job_prefix=$2
    local nci_project=$3
    local batch_dir=$4
    local walltime=$5
    local mem=$6
    local cpu=$7
    local queue=$8
    local depend_job=$9
    local depend_type=${10}
    local job_type=${11}
    local script_type=${12}
    local script=${13}

    cd $batch_dir
    job=$pbs_job_prefix

    ## proc_file location differs if script restarted
    if [ $pbs_job_prefix == 'restart' ]; then
	proc_file1=$proc_file
    else
	proc_file1=$proj_dir/$proc_file
    fi

    echo \#\!/bin/bash > $job
      echo \#\PBS -l other=$pbs_run_loc >> $job
    echo \#\PBS -l walltime=$walltime >> $job
    echo \#\PBS -l mem=$mem >> $job
    echo \#\PBS -l ncpus=$cpu >> $job
    echo \#\PBS -l wd >> $job
    echo \#\PBS -W umask=017 >> $job
    echo \#\PBS -P $nci_project >> $job
    if [ $pbs_job_prefix == 'init_base' -o $pbs_job_prefix == 'prec_base' ]; then  ## needs python3 to activate baselines script
	echo \#\PBS -l "software=python" >> $job
    else
	:
    fi
    echo \#\PBS -q $queue >> $job
    if [ $depend_job == "0" ]; then #cannnot be integer input, as the depend jobs may be 'xxxx:xxxx:xxxx:xxxx'
	:
    else
	echo \#\PBS -W depend=$depend_type:$depend_job >> $job
    fi
    echo -e "\n" >> $job
    echo "export OMP_NUM_THREADS="$cpu >> $job
    echo -e "\n" >> $job

    if [ $pbs_job_prefix == 'init_base' -o $pbs_job_prefix == 'prec_base' ]; then  ## needs python3 to activate baselines script
	echo "module load python3/3.5.2 python3/3.5.2-matplotlib" >> $job
	echo -e "\n" >> $job
	echo python3 ~/repo/gamma_insar/$script $proc_file1 $script_type >> $job
    else
        echo ~/repo/gamma_insar/$script $proc_file1 $script_type >> $job
    fi
    chmod +x $job
    if [ $job_type -eq 1 ]; then #batch job submission
	if [ $pbs_job_prefix == 'restart' ]; then
	    qsub $job
	else
	    qsub $job | tee $batch_dir/$pbs_job_prefix"_job_id"
	fi
    else
	:
    fi
}

## Multiple PBS jobs function
function multi_jobs {
    local pbs_run_loc=$1
    local pbs_job_prefix=$2
    local nci_project=$3
    local mem=$4
    local cpu=$5
    local queue=$6
    local script=$7
    local depend_job=$8
    local depend_type=$9
    local type=${10}
    local batch_dir=${11}
    local script_type=${12}
    local njobs=${13}
    local nsteps=${14}
    local i=${15}
    local wt=$(( wt1*nsteps ))
    local hh=$(( wt/60 ))
    local mm=$(( wt%60 ))
    local m=0
    local n=0
    
    for(( m=0; m<njobs; m++ )); do
	i=$(( i+=1 ))
	jobdir=job_$i
	mkdir -p $jobdir

	cd $jobdir
	job=$pbs_job_prefix$i
	if [ $type -eq 1 ]; then
	    echo Doing job $i in $jobdir with $job
	else
	    :
	fi
	echo \#\!/bin/bash > $job
	echo \#\PBS -l other=$pbs_run_loc >> $job
	echo \#\PBS -l walltime=$hh":"$mm":00" >> $job
	echo \#\PBS -l mem=$mem >> $job
	echo \#\PBS -l ncpus=$cpu >> $job
	echo \#\PBS -W umask=017 >> $job
	echo \#\PBS -P $nci_project >> $job
	echo \#\PBS -l wd >> $job
	echo \#\PBS -q $queue >> $job
	if [ $depend_job == "0" ]; then #cannnot be integer input, as the depend jobs may be 'xxxx:xxxx:xxxx:xxxx'
	    :
	else
	    echo \#\PBS -W depend=$depend_type:$depend_job >> $job
	fi
	echo -e "\n" >> $job
	echo "export OMP_NUM_THREADS="$cpu >> $job
	echo -e "\n" >> $job
	for(( n=0; n<nsteps; n++ )); do
	    read line # equals data in each line of file
	    if [ $pbs_job_prefix == 'ifg_' ]; then
		master=`echo $line | awk 'BEGIN {FS=","} ; {print $1}'`
		slave=`echo $line | awk 'BEGIN {FS=","} ; {print $2}'`
		echo ~/repo/gamma_insar/$script $proj_dir/$proc_file $master $slave $script_type >> $job
	    else
		echo ~/repo/gamma_insar/$script $proj_dir/$proc_file $line $script_type >> $job
	    fi
	done
	chmod +x $job
	if [ $type -eq 1 ]; then #batch job submission
	    qsub $job | tee $batch_dir/$pbs_job_prefix$i"_job_id"
	    ls $batch_dir/$pbs_job_prefix$i"_job_id" >> $batch_dir/list
	else
	    :
	fi
	cd ../
    done

    # create dependency list for jobs (make sure all jobs are finished before error consolidation)
    if [ $type -eq 1 ]; then
	cd $batch_dir
	if [ -f list2 ]; then
	    rm -rf list2
	else
	    :
	fi
	while read id; do
	    less $id >> list2
	done < list
	sed s/.r-man2// list2 > list3 # leave just job numbers
	sort -n list3 > list4 # sort numbers
	tr '\n' ':' < list4 > list5 # move column to single row with numbers separated by :
	sed s'/.$//' list5 > "all_"$pbs_job_prefix"job_ids" # remove last :
	dep=`awk '{print $1}' "all_"$pbs_job_prefix"job_ids" `
    else
	: 
    fi
}


