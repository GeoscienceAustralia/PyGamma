#!/bin/bash

display_usage() {
    echo ""
    echo "*******************************************************************************"
    echo "* plot_pixel_graph:  Plot pixel point analysis on a graph.                    *"
    echo "*                    Requires pixel_point_values.txt to be created in         *"
    echo "*                    Pirate.                                                  *"
    echo "*                                                                             *"
    echo "*  NOTE: script will only work if run on the NCI. The Pirate files will need  *"
    echo "*        to be transferred from GA to NCI                                     *"
    echo "*                                                                             *"
    echo "* input:  [proc_file]    name of GAMMA proc file (eg. gamma.proc)             *"
    echo "*         [values_file]  name of pixel values file                            *"
    echo "*         <event_lines>  name of file containing events that are to be        *"
    echo "*                        plotted as lines on the graph (eg. earthquake)       *"                      
    echo "*                                                                             *"
    echo "* author: Sarah Lawrie @ GA       04/09/2015, v1.0                            *"
    echo "*******************************************************************************"
    echo -e "Usage: plot_pixel_graphs.bash [proc_file] [values_file] <event_lines>"
    }

if [ $# -lt 2 ]
then 
    display_usage
    exit 1
fi

proc_file=$1
values_file=$2
event_file=$3

title="Pixel_1"
psfile=$title.ps

tif_width=7.3c
tif_height=6.76c
dpi=300


## Variables from parameter file (*.proc)
platform=`grep Platform= $proc_file | cut -d "=" -f 2`
project=`grep Project= $proc_file | cut -d "=" -f 2`
sensor=`grep Sensor= $proc_file | cut -d "=" -f 2`
track=`grep Track= $proc_file | cut -d "=" -f 2`

## Identify project directory based on platform
if [ $platform == NCI ]; then
    proj_dir=/g/data1/dg9/INSAR_ANALYSIS/$project/$sensor/GAMMA
    pir_dir=/g/data1/dg9/INSAR_ANALYSIS/$project/$sensor/PIRATE
else
    proj_dir=/nas/gemd/insar/INSAR_ANALYSIS/$project/$sensor/GAMMA
    pir_dir=/nas/gemd/insar/INSAR_ANALYSIS/$project/$sensor/PIRATE
fi

## Load GAMMA based on platform
if [ $platform == NCI ]; then
    GAMMA=`grep GAMMA_NCI= $proc_file | cut -d "=" -f 2`
    source $GAMMA
else
    GAMMA=`grep GAMMA_GA= $proc_file | cut -d "=" -f 2`
    source $GAMMA
fi

dir=$pir_dir/$track/pixel_plots
cd $dir


# Determine min and max values for plotting
awk 'NR > 1 {print $1}' $values_file > p_values
awk 'NR > 1 {print $2}' $values_file > yr_values
awk 'NR > 1 {print $3}' $values_file > e_values
paste yr_values p_values e_values > values

min_yr1=`head -n 1 yr_values`
min_yr=`printf '%.*f\n' 0 $min_yr1`
max_yr1=`tail -1 yr_values | cut -d "." -f 1`
max_yr=$(echo $max_yr1 + 1 | bc)

paste p_values e_values > temp1
sort -k1 -n -r temp1 > temp2

min1=`head -n 1 temp2`
max1=`tail -1 temp2`
x1=`echo $min1 | awk '{print $1}'`
x2=`echo $max1 | awk '{print $1}'`

e1=`echo $min1 | awk '{print $2}'`
if (( $(bc <<< "$x1 < 0") == 1 )); then
    val1=$(echo $x1 + $e1 | bc)
else
    val1=$(echo $x1 - $e1 | bc)    
fi

min_x1=`printf '%.*f\n' 0 $val1`
if (( $(bc <<< "$min_x1 < 0") == 1 )); then
    min_x=$(echo $min_x1 + 2 | bc)
else
    min_x=$(echo $min_x1 - 2 | bc)    
fi

e2=`echo $max1 | awk '{print $2}'`
if (( $(bc <<< "$x2 < 0") == 1 )); then
    val2=$(echo $x2 - $e2 | bc)
else
    val2=$(echo $x2 + $e2 | bc)    
fi

max_x1=`printf '%.*f\n' 0 $val2`
if (( $(bc <<< "$max_x1 < 0") == 1 )); then
    max_x=$(echo $max_x1 - 2 | bc)
else
    max_x=$(echo $max_x1 + 2 | bc)    
fi

#flip x min and max if negative
if [ $min_x -le 0 -a  $max_x -le 0 ]; then
    min_x1=$min_x
    max_x1=$max_x
    min_x=$max_x1
    max_x=$min_x1
elif [ $min_x -gt 0 -a  $max_x -le 0 ]; then
    min_x1=$min_x
    max_x1=$max_x
    min_x=$max_x1
    max_x=$min_x1
else
    :
fi

proj=-JX8/7
range=-R$min_yr/$max_yr/$min_x/$max_x
gmtset PROJ_LENGTH_UNIT c
gmtset MAP_TICK_LENGTH_PRIMARY 4p/2p
gmtset FONT_ANNOT_PRIMARY 10p
gmtset FONT_LABEL 12p 
gmtset MAP_LABEL_OFFSET 0.3c
gmtset FONT_TITLE 14p
gmtset MAP_TITLE_OFFSET 0.4c

# Plot event lines (if they exist) and error bars
if [ ! -z $event_file ]; then
    psxy $event_file $proj $range -W0.8p,0/200/0 -K -P -V > $psfile
    psxy values $proj $range -Ey5p/0.55p,180/0/0 -Sc0.01 -Gblack -K -O -P -V >> $psfile
else
    psxy values $proj $range -Ey5p/0.55p,180/0/0 -Sc0.01 -Gblack -K -P -V > $psfile
fi

# Plot line between points
psxy values $proj $range -W0.5p,black -K -O -P -V >> $psfile

# Plot pixel points
psxy values $proj $range -Sc0.15 -W0.4p,black -G108/166/205 -Ba1f0.5:"Time (yrs)":/a2f1:"LOS cuml displ (mm)":/WSne -K -O -P -V >> $psfile

# Plot basemap and header
psbasemap $proj $range -B:."$title":wsen -O -P -V >> $psfile

# Export to .tif
ps2raster $psfile -A+s$tif_width/$tif_height -E$dpi -Tt -V

# Clean up files
rm *.ps p_values yr_values e_values values temp1 temp2


# script end 
####################
